{
  "@roblox/global/Beep": {
    "documentation": "Produces a beep sound using a triangle wave.",
    "params": [
      {
        "documentation": "@roblox/global/Beep/params/0",
        "name": "frequency"
      }
    ]
  },
  "@roblox/global/Beep/params/0": {},
  "@roblox/global/FileSystem": {},
  "@roblox/global/GetCPUTime": {
    "documentation": "Returns the current elapsed CPU time.",
    "params": [],
    "returns": [
      "@roblox/global/GetCPUTime/returns/0"
    ]
  },
  "@roblox/global/GetCPUTime/returns/0": {},
  "@roblox/global/GetPart": {
    "documentation": "Gets a part of the specified type from any connected ports."
  },
  "@roblox/global/GetPartFromPort": {
    "documentation": "Gets a part of the specified type from any port of the specified ID."
  },
  "@roblox/global/GetParts": {
    "documentation": "Gets all the parts of the specified type from any connected ports."
  },
  "@roblox/global/GetPartsFromPort": {
    "documentation": "Gets all the parts of the specified type from any port of the specified ID."
  },
  "@roblox/global/GetPort": {
    "documentation": "Gets the connected port of the specified ID.",
    "params": [
      {
        "documentation": "@roblox/global/GetPort/params/0",
        "name": "id"
      }
    ],
    "returns": [
      "@roblox/global/GetPort/returns/0"
    ]
  },
  "@roblox/global/GetPort/params/0": {},
  "@roblox/global/GetPort/returns/0": {},
  "@roblox/global/GetPorts": {
    "documentation": "Gets all the connected ports of the specified ID.",
    "params": [
      {
        "documentation": "@roblox/global/GetPorts/params/0",
        "name": "id"
      }
    ],
    "returns": [
      "@roblox/global/GetPorts/returns/0"
    ]
  },
  "@roblox/global/GetPorts/params/0": {},
  "@roblox/global/GetPorts/returns/0": {},
  "@roblox/global/JSONDecode": {
    "documentation": "Decodes JSON.",
    "params": [
      {
        "documentation": "@roblox/global/JSONDecode/params/0",
        "name": "data"
      }
    ],
    "returns": [
      "@roblox/global/JSONDecode/returns/0"
    ]
  },
  "@roblox/global/JSONDecode/params/0": {},
  "@roblox/global/JSONDecode/returns/0": {},
  "@roblox/global/JSONEncode": {
    "documentation": "Encodes JSON. Proxy for <code>HttpService:JSONEncode</code>.",
    "params": [
      {
        "documentation": "@roblox/global/JSONEncode/params/0",
        "name": "data"
      }
    ],
    "returns": [
      "@roblox/global/JSONEncode/returns/0"
    ]
  },
  "@roblox/global/JSONEncode/params/0": {},
  "@roblox/global/JSONEncode/returns/0": {},
  "@roblox/global/Microcontroller": {
    "documentation": "The microcontroller object the program is running in."
  },
  "@roblox/global/Network": {},
  "@roblox/global/RawFileSystem": {},
  "@roblox/global/SandboxID": {
    "documentation": "The GUID of the microcontroller the program is running in."
  },
  "@roblox/global/SandboxRunID": {
    "documentation": "A GUID for the current running program, it is (re)generated when the microcontroller is turned on."
  },
  "@roblox/global/TriggerPort": {
    "documentation": "Triggers the specified port.",
    "params": [
      {
        "documentation": "@roblox/global/TriggerPort/params/0",
        "name": "port"
      }
    ]
  },
  "@roblox/global/TriggerPort/params/0": {},
  "@roblox/global/logError": {
    "documentation": "Logs an error in the output, without actually throwing an error.",
    "params": [
      {
        "documentation": "@roblox/global/logError/params/0",
        "name": "message"
      },
      {
        "documentation": "@roblox/global/logError/params/1",
        "name": "level"
      }
    ]
  },
  "@roblox/global/logError/params/0": {},
  "@roblox/global/logError/params/1": {},
  "@roblox/global/pilot": {
    "documentation": "Provides functions for accessing/manipulating information about threads such as permissions, ownership, and interrupts.",
    "keys": {
      "claimThread": "@roblox/global/pilot.claimThread",
      "getCPUTime": "@roblox/global/pilot.getCPUTime",
      "getRing": "@roblox/global/pilot.getRing",
      "getThreadParent": "@roblox/global/pilot.getThreadParent",
      "getTimeout": "@roblox/global/pilot.getTimeout",
      "hasRing": "@roblox/global/pilot.hasRing",
      "saveRing": "@roblox/global/pilot.saveRing",
      "setInterrupt": "@roblox/global/pilot.setInterrupt",
      "setRing": "@roblox/global/pilot.setRing",
      "setTimeout": "@roblox/global/pilot.setTimeout"
    }
  },
  "@roblox/global/pilot.claimThread": {
    "documentation": "Sets the thread's parent to the running thread. The target thread must be part of the sandbox and may not exist on a lower ring otherwise nothing will happen.",
    "params": [
      {
        "documentation": "@roblox/global/pilot.claimThread/params/0",
        "name": "thread"
      }
    ],
    "returns": [
      "@roblox/global/pilot.claimThread/returns/0"
    ]
  },
  "@roblox/global/pilot.claimThread/params/0": {},
  "@roblox/global/pilot.claimThread/returns/0": {},
  "@roblox/global/pilot.getCPUTime": {
    "documentation": "Returns the current elapsed CPU time.",
    "params": [],
    "returns": [
      "@roblox/global/pilot.getCPUTime/returns/0"
    ]
  },
  "@roblox/global/pilot.getCPUTime/returns/0": {},
  "@roblox/global/pilot.getRing": {
    "documentation": "Gets the ring of the target (or running) thread.",
    "params": [
      {
        "documentation": "@roblox/global/pilot.getRing/params/0",
        "name": "thread"
      }
    ],
    "returns": [
      "@roblox/global/pilot.getRing/returns/0"
    ]
  },
  "@roblox/global/pilot.getRing/params/0": {},
  "@roblox/global/pilot.getRing/returns/0": {},
  "@roblox/global/pilot.getThreadParent": {
    "documentation": "Gets the parent of the target (or running) thread. The parent thread must be part of the sandbox and may not exist on a lower ring otherwise nil will be returned.",
    "params": [
      {
        "documentation": "@roblox/global/pilot.getThreadParent/params/0",
        "name": "thread"
      }
    ],
    "returns": [
      "@roblox/global/pilot.getThreadParent/returns/0"
    ]
  },
  "@roblox/global/pilot.getThreadParent/params/0": {},
  "@roblox/global/pilot.getThreadParent/returns/0": {},
  "@roblox/global/pilot.getTimeout": {
    "documentation": "Gets the current CPU timeout, or the CPU timeout that the given thread will obey.",
    "params": [
      {
        "documentation": "@roblox/global/pilot.getTimeout/params/0",
        "name": "thread"
      }
    ],
    "returns": [
      "@roblox/global/pilot.getTimeout/returns/0"
    ]
  },
  "@roblox/global/pilot.getTimeout/params/0": {},
  "@roblox/global/pilot.getTimeout/returns/0": {},
  "@roblox/global/pilot.hasRing": {
    "documentation": "Checks if the target (or running) thread has the specified ring privilege or lower.",
    "params": [
      {
        "documentation": "@roblox/global/pilot.hasRing/params/0",
        "name": "ring"
      },
      {
        "documentation": "@roblox/global/pilot.hasRing/params/1",
        "name": "thread"
      }
    ],
    "returns": [
      "@roblox/global/pilot.hasRing/returns/0"
    ]
  },
  "@roblox/global/pilot.hasRing/params/0": {
    "documentation": "The ring to check for."
  },
  "@roblox/global/pilot.hasRing/params/1": {
    "documentation": "The thread to check for the ring on. If not specified, the running thread will be used."
  },
  "@roblox/global/pilot.hasRing/returns/0": {},
  "@roblox/global/pilot.saveRing": {
    "documentation": "Creates a function which elevates the caller to the specified (or current) ring regardless of its privilege. You can use this to de-escalate, spawn a new thread, and then re-escalate your thread after. Requires ring 0 or lower.",
    "params": [
      {
        "documentation": "@roblox/global/pilot.saveRing/params/0",
        "name": "ring"
      }
    ],
    "returns": [
      "@roblox/global/pilot.saveRing/returns/0"
    ]
  },
  "@roblox/global/pilot.saveRing/params/0": {},
  "@roblox/global/pilot.saveRing/returns/0": {
    "params": []
  },
  "@roblox/global/pilot.setInterrupt": {
    "documentation": "Will repeatedly call the interrupt every period CPU time on a valid resumption time (ignores yields/waits). Returns a function which deletes the interrupt.",
    "params": [
      {
        "documentation": "@roblox/global/pilot.setInterrupt/params/0",
        "name": "period"
      },
      {
        "documentation": "@roblox/global/pilot.setInterrupt/params/1",
        "name": "callback"
      }
    ],
    "returns": [
      "@roblox/global/pilot.setInterrupt/returns/0"
    ]
  },
  "@roblox/global/pilot.setInterrupt/params/0": {},
  "@roblox/global/pilot.setInterrupt/params/1": {
    "params": []
  },
  "@roblox/global/pilot.setInterrupt/returns/0": {
    "params": []
  },
  "@roblox/global/pilot.setRing": {
    "documentation": "Sets the ring of the target (or running) thread. You can use .saveRing to store the current ring so you can escalate again later.",
    "params": [
      {
        "documentation": "@roblox/global/pilot.setRing/params/0",
        "name": "ring"
      },
      {
        "documentation": "@roblox/global/pilot.setRing/params/1",
        "name": "thread"
      }
    ]
  },
  "@roblox/global/pilot.setRing/params/0": {},
  "@roblox/global/pilot.setRing/params/1": {},
  "@roblox/global/pilot.setTimeout": {
    "documentation": "Sets the CPU timeout of the given thread. Requires ring -1 or lower. This will not let you exceed the game's timeout, but will let you set lower timeouts. This has to do with whatever thread happens to be actively running. Currently there is not a way for you to recover from a timeout, so you should use .setInterrupt to handle your own custom timeouts.",
    "params": [
      {
        "documentation": "@roblox/global/pilot.setTimeout/params/0",
        "name": "timeout"
      },
      {
        "documentation": "@roblox/global/pilot.setTimeout/params/1",
        "name": "thread"
      }
    ]
  },
  "@roblox/global/pilot.setTimeout/params/0": {
    "documentation": "The CPU timeout in seconds."
  },
  "@roblox/global/pilot.setTimeout/params/1": {
    "documentation": "The thread to apply the timeout to."
  },
  "@roblox/globaltype/ARCamera": {
    "documentation": "The player's camera, used for AR devices.",
    "keys": {
      "CFrame": "@roblox/globaltype/ARCamera.CFrame",
      "CameraType": "@roblox/globaltype/ARCamera.CameraType",
      "DiagonalFieldOfView": "@roblox/globaltype/ARCamera.DiagonalFieldOfView",
      "FieldOfView": "@roblox/globaltype/ARCamera.FieldOfView",
      "FieldOfViewMode": "@roblox/globaltype/ARCamera.FieldOfViewMode",
      "Focus": "@roblox/globaltype/ARCamera.Focus",
      "HeadScale": "@roblox/globaltype/ARCamera.HeadScale",
      "MaxAxisFieldOfView": "@roblox/globaltype/ARCamera.MaxAxisFieldOfView",
      "NearPlaneZ": "@roblox/globaltype/ARCamera.NearPlaneZ",
      "RenderCFrame": "@roblox/globaltype/ARCamera.RenderCFrame",
      "ViewportSize": "@roblox/globaltype/ARCamera.ViewportSize",
      "ViewportSizeUI": "@roblox/globaltype/ARCamera.ViewportSizeUI"
    }
  },
  "@roblox/globaltype/ARCamera.CFrame": {},
  "@roblox/globaltype/ARCamera.CameraType": {},
  "@roblox/globaltype/ARCamera.DiagonalFieldOfView": {},
  "@roblox/globaltype/ARCamera.FieldOfView": {},
  "@roblox/globaltype/ARCamera.FieldOfViewMode": {},
  "@roblox/globaltype/ARCamera.Focus": {},
  "@roblox/globaltype/ARCamera.HeadScale": {},
  "@roblox/globaltype/ARCamera.MaxAxisFieldOfView": {},
  "@roblox/globaltype/ARCamera.NearPlaneZ": {},
  "@roblox/globaltype/ARCamera.RenderCFrame": {
    "documentation": "The <code>CFrame</code> the camera is rendered at (for VR)."
  },
  "@roblox/globaltype/ARCamera.ViewportSize": {
    "documentation": "The size of the camera viewport."
  },
  "@roblox/globaltype/ARCamera.ViewportSizeUI": {
    "documentation": "The size of the camera viewport (2D UI context)"
  },
  "@roblox/globaltype/ARController": {
    "documentation": "Like a TouchScreen, but for your actual screen.\nHas the capability to display augmented 3D objects and visuals in a virtualized world.\nClick to equip/unequip. Output may only be displayed from one ARController at a time.",
    "keys": {
      "ClassName": "@roblox/globaltype/ARController.ClassName",
      "ClearElements": "@roblox/globaltype/ARController.ClearElements",
      "ClearElements3D": "@roblox/globaltype/ARController.ClearElements3D",
      "Configure": "@roblox/globaltype/ARController.Configure",
      "Configured": "@roblox/globaltype/ARController.Configured",
      "CreateElement": "@roblox/globaltype/ARController.CreateElement",
      "CreateElement3D": "@roblox/globaltype/ARController.CreateElement3D",
      "CursorMoved": "@roblox/globaltype/ARController.CursorMoved",
      "CursorPressed": "@roblox/globaltype/ARController.CursorPressed",
      "CursorReleased": "@roblox/globaltype/ARController.CursorReleased",
      "GetCanvas": "@roblox/globaltype/ARController.GetCanvas",
      "GetCursor": "@roblox/globaltype/ARController.GetCursor",
      "GetCursors": "@roblox/globaltype/ARController.GetCursors",
      "KeyPressed": "@roblox/globaltype/ARController.KeyPressed",
      "OnClick": "@roblox/globaltype/ARController.OnClick",
      "Transparency": "@roblox/globaltype/ARController.Transparency",
      "UserInput": "@roblox/globaltype/ARController.UserInput"
    }
  },
  "@roblox/globaltype/ARController.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/ARController.ClearElements": {
    "documentation": "Clears all objects that are descendants of the screen.",
    "params": [
      {
        "documentation": "@roblox/globaltype/ARController.ClearElements",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/ARController.ClearElements/params/1",
        "name": "context"
      }
    ]
  },
  "@roblox/globaltype/ARController.ClearElements/params/1": {},
  "@roblox/globaltype/ARController.ClearElements3D": {
    "documentation": "Clears 3D elements.",
    "params": []
  },
  "@roblox/globaltype/ARController.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/ARController.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/ARController.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/ARController.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/ARController.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/ARController.CreateElement": {
    "documentation": "Creates an element of the specified class name with the specified properties.",
    "params": [
      {
        "documentation": "@roblox/globaltype/ARController.CreateElement",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/ARController.CreateElement/params/1",
        "name": "className"
      },
      {
        "documentation": "@roblox/globaltype/ARController.CreateElement/params/2",
        "name": "properties"
      },
      {
        "documentation": "@roblox/globaltype/ARController.CreateElement/params/3",
        "name": "context"
      }
    ],
    "returns": [
      "@roblox/globaltype/ARController.CreateElement/returns/0"
    ]
  },
  "@roblox/globaltype/ARController.CreateElement/params/1": {},
  "@roblox/globaltype/ARController.CreateElement/params/2": {},
  "@roblox/globaltype/ARController.CreateElement/params/3": {},
  "@roblox/globaltype/ARController.CreateElement/returns/0": {},
  "@roblox/globaltype/ARController.CreateElement3D": {
    "documentation": "Creates a 3D part instance in the player's viewport.",
    "params": [
      {
        "documentation": "@roblox/globaltype/ARController.CreateElement3D",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/ARController.CreateElement3D/params/1",
        "name": "shape"
      },
      {
        "documentation": "@roblox/globaltype/ARController.CreateElement3D/params/2",
        "name": "properties"
      }
    ],
    "returns": [
      "@roblox/globaltype/ARController.CreateElement3D/returns/0"
    ]
  },
  "@roblox/globaltype/ARController.CreateElement3D/params/1": {},
  "@roblox/globaltype/ARController.CreateElement3D/params/2": {},
  "@roblox/globaltype/ARController.CreateElement3D/returns/0": {},
  "@roblox/globaltype/ARController.CursorMoved": {
    "documentation": "Fired when a player's cursor updates."
  },
  "@roblox/globaltype/ARController.CursorPressed": {
    "documentation": "Fired when a player left clicks."
  },
  "@roblox/globaltype/ARController.CursorReleased": {
    "documentation": "Fired when a player releases the left click button."
  },
  "@roblox/globaltype/ARController.GetCanvas": {},
  "@roblox/globaltype/ARController.GetCursor": {
    "documentation": "Returns the part owner's cursor, or, alternatively, any other player's cursor if the owner does not have a cursor (this is considered the primary user).",
    "params": [],
    "returns": [
      "@roblox/globaltype/ARController.GetCursor/returns/0"
    ]
  },
  "@roblox/globaltype/ARController.GetCursor/returns/0": {},
  "@roblox/globaltype/ARController.GetCursors": {
    "documentation": "Gets a dictionary of player <code>UserId</code>s to their cursors.",
    "params": [],
    "returns": [
      "@roblox/globaltype/ARController.GetCursors/returns/0"
    ]
  },
  "@roblox/globaltype/ARController.GetCursors/returns/0": {},
  "@roblox/globaltype/ARController.KeyPressed": {
    "documentation": "Fires when the user presses a key."
  },
  "@roblox/globaltype/ARController.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/ARController.Transparency": {
    "documentation": "The transparency of the AR display."
  },
  "@roblox/globaltype/ARController.UserInput": {
    "documentation": "Will fire when a user presses a key, it is already filtered to <code>gameProcessedEvent</code> being false."
  },
  "@roblox/globaltype/ARControllerConfiguration": {
    "documentation": "The configuration of the <code>ARController</code> object.",
    "keys": {
      "Transparency": "@roblox/globaltype/ARControllerConfiguration.Transparency"
    }
  },
  "@roblox/globaltype/ARControllerConfiguration.Transparency": {
    "documentation": "The transparency of the AR display."
  },
  "@roblox/globaltype/ARCursor": {
    "documentation": "A cursor that represents a player's mouse in the 3D world. For use with AR devices.",
    "keys": {
      "Camera": "@roblox/globaltype/ARCursor.Camera",
      "Hit": "@roblox/globaltype/ARCursor.Hit",
      "MouseDelta": "@roblox/globaltype/ARCursor.MouseDelta",
      "Origin": "@roblox/globaltype/ARCursor.Origin",
      "Player": "@roblox/globaltype/ARCursor.Player",
      "Pressed": "@roblox/globaltype/ARCursor.Pressed",
      "ScreenPosition": "@roblox/globaltype/ARCursor.ScreenPosition",
      "Target": "@roblox/globaltype/ARCursor.Target",
      "UnitRay": "@roblox/globaltype/ARCursor.UnitRay",
      "UserCFrames": "@roblox/globaltype/ARCursor.UserCFrames",
      "UserId": "@roblox/globaltype/ARCursor.UserId",
      "UserInput": "@roblox/globaltype/ARCursor.UserInput",
      "VirtualTarget": "@roblox/globaltype/ARCursor.VirtualTarget",
      "VirtualWorldPosition": "@roblox/globaltype/ARCursor.VirtualWorldPosition",
      "WorldPosition": "@roblox/globaltype/ARCursor.WorldPosition",
      "X": "@roblox/globaltype/ARCursor.X",
      "Y": "@roblox/globaltype/ARCursor.Y"
    }
  },
  "@roblox/globaltype/ARCursor.Camera": {
    "documentation": "The camera of the player associated with the mouse."
  },
  "@roblox/globaltype/ARCursor.Hit": {
    "documentation": "The <code>CFrame</code> the user's mouse is located at."
  },
  "@roblox/globaltype/ARCursor.MouseDelta": {
    "documentation": "The current change in position of the mouse for the frame that was sent."
  },
  "@roblox/globaltype/ARCursor.Origin": {
    "documentation": "A CFrame indicating where the mouse originated from. It is positioned at the camera and oriented toward the mouse's 3D position."
  },
  "@roblox/globaltype/ARCursor.Player": {
    "documentation": "The name of the player the cursor is for."
  },
  "@roblox/globaltype/ARCursor.Pressed": {
    "documentation": "A boolean for whether or not the mouse button is pressed."
  },
  "@roblox/globaltype/ARCursor.ScreenPosition": {
    "documentation": "The XY screen position of the mouse cursor."
  },
  "@roblox/globaltype/ARCursor.Target": {
    "documentation": "The PartObject that is being hovered over. You can call methods on this part!"
  },
  "@roblox/globaltype/ARCursor.UnitRay": {
    "documentation": "A Ray directed toward the mouse's position in 3D space. It originates from the CFrame of the camera. Like all unit rays, it has a magnitude of 1."
  },
  "@roblox/globaltype/ARCursor.UserCFrames": {
    "documentation": "Contains <code>Head</code>, <code>LeftHand</code>, and <code>RightHand</code> <code>CFrame</code>s for VR.",
    "keys": {
      "Head": "@roblox/globaltype/ARCursor.UserCFrames.Head",
      "LeftHand": "@roblox/globaltype/ARCursor.UserCFrames.LeftHand",
      "RightHand": "@roblox/globaltype/ARCursor.UserCFrames.RightHand"
    }
  },
  "@roblox/globaltype/ARCursor.UserCFrames.Head": {},
  "@roblox/globaltype/ARCursor.UserCFrames.LeftHand": {},
  "@roblox/globaltype/ARCursor.UserCFrames.RightHand": {},
  "@roblox/globaltype/ARCursor.UserId": {
    "documentation": "The user ID of the player."
  },
  "@roblox/globaltype/ARCursor.UserInput": {
    "documentation": "A table of input data (would suggest printing with repr) - Contains Mouse, Keyboard, Gamepad, VREnabled, KeyboardEnabled, TouchEnabled, GamepadEnabled, and LastInputType."
  },
  "@roblox/globaltype/ARCursor.VirtualTarget": {
    "documentation": "The hovered part in the virtual 3D space."
  },
  "@roblox/globaltype/ARCursor.VirtualWorldPosition": {
    "documentation": "The world position of the mouse cursor in the virtual 3D space."
  },
  "@roblox/globaltype/ARCursor.WorldPosition": {
    "documentation": "The world position of the mouse cursor."
  },
  "@roblox/globaltype/ARCursor.X": {
    "documentation": "The <code>X</code> position of the cursor on the screen."
  },
  "@roblox/globaltype/ARCursor.Y": {
    "documentation": "The <code>Y</code> position of the cursor on the screen."
  },
  "@roblox/globaltype/ARGlasses": {
    "documentation": "Like a handheld Microcontroller, with a TouchScreen for your actual screen.\nHas the capability to display augmented 3D objects and visuals in a virtualized world.",
    "keys": {
      "ClassName": "@roblox/globaltype/ARGlasses.ClassName"
    }
  },
  "@roblox/globaltype/ARGlasses.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/ARInput": {
    "documentation": "This class is obtained through <code>ARCursor.UserInput</code> and provides information about the user's input.",
    "keys": {
      "Gamepad": "@roblox/globaltype/ARInput.Gamepad",
      "GamepadEnabled": "@roblox/globaltype/ARInput.GamepadEnabled",
      "Keyboard": "@roblox/globaltype/ARInput.Keyboard",
      "KeyboardEnabled": "@roblox/globaltype/ARInput.KeyboardEnabled",
      "LastInputType": "@roblox/globaltype/ARInput.LastInputType",
      "Mouse": "@roblox/globaltype/ARInput.Mouse",
      "TouchEnabled": "@roblox/globaltype/ARInput.TouchEnabled",
      "VREnabled": "@roblox/globaltype/ARInput.VREnabled"
    }
  },
  "@roblox/globaltype/ARInput.Gamepad": {
    "documentation": "A dictionary of <code>Enum.UserInputType.GamepadX</code> keys to an array of <code>InputObject</code>s representing the current state of all available inputs for said gamepad as values."
  },
  "@roblox/globaltype/ARInput.GamepadEnabled": {
    "documentation": "This property describes whether the device being used by a user has an available gamepad. If gamepads are available."
  },
  "@roblox/globaltype/ARInput.Keyboard": {
    "documentation": "An array of <code>InputObject</code>s associated with the keys currently being pressed."
  },
  "@roblox/globaltype/ARInput.KeyboardEnabled": {
    "documentation": "This property describes whether the user's device has a keyboard available. This property is <code>true</code> when the user's device has an available keyboard, and <code>false</code> when it does not."
  },
  "@roblox/globaltype/ARInput.LastInputType": {
    "documentation": "The <code>Enum.UserInputType</code> associated with the user's most recent input."
  },
  "@roblox/globaltype/ARInput.Mouse": {
    "documentation": "An array of <code>InputObject</code>s corresponding to the mouse buttons currently being currently held down."
  },
  "@roblox/globaltype/ARInput.TouchEnabled": {
    "documentation": "This property describes whether the user's current device has a touch screen available."
  },
  "@roblox/globaltype/ARInput.VREnabled": {
    "documentation": "This property describes whether the user is using a virtual reality (VR) device."
  },
  "@roblox/globaltype/AdBoard": {
    "documentation": "Allows the creation of Ad elements, automatically. Very useful for making money.",
    "keys": {
      "ClassName": "@roblox/globaltype/AdBoard.ClassName"
    }
  },
  "@roblox/globaltype/AdBoard.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/AdminTool": {
    "documentation": "A debug item meant for developers.",
    "keys": {
      "ClassName": "@roblox/globaltype/AdminTool.ClassName"
    }
  },
  "@roblox/globaltype/AdminTool.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Aerogel": {
    "documentation": "An incredibly light and fragile material.",
    "keys": {
      "ClassName": "@roblox/globaltype/Aerogel.ClassName"
    }
  },
  "@roblox/globaltype/Aerogel.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/AirSupply": {
    "documentation": "Generates a 300 stud radius oxygen bubble when powered on. Very important part for space ships, as it acts as the oxygen supply for the ship.",
    "keys": {
      "ClassName": "@roblox/globaltype/AirSupply.ClassName"
    }
  },
  "@roblox/globaltype/AirSupply.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/AlienCore": {
    "documentation": "A mysterious piece of technology found within many robotic aliens.\nAlthough its precise function is unknown, it manages to be extremely useful in advanced technologies.\nIt seems to emanate raw power on its own, but only these robotic constructions seem to know .\nGenerally, more powerful aliens will utilize more alien cores.",
    "keys": {
      "ClassName": "@roblox/globaltype/AlienCore.ClassName"
    }
  },
  "@roblox/globaltype/AlienCore.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Aluminum": {
    "documentation": "A light, non-durable material. Has a good thermal conductivity, but is lower than most other metals.",
    "keys": {
      "ClassName": "@roblox/globaltype/Aluminum.ClassName"
    }
  },
  "@roblox/globaltype/Aluminum.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Anchor": {
    "documentation": "When triggered or clicked, it is able to be anchored, a state in which it is immovable by physics, and applies to parts connected to it.",
    "keys": {
      "Anchored": "@roblox/globaltype/Anchor.Anchored",
      "ClassName": "@roblox/globaltype/Anchor.ClassName",
      "Configure": "@roblox/globaltype/Anchor.Configure",
      "Configured": "@roblox/globaltype/Anchor.Configured"
    }
  },
  "@roblox/globaltype/Anchor.Anchored": {
    "documentation": "Determines whether the anchor is active or not."
  },
  "@roblox/globaltype/Anchor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Anchor.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Anchor.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Anchor.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Anchor.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Anchor.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/AnchorConfiguration": {
    "documentation": "The configuration of the <code>Anchor</code> object.",
    "keys": {
      "Anchored": "@roblox/globaltype/AnchorConfiguration.Anchored"
    }
  },
  "@roblox/globaltype/AnchorConfiguration.Anchored": {
    "documentation": "Determines whether the anchor is active or not."
  },
  "@roblox/globaltype/Antenna": {
    "documentation": "A wireless transmitter that can transmit electricity from wires and trigger signals from trigger wires and buttons.",
    "keys": {
      "AntennaID": "@roblox/globaltype/Antenna.AntennaID",
      "ClassName": "@roblox/globaltype/Antenna.ClassName",
      "Configure": "@roblox/globaltype/Antenna.Configure"
    }
  },
  "@roblox/globaltype/Antenna.AntennaID": {
    "documentation": "The ID of this antenna, to transmit to others with the same ID."
  },
  "@roblox/globaltype/Antenna.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Antenna.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Antenna.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Antenna.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Antenna.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/AntennaConfiguration": {
    "documentation": "The configuration of the <code>Antenna</code> object.",
    "keys": {
      "AntennaID": "@roblox/globaltype/AntennaConfiguration.AntennaID"
    }
  },
  "@roblox/globaltype/AntennaConfiguration.AntennaID": {
    "documentation": "The ID of this antenna, to transmit to others with the same ID."
  },
  "@roblox/globaltype/Apparel": {
    "documentation": "A piece of clothing that can be worn by other players. Parts can also be attached to the apparel, meaning you can create your own suits with the apprel.\nIt is similar to the prosthetic, except it can be taken off and does not cause damage. However, electricity does not trasmit throughout the apparel unlike prosthetics.\n\nApparel can also holds less parts than the prosthetic. It can only hold 100 parts, while Prosthetics can hold 150.\n\nApparel has another configuration to it called Transparency, which dictates how transparent it will become when worn. Ranges from 0-1 from non-transparent to transparent.",
    "keys": {
      "ClassName": "@roblox/globaltype/Apparel.ClassName",
      "Configure": "@roblox/globaltype/Apparel.Configure",
      "Configured": "@roblox/globaltype/Apparel.Configured",
      "Limb": "@roblox/globaltype/Apparel.Limb",
      "OnClick": "@roblox/globaltype/Apparel.OnClick",
      "Transparency": "@roblox/globaltype/Apparel.Transparency"
    }
  },
  "@roblox/globaltype/Apparel.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Apparel.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Apparel.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Apparel.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Apparel.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Apparel.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Apparel.Limb": {
    "documentation": "The name of the limb that this Apparel is for."
  },
  "@roblox/globaltype/Apparel.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/Apparel.Transparency": {
    "documentation": "The transparency of this Apparel."
  },
  "@roblox/globaltype/ApparelConfiguration": {
    "documentation": "The configuration of the <code>Apparel</code> object.",
    "keys": {
      "Limb": "@roblox/globaltype/ApparelConfiguration.Limb",
      "Transparency": "@roblox/globaltype/ApparelConfiguration.Transparency"
    }
  },
  "@roblox/globaltype/ApparelConfiguration.Limb": {
    "documentation": "The name of the limb that this Apparel is for."
  },
  "@roblox/globaltype/ApparelConfiguration.Transparency": {
    "documentation": "The transparency of this Apparel."
  },
  "@roblox/globaltype/Artillery": {
    "documentation": "Fires a fast-moving metal shell upon being triggered.\nThis metal shell generates a small explosion upon impact.\nCosts 15 iron per shot.",
    "keys": {
      "ClassName": "@roblox/globaltype/Artillery.ClassName"
    }
  },
  "@roblox/globaltype/Artillery.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Asphalt": {
    "documentation": "A modern material useful for smooth road surfaces.\nIts durability triples when anchored.",
    "keys": {
      "ClassName": "@roblox/globaltype/Asphalt.ClassName",
      "Loop": "@roblox/globaltype/Asphalt.Loop"
    }
  },
  "@roblox/globaltype/Asphalt.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Asphalt.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Assembler": {
    "documentation": "Assembles items as configured when the structure is supplied with the required power and resources.",
    "keys": {
      "Assemble": "@roblox/globaltype/Assembler.Assemble",
      "CalculateCraftingRecipe": "@roblox/globaltype/Assembler.CalculateCraftingRecipe",
      "ClassName": "@roblox/globaltype/Assembler.ClassName",
      "Configure": "@roblox/globaltype/Assembler.Configure",
      "Configured": "@roblox/globaltype/Assembler.Configured",
      "Craft": "@roblox/globaltype/Assembler.Craft",
      "CraftItems": "@roblox/globaltype/Assembler.CraftItems",
      "GetRecipe": "@roblox/globaltype/Assembler.GetRecipe",
      "Loop": "@roblox/globaltype/Assembler.Loop"
    }
  },
  "@roblox/globaltype/Assembler.Assemble": {
    "documentation": "The name of the object to be assembled."
  },
  "@roblox/globaltype/Assembler.CalculateCraftingRecipe": {
    "documentation": "Returns the ingredients (including <code>Power</code>), products, and time cost of a specified crafting operation.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Assembler.CalculateCraftingRecipe",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Assembler.CalculateCraftingRecipe/params/1",
        "name": "items"
      }
    ],
    "returns": [
      "@roblox/globaltype/Assembler.CalculateCraftingRecipe/returns/0"
    ]
  },
  "@roblox/globaltype/Assembler.CalculateCraftingRecipe/params/1": {
    "documentation": "A list of parts <em>or</em> a dictionary of each part with how many of said part to craft."
  },
  "@roblox/globaltype/Assembler.CalculateCraftingRecipe/returns/0": {
    "documentation": "Information relating to the crafting recipe.",
    "keys": {
      "Power": "@roblox/globaltype/Assembler.CalculateCraftingRecipe/returns/0.Power"
    }
  },
  "@roblox/globaltype/Assembler.CalculateCraftingRecipe/returns/0.Power": {},
  "@roblox/globaltype/Assembler.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Assembler.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Assembler.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Assembler.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Assembler.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Assembler.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Assembler.Craft": {
    "documentation": "Will pause and craft the desired item at the next available point, returning a boolean representing whether or not the item was successfully crafted.\n\nThis uses a queue under the hood, the first thing to call it gets to craft first, and then finally the assembler performs its configured craft if nothing else is queued.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Assembler.Craft",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Assembler.Craft/params/1",
        "name": "itemName"
      }
    ],
    "returns": [
      "@roblox/globaltype/Assembler.Craft/returns/0"
    ]
  },
  "@roblox/globaltype/Assembler.Craft/params/1": {},
  "@roblox/globaltype/Assembler.Craft/returns/0": {},
  "@roblox/globaltype/Assembler.CraftItems": {
    "documentation": "Will craft the specified set of items.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Assembler.CraftItems",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Assembler.CraftItems/params/1",
        "name": "items"
      }
    ]
  },
  "@roblox/globaltype/Assembler.CraftItems/params/1": {},
  "@roblox/globaltype/Assembler.GetRecipe": {
    "documentation": "Returns the resource(s) required to craft the given item, or nil if the item doesn't have a recipe/doesn't exist.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Assembler.GetRecipe",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Assembler.GetRecipe/params/1",
        "name": "itemName"
      }
    ],
    "returns": [
      "@roblox/globaltype/Assembler.GetRecipe/returns/0"
    ]
  },
  "@roblox/globaltype/Assembler.GetRecipe/params/1": {},
  "@roblox/globaltype/Assembler.GetRecipe/returns/0": {},
  "@roblox/globaltype/Assembler.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/AssemblerConfiguration": {
    "documentation": "The configuration of the <code>Assembler</code> object.",
    "keys": {
      "Assemble": "@roblox/globaltype/AssemblerConfiguration.Assemble"
    }
  },
  "@roblox/globaltype/AssemblerConfiguration.Assemble": {
    "documentation": "The name of the object to be assembled."
  },
  "@roblox/globaltype/AutomaticLaser": {
    "documentation": "Fires a continous set of lasers when powered. Like most other energy/thermal weapons, it generates heat when powered. It generates up to 65 degrees of heat, meaning you will need atleast 2 or 3 coolers.",
    "keys": {
      "ClassName": "@roblox/globaltype/AutomaticLaser.ClassName",
      "Loop": "@roblox/globaltype/AutomaticLaser.Loop"
    }
  },
  "@roblox/globaltype/AutomaticLaser.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/AutomaticLaser.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Ball": {
    "documentation": "A ball shaped template object.",
    "keys": {
      "ClassName": "@roblox/globaltype/Ball.ClassName"
    }
  },
  "@roblox/globaltype/Ball.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/BallastTank": {
    "documentation": "Allows for variable ballast to be added to sea vehicles. Also prevents corrosion to attached parts underwater.",
    "keys": {
      "Buoyancy": "@roblox/globaltype/BallastTank.Buoyancy",
      "ClassName": "@roblox/globaltype/BallastTank.ClassName",
      "Configure": "@roblox/globaltype/BallastTank.Configure",
      "Loop": "@roblox/globaltype/BallastTank.Loop"
    }
  },
  "@roblox/globaltype/BallastTank.Buoyancy": {
    "documentation": "The buoyancy of this BallastTank, 0 being neutral."
  },
  "@roblox/globaltype/BallastTank.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/BallastTank.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/BallastTank.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/BallastTank.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/BallastTank.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/BallastTank.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/BallastTankConfiguration": {
    "documentation": "The configuration of the <code>BallastTank</code> object.",
    "keys": {
      "Buoyancy": "@roblox/globaltype/BallastTankConfiguration.Buoyancy"
    }
  },
  "@roblox/globaltype/BallastTankConfiguration.Buoyancy": {
    "documentation": "The buoyancy of this BallastTank, 0 being neutral."
  },
  "@roblox/globaltype/Balloon": {
    "documentation": "Levitates parts attached to it to a certain configurable height.\nHowever, it is easily poppable.\nDoes not work in space, or no-atmosphere planets.",
    "keys": {
      "Buoyancy": "@roblox/globaltype/Balloon.Buoyancy",
      "ClassName": "@roblox/globaltype/Balloon.ClassName",
      "Configure": "@roblox/globaltype/Balloon.Configure",
      "Configured": "@roblox/globaltype/Balloon.Configured"
    }
  },
  "@roblox/globaltype/Balloon.Buoyancy": {
    "documentation": "The buoyancy of this Balloon, 0 being neutral."
  },
  "@roblox/globaltype/Balloon.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Balloon.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Balloon.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Balloon.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Balloon.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Balloon.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/BalloonConfiguration": {
    "documentation": "The configuration of the <code>Balloon</code> object.",
    "keys": {
      "Buoyancy": "@roblox/globaltype/BalloonConfiguration.Buoyancy"
    }
  },
  "@roblox/globaltype/BalloonConfiguration.Buoyancy": {
    "documentation": "The buoyancy of this Balloon, 0 being neutral."
  },
  "@roblox/globaltype/Battery": {
    "documentation": "A light part that contains 400 energy and is prefilled. Cannot be recharged.",
    "keys": {
      "ClassName": "@roblox/globaltype/Battery.ClassName",
      "ContainerChanged": "@roblox/globaltype/Battery.ContainerChanged",
      "GetAmount": "@roblox/globaltype/Battery.GetAmount",
      "GetResource": "@roblox/globaltype/Battery.GetResource",
      "GetResourceAmount": "@roblox/globaltype/Battery.GetResourceAmount"
    }
  },
  "@roblox/globaltype/Battery.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Battery.ContainerChanged": {
    "documentation": "Fires when the amount of the resource in the container changes."
  },
  "@roblox/globaltype/Battery.GetAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Battery.GetAmount/returns/0"
    ]
  },
  "@roblox/globaltype/Battery.GetAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/Battery.GetResource": {
    "documentation": "Gets the name of the resource contained, will return the <i>string</i> <code>\"nil\"</code> if nothing is stored, rather than <i>actually</i> returning <code>nil</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Battery.GetResource/returns/0"
    ]
  },
  "@roblox/globaltype/Battery.GetResource/returns/0": {},
  "@roblox/globaltype/Battery.GetResourceAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Battery.GetResourceAmount/returns/0"
    ]
  },
  "@roblox/globaltype/Battery.GetResourceAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/Beacon": {
    "documentation": "Creates a small beacon of light when powered.\nWhen <code>ShowOnMap</code> is enabled, it broadcasts a signal into the universe.\n<code>BeaconName</code> changes the name of the beacon shown on the <code>StarMap</code>.\nIt has a 30 second cooldown for changing the configurables.",
    "keys": {
      "BeaconName": "@roblox/globaltype/Beacon.BeaconName",
      "ClassName": "@roblox/globaltype/Beacon.ClassName",
      "Configure": "@roblox/globaltype/Beacon.Configure",
      "Configured": "@roblox/globaltype/Beacon.Configured",
      "ShowOnMap": "@roblox/globaltype/Beacon.ShowOnMap"
    }
  },
  "@roblox/globaltype/Beacon.BeaconName": {
    "documentation": "The name of the beacon."
  },
  "@roblox/globaltype/Beacon.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Beacon.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Beacon.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Beacon.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Beacon.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Beacon.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Beacon.ShowOnMap": {
    "documentation": "Whether this beacon should be shown on <code>StarMap</code>s."
  },
  "@roblox/globaltype/BeaconConfiguration": {
    "documentation": "The configuration of the <code>Beacon</code> object.",
    "keys": {
      "BeaconName": "@roblox/globaltype/BeaconConfiguration.BeaconName",
      "ShowOnMap": "@roblox/globaltype/BeaconConfiguration.ShowOnMap"
    }
  },
  "@roblox/globaltype/BeaconConfiguration.BeaconName": {
    "documentation": "The name of the beacon."
  },
  "@roblox/globaltype/BeaconConfiguration.ShowOnMap": {
    "documentation": "Whether this beacon should be shown on <code>StarMap</code>s."
  },
  "@roblox/globaltype/Beaker": {
    "documentation": "A container for holding mixed chemicals.",
    "keys": {
      "ClassName": "@roblox/globaltype/Beaker.ClassName"
    }
  },
  "@roblox/globaltype/Beaker.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/BeamRifle": {
    "documentation": "A deadly long-range energy sniper. Able to pick off targets at a long range with exceptional accuracy.",
    "keys": {
      "ClassName": "@roblox/globaltype/BeamRifle.ClassName"
    }
  },
  "@roblox/globaltype/BeamRifle.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Beryllium": {
    "documentation": "A lightweight metal only found on Barren planets used for preventing plutonium cores from going supercritical until detonated.",
    "keys": {
      "ClassName": "@roblox/globaltype/Beryllium.ClassName"
    }
  },
  "@roblox/globaltype/Beryllium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Billboardium": {
    "documentation": "A super strong alloy made of Robux and pure refined ad.",
    "keys": {
      "ClassName": "@roblox/globaltype/Billboardium.ClassName"
    }
  },
  "@roblox/globaltype/Billboardium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Bin": {
    "documentation": "Stores solid items such as <code>Aluminum</code>, <code>Iron</code>, <code>Faucet</code>s, etc.\nCan store up to 1,000 items. When destroyed, every item inside will also be destroyed.\nThe value increases as more items are added to it.\n\nBins can also be used as crafting recipes, with the resources inside being used.\nYou can also configure a bin to prevent items from being crafted from it, allowing for bins to be strictly for machine storage.",
    "keys": {
      "CanBeCraftedFrom": "@roblox/globaltype/Bin.CanBeCraftedFrom",
      "ClassName": "@roblox/globaltype/Bin.ClassName",
      "Configure": "@roblox/globaltype/Bin.Configure",
      "ContainerChanged": "@roblox/globaltype/Bin.ContainerChanged",
      "GetAmount": "@roblox/globaltype/Bin.GetAmount",
      "GetResource": "@roblox/globaltype/Bin.GetResource",
      "GetResourceAmount": "@roblox/globaltype/Bin.GetResourceAmount",
      "OnClick": "@roblox/globaltype/Bin.OnClick",
      "Resource": "@roblox/globaltype/Bin.Resource"
    }
  },
  "@roblox/globaltype/Bin.CanBeCraftedFrom": {
    "documentation": "Determines whether this bin can be used by nearby players to craft objects."
  },
  "@roblox/globaltype/Bin.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Bin.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Bin.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Bin.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Bin.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Bin.ContainerChanged": {
    "documentation": "Fires when the amount of the resource in the container changes."
  },
  "@roblox/globaltype/Bin.GetAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Bin.GetAmount/returns/0"
    ]
  },
  "@roblox/globaltype/Bin.GetAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/Bin.GetResource": {
    "documentation": "Gets the name of the resource contained, will return the <i>string</i> <code>\"nil\"</code> if nothing is stored, rather than <i>actually</i> returning <code>nil</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Bin.GetResource/returns/0"
    ]
  },
  "@roblox/globaltype/Bin.GetResource/returns/0": {},
  "@roblox/globaltype/Bin.GetResourceAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Bin.GetResourceAmount/returns/0"
    ]
  },
  "@roblox/globaltype/Bin.GetResourceAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/Bin.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/Bin.Resource": {
    "documentation": "The kind of resource the bin can hold. You can set this to Any to allow the bin to accept anything."
  },
  "@roblox/globaltype/BinConfiguration": {
    "documentation": "The configuration of the <code>Bin</code> object.",
    "keys": {
      "CanBeCraftedFrom": "@roblox/globaltype/BinConfiguration.CanBeCraftedFrom",
      "Resource": "@roblox/globaltype/BinConfiguration.Resource"
    }
  },
  "@roblox/globaltype/BinConfiguration.CanBeCraftedFrom": {
    "documentation": "Determines whether this bin can be used by nearby players to craft objects."
  },
  "@roblox/globaltype/BinConfiguration.Resource": {
    "documentation": "The kind of resource the bin can hold. You can set this to Any to allow the bin to accept anything."
  },
  "@roblox/globaltype/BlackBox": {
    "documentation": "Records all activity in the region using very delicate instruments.\nActivates when locked and anchors to ensure accurate readings.\nONLINE = Listening for event/Sharing event data, DATA = New data the owner hasn't seen.",
    "keys": {
      "ClassName": "@roblox/globaltype/BlackBox.ClassName",
      "GetLogs": "@roblox/globaltype/BlackBox.GetLogs",
      "Loop": "@roblox/globaltype/BlackBox.Loop",
      "OnClick": "@roblox/globaltype/BlackBox.OnClick"
    }
  },
  "@roblox/globaltype/BlackBox.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/BlackBox.GetLogs": {
    "params": [],
    "returns": [
      "@roblox/globaltype/BlackBox.GetLogs/returns/0"
    ]
  },
  "@roblox/globaltype/BlackBox.GetLogs/returns/0": {},
  "@roblox/globaltype/BlackBox.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/BlackBox.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/BlackHoleRegionInfo": {
    "documentation": "The region info format of a black hole."
  },
  "@roblox/globaltype/Blade": {
    "documentation": "A legacy pre-component part. A sharp object that can pierce through objects if the material is durable and strong.",
    "keys": {
      "ClassName": "@roblox/globaltype/Blade.ClassName",
      "ComponentsUpdated": "@roblox/globaltype/Blade.ComponentsUpdated",
      "Configure": "@roblox/globaltype/Blade.Configure",
      "Shape": "@roblox/globaltype/Blade.Shape"
    }
  },
  "@roblox/globaltype/Blade.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Blade.ComponentsUpdated": {
    "documentation": "This event never seems to fire, only tested on the deprecated <code>Blade</code> part, though."
  },
  "@roblox/globaltype/Blade.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Blade.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Blade.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Blade.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Blade.Shape": {
    "documentation": "The shape of the blade."
  },
  "@roblox/globaltype/BladeConfiguration": {
    "documentation": "The configuration of the <code>Blade</code> object.",
    "keys": {
      "Shape": "@roblox/globaltype/BladeConfiguration.Shape"
    }
  },
  "@roblox/globaltype/BladeConfiguration.Shape": {
    "documentation": "The shape of the blade."
  },
  "@roblox/globaltype/BladeShape": {
    "documentation": "The shape of the blade, used in the <code>Blade</code> part."
  },
  "@roblox/globaltype/BlastingCap": {
    "documentation": "A component used in crafting recipes for more advanced explosive devices.",
    "keys": {
      "ClassName": "@roblox/globaltype/BlastingCap.ClassName"
    }
  },
  "@roblox/globaltype/BlastingCap.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Block": {
    "documentation": "A block shaped template object.",
    "keys": {
      "ClassName": "@roblox/globaltype/Block.ClassName"
    }
  },
  "@roblox/globaltype/Block.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Boiler": {
    "documentation": "Consumes Coal and Water and produces Steam.",
    "keys": {
      "ClassName": "@roblox/globaltype/Boiler.ClassName",
      "Loop": "@roblox/globaltype/Boiler.Loop"
    }
  },
  "@roblox/globaltype/Boiler.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Boiler.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Boombox": {
    "documentation": "Must be powered in order to play music. When clicked, it will toggle playing music and will play the song id you give it.",
    "keys": {
      "Audio": "@roblox/globaltype/Boombox.Audio",
      "ClassName": "@roblox/globaltype/Boombox.ClassName",
      "Configure": "@roblox/globaltype/Boombox.Configure",
      "Loop": "@roblox/globaltype/Boombox.Loop"
    }
  },
  "@roblox/globaltype/Boombox.Audio": {
    "documentation": "The audio asset ID to be played."
  },
  "@roblox/globaltype/Boombox.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Boombox.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Boombox.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Boombox.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Boombox.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Boombox.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/BoomboxConfiguration": {
    "documentation": "The configuration of the <code>Boombox</code> object.",
    "keys": {
      "Audio": "@roblox/globaltype/BoomboxConfiguration.Audio"
    }
  },
  "@roblox/globaltype/BoomboxConfiguration.Audio": {
    "documentation": "The audio asset ID to be played."
  },
  "@roblox/globaltype/Brick": {
    "documentation": "A cheap, malleable material with special durability properties. The durability is 4, and becomes 18 when it is anchored or attached to terrain (grounded).",
    "keys": {
      "ClassName": "@roblox/globaltype/Brick.ClassName",
      "Loop": "@roblox/globaltype/Brick.Loop"
    }
  },
  "@roblox/globaltype/Brick.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Brick.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/BurnerGenerator": {
    "documentation": "Creates electricity when fueled with coal.",
    "keys": {
      "ClassName": "@roblox/globaltype/BurnerGenerator.ClassName",
      "Loop": "@roblox/globaltype/BurnerGenerator.Loop"
    }
  },
  "@roblox/globaltype/BurnerGenerator.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/BurnerGenerator.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/BurstLaser": {
    "documentation": "Fires 5 rapid sets of concentrated laser beams. Each beam does a mediate amount of damage.\nCosts 100 power for each beam fired, meaning the total power cost is 500 power.",
    "keys": {
      "ClassName": "@roblox/globaltype/BurstLaser.ClassName"
    }
  },
  "@roblox/globaltype/BurstLaser.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Button": {
    "documentation": "Sends trigger signals when clicked by a player.\nWhen connected to a seat and the input key is configured/configureed, the player sitting in the seat can activate the button by pressing the corresponding key.\nTriggerMode 0: Trigger on key down\nTriggerMode 1: Trigger on key up\nTriggerMode 2: Trigger on key down and key up",
    "keys": {
      "ClassName": "@roblox/globaltype/Button.ClassName"
    }
  },
  "@roblox/globaltype/Button.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Camera": {
    "documentation": "It's a camera.\nWhen a camera and Screen have the same ID, that screen will be used to display the camera view.\nClicking on a screen that is displaying the view of a camera will allow you to directly view what the camera is seeing.\nNo power is necessary.",
    "keys": {
      "ClassName": "@roblox/globaltype/Camera.ClassName",
      "Configure": "@roblox/globaltype/Camera.Configure",
      "Configured": "@roblox/globaltype/Camera.Configured",
      "VideoID": "@roblox/globaltype/Camera.VideoID"
    }
  },
  "@roblox/globaltype/Camera.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Camera.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Camera.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Camera.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Camera.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Camera.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Camera.VideoID": {
    "documentation": "The ID to transmit the camera feed over, received by screens of the same ID."
  },
  "@roblox/globaltype/CameraConfiguration": {
    "documentation": "The configuration of the <code>Camera</code> object.",
    "keys": {
      "VideoID": "@roblox/globaltype/CameraConfiguration.VideoID"
    }
  },
  "@roblox/globaltype/CameraConfiguration.VideoID": {
    "documentation": "The ID to transmit the camera feed over, received by screens of the same ID."
  },
  "@roblox/globaltype/Cannon": {
    "documentation": "Fires a cannon ball when triggered or clicked.\nMust be supplied with an ammo material.\nIron is prioritized, and results in one large cannonball being shot.\nCopper results in grapeshot.",
    "keys": {
      "ClassName": "@roblox/globaltype/Cannon.ClassName"
    }
  },
  "@roblox/globaltype/Cannon.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/CanvasContext": {
    "documentation": "The context of different canvases, for use in AR (where you can have 2D interfaces and 3D objects at once)"
  },
  "@roblox/globaltype/CelestialBodyType": {
    "documentation": "The type of a celestial body."
  },
  "@roblox/globaltype/Cement": {
    "documentation": "A modern material useful for pavement.",
    "keys": {
      "ClassName": "@roblox/globaltype/Cement.ClassName"
    }
  },
  "@roblox/globaltype/Cement.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/ChemicalSynthiser": {
    "documentation": "Synthesizes and mixes chemical compounds. Consumes matter out of attached bins in order to fuel the material synthesis.\n- 1 Nitrogen + 3 Hydrogen = 2 Ammonia\n- 1 Ammonia + 1 Ethanol = Diethylamine\n- 2 Hydrogen + 2 Oxygen = Hydrogen Peroxide\n- 2 Hydrogen + 1 Oxygen = Watern\n- 1 Sodium + 1 Chlorine = Salt\n- 2 Oxygen + 1 Carbon = Carbon Dioxide\n- 2 Nitrogen + 1 Oxygen = Laughing gas/N2O\n- 3 Chlorine + 1 Ethanol + 1 Water = Chloral Hydrate\n- 1 Potassium + 1 Water = Explosion\n- 1 Sodium + 1 Oxygen + 1 Hydrogen = 1 Sodium-Hydroxide\n- 2 Oil + 1 Sodium-Hydroxide = Napalm\n- 1 Diethylamine + 1 Ammonia + 1 Lithium + 1 Phosphorus = Hallucinogenic Compound\n- 1 Salt + 1 Lithium + 1 Silicon + 1 Hydrogen = Hallucinogenic Toxin\n- 1 Ammonia + 1 Oil + 1 Oxygen = Cyanide\n- 1 Chlorine + 1 Ammonia = Mustard gas\n- 1 Lithium + 1 Mercury = Toxin\n- 1 Fluorine + 1 Hydrogen + 1 Potassium + 1 Sulphuric Acid = Fluorosulfuric Acid\n- 1 Fluorosulfuric Acid + 1 Hydrogen Peroxide + 1 Nitrogen = Nitric Acid",
    "keys": {
      "ClassName": "@roblox/globaltype/ChemicalSynthiser.ClassName"
    }
  },
  "@roblox/globaltype/ChemicalSynthiser.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Chute": {
    "documentation": "Used to transfer solid resources between objects such as bins and extractors.\nChutes may also transport multiple resources at the same time, allowing for an entire factory to be connected through one chute system.",
    "keys": {
      "ClassName": "@roblox/globaltype/Chute.ClassName"
    }
  },
  "@roblox/globaltype/Chute.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Claymore": {
    "documentation": "A classic medieval sword used to cut down your enemies.",
    "keys": {
      "ClassName": "@roblox/globaltype/Claymore.ClassName"
    }
  },
  "@roblox/globaltype/Claymore.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Cleat": {
    "documentation": "A textile resource similar to Rubber, except it has a high amount of friction and low bounciness. It can be used in physical machines such as the feet of mechs.",
    "keys": {
      "ClassName": "@roblox/globaltype/Cleat.ClassName"
    }
  },
  "@roblox/globaltype/Cleat.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/CloningBay": {
    "documentation": "Allows you to respawn at it from a remote location.",
    "keys": {
      "ClassName": "@roblox/globaltype/CloningBay.ClassName",
      "Configure": "@roblox/globaltype/CloningBay.Configure",
      "Configured": "@roblox/globaltype/CloningBay.Configured",
      "Name": "@roblox/globaltype/CloningBay.Name"
    }
  },
  "@roblox/globaltype/CloningBay.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/CloningBay.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/CloningBay.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/CloningBay.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/CloningBay.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/CloningBay.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/CloningBay.Name": {
    "documentation": "The name of the cloning bay."
  },
  "@roblox/globaltype/CloningBayConfiguration": {
    "documentation": "The configuration of the <code>CloningBay</code> object.",
    "keys": {
      "Name": "@roblox/globaltype/CloningBayConfiguration.Name"
    }
  },
  "@roblox/globaltype/CloningBayConfiguration.Name": {
    "documentation": "The name of the cloning bay."
  },
  "@roblox/globaltype/Cloth": {
    "documentation": "A soft thin fabric that can soak up liquids.",
    "keys": {
      "ClassName": "@roblox/globaltype/Cloth.ClassName"
    }
  },
  "@roblox/globaltype/Cloth.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Coal": {
    "documentation": "A natural resources commonly used as a source of generating heat and energy. Can be placed in a BurnerGenerator to generate simple and fast energy.",
    "keys": {
      "ClassName": "@roblox/globaltype/Coal.ClassName"
    }
  },
  "@roblox/globaltype/Coal.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/CombustionTurbine": {
    "documentation": "Creates electricity when fueled by gasoline.",
    "keys": {
      "ClassName": "@roblox/globaltype/CombustionTurbine.ClassName",
      "Loop": "@roblox/globaltype/CombustionTurbine.Loop"
    }
  },
  "@roblox/globaltype/CombustionTurbine.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/CombustionTurbine.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/CompleteRegionInfo": {
    "documentation": "A type that demonstrates how the different region info types are returned interchangeably."
  },
  "@roblox/globaltype/Component": {
    "documentation": "A portable component. May be installed on parts to add unique behaviours.",
    "keys": {
      "ClassName": "@roblox/globaltype/Component.ClassName",
      "ComponentsUpdated": "@roblox/globaltype/Component.ComponentsUpdated"
    }
  },
  "@roblox/globaltype/Component.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Component.ComponentsUpdated": {
    "documentation": "This event never seems to fire, only tested on the deprecated <code>Blade</code> part, though."
  },
  "@roblox/globaltype/ComponentName": {
    "documentation": "A name of a <code>Component</code> object."
  },
  "@roblox/globaltype/Cone": {
    "documentation": "A cone shaped template object.",
    "keys": {
      "ClassName": "@roblox/globaltype/Cone.ClassName"
    }
  },
  "@roblox/globaltype/Cone.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/ConfigurableData": {
    "keys": {
      "DefaultValue": "@roblox/globaltype/ConfigurableData.DefaultValue",
      "Description": "@roblox/globaltype/ConfigurableData.Description",
      "Name": "@roblox/globaltype/ConfigurableData.Name",
      "Options": "@roblox/globaltype/ConfigurableData.Options",
      "Type": "@roblox/globaltype/ConfigurableData.Type"
    }
  },
  "@roblox/globaltype/ConfigurableData.DefaultValue": {
    "documentation": "The default value of the configurable, if it has one."
  },
  "@roblox/globaltype/ConfigurableData.Description": {
    "documentation": "A description of the configurable."
  },
  "@roblox/globaltype/ConfigurableData.Name": {
    "documentation": "The name of the configurable."
  },
  "@roblox/globaltype/ConfigurableData.Options": {
    "documentation": "The options that the configurable can take."
  },
  "@roblox/globaltype/ConfigurableData.Type": {
    "documentation": "The type of the configurable."
  },
  "@roblox/globaltype/Constructor": {
    "documentation": "Similar to an assembler, but constructs a model when triggered. However, the <code>Constructor</code> must be supplied with the correct materials for a model.\nFor example, a car model requiring 50 iron and 30 wires will need a bin attached with 50 iron, a bin attached with 30 wires and 100 power.\nYou can find out how many materials you need through the <code>CalculateModelRecipe</code> method.\nHas a 60 second cooldown to prevent model spamming.",
    "keys": {
      "Autolock": "@roblox/globaltype/Constructor.Autolock",
      "CalculateModelRecipe": "@roblox/globaltype/Constructor.CalculateModelRecipe",
      "ClassName": "@roblox/globaltype/Constructor.ClassName",
      "Configure": "@roblox/globaltype/Constructor.Configure",
      "Configured": "@roblox/globaltype/Constructor.Configured",
      "ModelCode": "@roblox/globaltype/Constructor.ModelCode",
      "RelativeToConstructor": "@roblox/globaltype/Constructor.RelativeToConstructor",
      "Triggered": "@roblox/globaltype/Constructor.Triggered"
    }
  },
  "@roblox/globaltype/Constructor.Autolock": {
    "documentation": "Determines if the created model should be locked by the owner of the Constructor."
  },
  "@roblox/globaltype/Constructor.CalculateModelRecipe": {
    "documentation": "Returns the required resources to construct the specified model.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Constructor.CalculateModelRecipe",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Constructor.CalculateModelRecipe/params/1",
        "name": "modelCode"
      }
    ],
    "returns": [
      "@roblox/globaltype/Constructor.CalculateModelRecipe/returns/0"
    ]
  },
  "@roblox/globaltype/Constructor.CalculateModelRecipe/params/1": {
    "documentation": "If left unspecified it will utilise the <code>ModelCode</code> configurable."
  },
  "@roblox/globaltype/Constructor.CalculateModelRecipe/returns/0": {
    "documentation": "The materials required to generate the model."
  },
  "@roblox/globaltype/Constructor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Constructor.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Constructor.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Constructor.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Constructor.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Constructor.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Constructor.ModelCode": {
    "documentation": "The model data of the model to be created by the Constructor."
  },
  "@roblox/globaltype/Constructor.RelativeToConstructor": {
    "documentation": "Determines if the created model should be loaded in relative to the orientation of the Constructor."
  },
  "@roblox/globaltype/Constructor.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/ConstructorConfiguration": {
    "documentation": "The configuration of the <code>Constructor</code> object.",
    "keys": {
      "Autolock": "@roblox/globaltype/ConstructorConfiguration.Autolock",
      "ModelCode": "@roblox/globaltype/ConstructorConfiguration.ModelCode",
      "RelativeToConstructor": "@roblox/globaltype/ConstructorConfiguration.RelativeToConstructor"
    }
  },
  "@roblox/globaltype/ConstructorConfiguration.Autolock": {
    "documentation": "Determines if the created model should be locked by the owner of the Constructor."
  },
  "@roblox/globaltype/ConstructorConfiguration.ModelCode": {
    "documentation": "The model data of the model to be created by the Constructor."
  },
  "@roblox/globaltype/ConstructorConfiguration.RelativeToConstructor": {
    "documentation": "Determines if the created model should be loaded in relative to the orientation of the Constructor."
  },
  "@roblox/globaltype/Controller": {
    "documentation": "Alters the speed of attached controllable objects which include:\n- <code>Engine</code>\n- <code>Motor</code>\n- <code>BallastTank</code>\n- <code>IonDrive</code>\n- <code>IonRocket</code>\n- <code>Thruster</code>\n- <code>Rocket</code>\n\nYou must use a polysilicon between this controller and an object that emits a trigger signal (such as a button) to use the same events as clicking the interface.\nFor example, <code>FlipFlop</code> will set the speed of the controllable objects to 0, <code>Deactivate</code> will subtract 5 from the current speed, etc.",
    "keys": {
      "ClassName": "@roblox/globaltype/Controller.ClassName",
      "Loop": "@roblox/globaltype/Controller.Loop",
      "Triggered": "@roblox/globaltype/Controller.Triggered"
    }
  },
  "@roblox/globaltype/Controller.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Controller.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Controller.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/ConveyorBelt": {
    "documentation": "Moves objects ontop of it towards the front of the conveyor belt. Only moves when powered and anchored or attached to the ground.",
    "keys": {
      "ClassName": "@roblox/globaltype/ConveyorBelt.ClassName",
      "Configure": "@roblox/globaltype/ConveyorBelt.Configure",
      "ConveyorBeltSpeed": "@roblox/globaltype/ConveyorBelt.ConveyorBeltSpeed"
    }
  },
  "@roblox/globaltype/ConveyorBelt.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/ConveyorBelt.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/ConveyorBelt.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/ConveyorBelt.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/ConveyorBelt.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/ConveyorBelt.ConveyorBeltSpeed": {
    "documentation": "Determines the speed at which the conveyor will move items on top of it."
  },
  "@roblox/globaltype/ConveyorBeltConfiguration": {
    "documentation": "The configuration of the <code>ConveyorBelt</code> object.",
    "keys": {
      "ConveyorBeltSpeed": "@roblox/globaltype/ConveyorBeltConfiguration.ConveyorBeltSpeed"
    }
  },
  "@roblox/globaltype/ConveyorBeltConfiguration.ConveyorBeltSpeed": {
    "documentation": "Determines the speed at which the conveyor will move items on top of it."
  },
  "@roblox/globaltype/Cooler": {
    "documentation": "Cools down the heat around a space when supplied with power.\nGlows blue while functioning. Can be used to provide a cool environment in hot areas.\nIs also useful for cooling down objects such as iondrives and engines.\nCooling amount is based on size -20 <i>X</i> Y * Z / 16",
    "keys": {
      "ClassName": "@roblox/globaltype/Cooler.ClassName"
    }
  },
  "@roblox/globaltype/Cooler.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Coordinates": {
    "documentation": "The class that represents universe coordinates.\nProvides the ability to do mathematical operations on coordinates, such as addition, subtraction and even multiplication.",
    "keys": {
      "InPlanet": "@roblox/globaltype/Coordinates.InPlanet",
      "SolarCoordinates": "@roblox/globaltype/Coordinates.SolarCoordinates",
      "UniverseCoordinates": "@roblox/globaltype/Coordinates.UniverseCoordinates"
    }
  },
  "@roblox/globaltype/Coordinates.InPlanet": {
    "documentation": "Whether the coordinates are within a planet's atmosphere."
  },
  "@roblox/globaltype/Coordinates.SolarCoordinates": {
    "documentation": "The coordinates within the solar system, i.e., the coordinates relative to the parent star or black hole."
  },
  "@roblox/globaltype/Coordinates.UniverseCoordinates": {
    "documentation": "The coordinates in the universe, i.e., the coordinates of the solar system."
  },
  "@roblox/globaltype/CoordinatesMetatable": {
    "keys": {
      "Clone": "@roblox/globaltype/CoordinatesMetatable.Clone",
      "CoordStringWithoutPlanet": "@roblox/globaltype/CoordinatesMetatable.CoordStringWithoutPlanet",
      "GetRandom": "@roblox/globaltype/CoordinatesMetatable.GetRandom",
      "GetSeed": "@roblox/globaltype/CoordinatesMetatable.GetSeed",
      "ToArray": "@roblox/globaltype/CoordinatesMetatable.ToArray",
      "__add": "@roblox/globaltype/CoordinatesMetatable.__add",
      "__div": "@roblox/globaltype/CoordinatesMetatable.__div",
      "__eq": "@roblox/globaltype/CoordinatesMetatable.__eq",
      "__index": "@roblox/globaltype/CoordinatesMetatable.__index",
      "__mul": "@roblox/globaltype/CoordinatesMetatable.__mul",
      "__tostring": "@roblox/globaltype/CoordinatesMetatable.__tostring",
      "type": "@roblox/globaltype/CoordinatesMetatable.type"
    }
  },
  "@roblox/globaltype/CoordinatesMetatable.Clone": {
    "documentation": "Makes a copy of the coordinates.",
    "params": [],
    "returns": [
      "@roblox/globaltype/CoordinatesMetatable.Clone/returns/0"
    ]
  },
  "@roblox/globaltype/CoordinatesMetatable.Clone/returns/0": {
    "documentation": "A copy of the coordinates."
  },
  "@roblox/globaltype/CoordinatesMetatable.CoordStringWithoutPlanet": {
    "documentation": "Returns a string representation of the coordinates without the planet.",
    "params": [],
    "returns": [
      "@roblox/globaltype/CoordinatesMetatable.CoordStringWithoutPlanet/returns/0"
    ]
  },
  "@roblox/globaltype/CoordinatesMetatable.CoordStringWithoutPlanet/returns/0": {
    "documentation": "A string representation of the coordinates without the planet."
  },
  "@roblox/globaltype/CoordinatesMetatable.GetRandom": {
    "documentation": "Returns a <code>Random</code> object seeded with the coordinates.",
    "params": [],
    "returns": [
      "@roblox/globaltype/CoordinatesMetatable.GetRandom/returns/0"
    ]
  },
  "@roblox/globaltype/CoordinatesMetatable.GetRandom/returns/0": {},
  "@roblox/globaltype/CoordinatesMetatable.GetSeed": {
    "documentation": "Returns the seed for the coordinates, which is used to generate region.",
    "params": [],
    "returns": [
      "@roblox/globaltype/CoordinatesMetatable.GetSeed/returns/0"
    ]
  },
  "@roblox/globaltype/CoordinatesMetatable.GetSeed/returns/0": {},
  "@roblox/globaltype/CoordinatesMetatable.ToArray": {
    "documentation": "Converts the coordinates to an array representation.",
    "params": [],
    "returns": [
      "@roblox/globaltype/CoordinatesMetatable.ToArray/returns/0"
    ]
  },
  "@roblox/globaltype/CoordinatesMetatable.ToArray/returns/0": {
    "documentation": "An array representation of the coordinates."
  },
  "@roblox/globaltype/CoordinatesMetatable.__add": {
    "params": [
      {
        "documentation": "@roblox/globaltype/CoordinatesMetatable.__add",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/CoordinatesMetatable.__add/params/1",
        "name": "parameter1"
      }
    ],
    "returns": [
      "@roblox/globaltype/CoordinatesMetatable.__add/returns/0"
    ]
  },
  "@roblox/globaltype/CoordinatesMetatable.__add/params/1": {},
  "@roblox/globaltype/CoordinatesMetatable.__add/returns/0": {},
  "@roblox/globaltype/CoordinatesMetatable.__div": {
    "params": [
      {
        "documentation": "@roblox/globaltype/CoordinatesMetatable.__div",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/CoordinatesMetatable.__div/params/1",
        "name": "parameter1"
      }
    ],
    "returns": [
      "@roblox/globaltype/CoordinatesMetatable.__div/returns/0"
    ]
  },
  "@roblox/globaltype/CoordinatesMetatable.__div/params/1": {},
  "@roblox/globaltype/CoordinatesMetatable.__div/returns/0": {},
  "@roblox/globaltype/CoordinatesMetatable.__eq": {
    "params": [
      {
        "documentation": "@roblox/globaltype/CoordinatesMetatable.__eq",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/CoordinatesMetatable.__eq/params/1",
        "name": "parameter1"
      }
    ],
    "returns": [
      "@roblox/globaltype/CoordinatesMetatable.__eq/returns/0"
    ]
  },
  "@roblox/globaltype/CoordinatesMetatable.__eq/params/1": {},
  "@roblox/globaltype/CoordinatesMetatable.__eq/returns/0": {},
  "@roblox/globaltype/CoordinatesMetatable.__index": {},
  "@roblox/globaltype/CoordinatesMetatable.__mul": {
    "params": [
      {
        "documentation": "@roblox/globaltype/CoordinatesMetatable.__mul",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/CoordinatesMetatable.__mul/params/1",
        "name": "parameter1"
      }
    ],
    "returns": [
      "@roblox/globaltype/CoordinatesMetatable.__mul/returns/0"
    ]
  },
  "@roblox/globaltype/CoordinatesMetatable.__mul/params/1": {},
  "@roblox/globaltype/CoordinatesMetatable.__mul/returns/0": {},
  "@roblox/globaltype/CoordinatesMetatable.__tostring": {
    "params": [],
    "returns": [
      "@roblox/globaltype/CoordinatesMetatable.__tostring/returns/0"
    ]
  },
  "@roblox/globaltype/CoordinatesMetatable.__tostring/returns/0": {},
  "@roblox/globaltype/CoordinatesMetatable.type": {},
  "@roblox/globaltype/Copper": {
    "documentation": "A brown, shiny metal used heavily in electronics, a great conductor of both heat and electricity. Has a very high thermal conductivity, easily the best for common metals.",
    "keys": {
      "ClassName": "@roblox/globaltype/Copper.ClassName"
    }
  },
  "@roblox/globaltype/Copper.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/CornerRoundWedge": {
    "documentation": "A rounded corner shaped template object.",
    "keys": {
      "ClassName": "@roblox/globaltype/CornerRoundWedge.ClassName"
    }
  },
  "@roblox/globaltype/CornerRoundWedge.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/CornerRoundWedge2": {
    "documentation": "A corner shaped template object rounded inwards.",
    "keys": {
      "ClassName": "@roblox/globaltype/CornerRoundWedge2.ClassName"
    }
  },
  "@roblox/globaltype/CornerRoundWedge2.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/CornerTetra": {
    "documentation": "A template which is a tetrahedron subtracted from a cube.",
    "keys": {
      "ClassName": "@roblox/globaltype/CornerTetra.ClassName"
    }
  },
  "@roblox/globaltype/CornerTetra.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/CornerWedge": {
    "documentation": "A corner wedge shaped template object.",
    "keys": {
      "ClassName": "@roblox/globaltype/CornerWedge.ClassName"
    }
  },
  "@roblox/globaltype/CornerWedge.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Coupler": {
    "documentation": "Will connect to nearby couplers with matching CouplerIDs when activated by Polysilicon. Deactivating via Polysilicon will detach two couplers. Repeatedly emits trigger signals when it is able to connect with another coupler of the same ID.",
    "keys": {
      "AutoTrigger": "@roblox/globaltype/Coupler.AutoTrigger",
      "ClassName": "@roblox/globaltype/Coupler.ClassName",
      "Configure": "@roblox/globaltype/Coupler.Configure",
      "Couple": "@roblox/globaltype/Coupler.Couple",
      "CouplerID": "@roblox/globaltype/Coupler.CouplerID",
      "Decouple": "@roblox/globaltype/Coupler.Decouple",
      "GetAttachedCoupler": "@roblox/globaltype/Coupler.GetAttachedCoupler",
      "IsCoupled": "@roblox/globaltype/Coupler.IsCoupled"
    }
  },
  "@roblox/globaltype/Coupler.AutoTrigger": {
    "documentation": "Whether or not the coupler should emit trigger signals while in range of another valid coupler."
  },
  "@roblox/globaltype/Coupler.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Coupler.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Coupler.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Coupler.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Coupler.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Coupler.Couple": {
    "documentation": "Fires when the coupler is attached to another coupler."
  },
  "@roblox/globaltype/Coupler.CouplerID": {
    "documentation": "The ID of this coupler."
  },
  "@roblox/globaltype/Coupler.Decouple": {
    "documentation": "Fires when the coupler is detached from another coupler."
  },
  "@roblox/globaltype/Coupler.GetAttachedCoupler": {
    "documentation": "Returns a reference to the current connected coupler, will return <code>nil</code> if no other coupler is connected.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Coupler.GetAttachedCoupler/returns/0"
    ]
  },
  "@roblox/globaltype/Coupler.GetAttachedCoupler/returns/0": {
    "documentation": "The coupler that this coupler is currently attached to, or <code>nil</code> if it is not attached to any other coupler."
  },
  "@roblox/globaltype/Coupler.IsCoupled": {
    "documentation": "Returns whether or not the coupler is currently attached to another coupler.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Coupler.IsCoupled/returns/0"
    ]
  },
  "@roblox/globaltype/Coupler.IsCoupled/returns/0": {
    "documentation": "Whether or not the coupler is currently attached to another coupler."
  },
  "@roblox/globaltype/CouplerConfiguration": {
    "documentation": "The configuration of the <code>Coupler</code> object.",
    "keys": {
      "AutoTrigger": "@roblox/globaltype/CouplerConfiguration.AutoTrigger",
      "CouplerID": "@roblox/globaltype/CouplerConfiguration.CouplerID"
    }
  },
  "@roblox/globaltype/CouplerConfiguration.AutoTrigger": {
    "documentation": "Whether or not the coupler should emit trigger signals while in range of another valid coupler."
  },
  "@roblox/globaltype/CouplerConfiguration.CouplerID": {
    "documentation": "The ID of this coupler."
  },
  "@roblox/globaltype/CrossBow": {
    "documentation": "A cheap primitive ranged weapon.",
    "keys": {
      "ClassName": "@roblox/globaltype/CrossBow.ClassName"
    }
  },
  "@roblox/globaltype/CrossBow.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/CrudeWing": {
    "documentation": "Creates lift from being pushed forward.\nA worse version of a Wing.\nDoes not work in space or in non atmospheric planets.",
    "keys": {
      "ClassName": "@roblox/globaltype/CrudeWing.ClassName",
      "Loop": "@roblox/globaltype/CrudeWing.Loop"
    }
  },
  "@roblox/globaltype/CrudeWing.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/CrudeWing.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Cursor": {
    "documentation": "A specific user's cursor on a <code>TouchScreen</code>.",
    "keys": {
      "Player": "@roblox/globaltype/Cursor.Player",
      "Pressed": "@roblox/globaltype/Cursor.Pressed",
      "UserId": "@roblox/globaltype/Cursor.UserId",
      "X": "@roblox/globaltype/Cursor.X",
      "Y": "@roblox/globaltype/Cursor.Y"
    }
  },
  "@roblox/globaltype/Cursor.Player": {
    "documentation": "The <code>Username</code> of the <code>Cursor</code>'s owner."
  },
  "@roblox/globaltype/Cursor.Pressed": {
    "documentation": "Whether or not the left mouse button is held."
  },
  "@roblox/globaltype/Cursor.UserId": {
    "documentation": "The <code>UserId</code> of the <code>Cursor</code>'s owner."
  },
  "@roblox/globaltype/Cursor.X": {
    "documentation": "The <code>X</code> position of the <code>Cursor</code> relative to the top left corner of the display."
  },
  "@roblox/globaltype/Cursor.Y": {
    "documentation": "The <code>Y</code> position of the <code>Cursor</code> relative to the top left corner of the display."
  },
  "@roblox/globaltype/Cylinder": {
    "documentation": "A cylinder shaped template object.",
    "keys": {
      "ClassName": "@roblox/globaltype/Cylinder.ClassName"
    }
  },
  "@roblox/globaltype/Cylinder.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DarkConverter": {
    "documentation": "Converts attached dark matter bins into energy. 1 unit of dark matter is equal to 1000 watts of power. However, this generates a ton of heat in the process, nearly up to 200 degrees when activated. This means you will need about 10 coolers to avoid combustion.",
    "keys": {
      "ClassName": "@roblox/globaltype/DarkConverter.ClassName",
      "Loop": "@roblox/globaltype/DarkConverter.Loop"
    }
  },
  "@roblox/globaltype/DarkConverter.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DarkConverter.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/DarkMatter": {
    "documentation": "A very valuable material extracted from black holes and a few empty regions in space. Can be used to generate energy when supplied to a <code>DarkConverter</code>.",
    "keys": {
      "ClassName": "@roblox/globaltype/DarkMatter.ClassName"
    }
  },
  "@roblox/globaltype/DarkMatter.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DarkReactor": {
    "documentation": "Generates Dark Matter when powered and near a black hole.\nThe reactor is very unstable, and if the reactor overheats it will cause a huge explosion.\n\nThe DarkReactor generates up to 500 degrees of temperature, meaing you will need atleast 25 coolers to cool the reactor to make sure it does not overheat.",
    "keys": {
      "ClassName": "@roblox/globaltype/DarkReactor.ClassName",
      "Loop": "@roblox/globaltype/DarkReactor.Loop"
    }
  },
  "@roblox/globaltype/DarkReactor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DarkReactor.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Decoupler": {
    "documentation": "When triggered, it breaks welds and falls off of anything attached.\nCan be used to separate things.\nThe trigger signals will pass through the decoupler as it is decoupled.",
    "keys": {
      "ClassName": "@roblox/globaltype/Decoupler.ClassName",
      "Triggered": "@roblox/globaltype/Decoupler.Triggered"
    }
  },
  "@roblox/globaltype/Decoupler.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Decoupler.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/DelayWire": {
    "documentation": "Similar to a regular trigger wire, but depending on the configuration will wait x seconds before the trigger signal passes through.",
    "keys": {
      "ClassName": "@roblox/globaltype/DelayWire.ClassName",
      "Configure": "@roblox/globaltype/DelayWire.Configure",
      "DelayTime": "@roblox/globaltype/DelayWire.DelayTime"
    }
  },
  "@roblox/globaltype/DelayWire.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DelayWire.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/DelayWire.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/DelayWire.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/DelayWire.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/DelayWire.DelayTime": {
    "documentation": "The time in seconds that it takes for signals to pass through this wire."
  },
  "@roblox/globaltype/DelayWireConfiguration": {
    "documentation": "The configuration of the <code>DelayWire</code> object.",
    "keys": {
      "DelayTime": "@roblox/globaltype/DelayWireConfiguration.DelayTime"
    }
  },
  "@roblox/globaltype/DelayWireConfiguration.DelayTime": {
    "documentation": "The time in seconds that it takes for signals to pass through this wire."
  },
  "@roblox/globaltype/DeleteSwitch": {
    "documentation": "An object that deletes itself when triggered.",
    "keys": {
      "ClassName": "@roblox/globaltype/DeleteSwitch.ClassName",
      "Triggered": "@roblox/globaltype/DeleteSwitch.Triggered"
    }
  },
  "@roblox/globaltype/DeleteSwitch.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DeleteSwitch.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/DevBattery": {
    "documentation": "A debug item meant for developers.",
    "keys": {
      "ClassName": "@roblox/globaltype/DevBattery.ClassName",
      "ContainerChanged": "@roblox/globaltype/DevBattery.ContainerChanged",
      "GetAmount": "@roblox/globaltype/DevBattery.GetAmount",
      "GetResource": "@roblox/globaltype/DevBattery.GetResource",
      "GetResourceAmount": "@roblox/globaltype/DevBattery.GetResourceAmount"
    }
  },
  "@roblox/globaltype/DevBattery.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DevBattery.ContainerChanged": {
    "documentation": "Fires when the amount of the resource in the container changes."
  },
  "@roblox/globaltype/DevBattery.GetAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/DevBattery.GetAmount/returns/0"
    ]
  },
  "@roblox/globaltype/DevBattery.GetAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/DevBattery.GetResource": {
    "documentation": "Gets the name of the resource contained, will return the <i>string</i> <code>\"nil\"</code> if nothing is stored, rather than <i>actually</i> returning <code>nil</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/DevBattery.GetResource/returns/0"
    ]
  },
  "@roblox/globaltype/DevBattery.GetResource/returns/0": {},
  "@roblox/globaltype/DevBattery.GetResourceAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/DevBattery.GetResourceAmount/returns/0"
    ]
  },
  "@roblox/globaltype/DevBattery.GetResourceAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/DevGenerator": {
    "documentation": "A debug item meant for developers.",
    "keys": {
      "ClassName": "@roblox/globaltype/DevGenerator.ClassName"
    }
  },
  "@roblox/globaltype/DevGenerator.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DevGravityGenerator": {
    "documentation": "A debug item meant for developers.",
    "keys": {
      "ClassName": "@roblox/globaltype/DevGravityGenerator.ClassName",
      "Configure": "@roblox/globaltype/DevGravityGenerator.Configure",
      "Enabled": "@roblox/globaltype/DevGravityGenerator.Enabled",
      "Gravity": "@roblox/globaltype/DevGravityGenerator.Gravity",
      "Loop": "@roblox/globaltype/DevGravityGenerator.Loop",
      "Radius": "@roblox/globaltype/DevGravityGenerator.Radius"
    }
  },
  "@roblox/globaltype/DevGravityGenerator.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DevGravityGenerator.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/DevGravityGenerator.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/DevGravityGenerator.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/DevGravityGenerator.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/DevGravityGenerator.Enabled": {
    "documentation": "Whether or not the gravity generator is enabled."
  },
  "@roblox/globaltype/DevGravityGenerator.Gravity": {
    "documentation": "The amount of gravity within the influence of the GravityGenerator as a force."
  },
  "@roblox/globaltype/DevGravityGenerator.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/DevGravityGenerator.Radius": {
    "documentation": "The radius of the generated gravity field."
  },
  "@roblox/globaltype/DevGravityGeneratorConfiguration": {
    "documentation": "The configuration of the <code>DevGravityGenerator</code> object.",
    "keys": {
      "Enabled": "@roblox/globaltype/DevGravityGeneratorConfiguration.Enabled",
      "Gravity": "@roblox/globaltype/DevGravityGeneratorConfiguration.Gravity",
      "Radius": "@roblox/globaltype/DevGravityGeneratorConfiguration.Radius"
    }
  },
  "@roblox/globaltype/DevGravityGeneratorConfiguration.Enabled": {
    "documentation": "Whether or not the gravity generator is enabled."
  },
  "@roblox/globaltype/DevGravityGeneratorConfiguration.Gravity": {
    "documentation": "The amount of gravity within the influence of the GravityGenerator as a force."
  },
  "@roblox/globaltype/DevGravityGeneratorConfiguration.Radius": {
    "documentation": "The radius of the generated gravity field."
  },
  "@roblox/globaltype/DevHeatStorage": {
    "documentation": "A debug item meant for developers.",
    "keys": {
      "ClassName": "@roblox/globaltype/DevHeatStorage.ClassName",
      "ContainerChanged": "@roblox/globaltype/DevHeatStorage.ContainerChanged",
      "GetAmount": "@roblox/globaltype/DevHeatStorage.GetAmount",
      "GetResource": "@roblox/globaltype/DevHeatStorage.GetResource",
      "GetResourceAmount": "@roblox/globaltype/DevHeatStorage.GetResourceAmount"
    }
  },
  "@roblox/globaltype/DevHeatStorage.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DevHeatStorage.ContainerChanged": {
    "documentation": "Fires when the amount of the resource in the container changes."
  },
  "@roblox/globaltype/DevHeatStorage.GetAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/DevHeatStorage.GetAmount/returns/0"
    ]
  },
  "@roblox/globaltype/DevHeatStorage.GetAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/DevHeatStorage.GetResource": {
    "documentation": "Gets the name of the resource contained, will return the <i>string</i> <code>\"nil\"</code> if nothing is stored, rather than <i>actually</i> returning <code>nil</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/DevHeatStorage.GetResource/returns/0"
    ]
  },
  "@roblox/globaltype/DevHeatStorage.GetResource/returns/0": {},
  "@roblox/globaltype/DevHeatStorage.GetResourceAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/DevHeatStorage.GetResourceAmount/returns/0"
    ]
  },
  "@roblox/globaltype/DevHeatStorage.GetResourceAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/DevSink": {
    "documentation": "A debug item meant for developers.",
    "keys": {
      "ClassName": "@roblox/globaltype/DevSink.ClassName",
      "Configure": "@roblox/globaltype/DevSink.Configure",
      "Configured": "@roblox/globaltype/DevSink.Configured",
      "ContainerChanged": "@roblox/globaltype/DevSink.ContainerChanged",
      "GetAmount": "@roblox/globaltype/DevSink.GetAmount",
      "GetAmountConsumed": "@roblox/globaltype/DevSink.GetAmountConsumed",
      "GetResource": "@roblox/globaltype/DevSink.GetResource",
      "GetResourceAmount": "@roblox/globaltype/DevSink.GetResourceAmount",
      "OnClick": "@roblox/globaltype/DevSink.OnClick",
      "Resource": "@roblox/globaltype/DevSink.Resource"
    }
  },
  "@roblox/globaltype/DevSink.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DevSink.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/DevSink.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/DevSink.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/DevSink.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/DevSink.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/DevSink.ContainerChanged": {
    "documentation": "Fires when the amount of the resource in the container changes."
  },
  "@roblox/globaltype/DevSink.GetAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/DevSink.GetAmount/returns/0"
    ]
  },
  "@roblox/globaltype/DevSink.GetAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/DevSink.GetAmountConsumed": {
    "params": [
      {
        "documentation": "@roblox/globaltype/DevSink.GetAmountConsumed",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/DevSink.GetAmountConsumed/params/1",
        "name": "..."
      }
    ],
    "returns": [
      "@roblox/globaltype/DevSink.GetAmountConsumed/returns/0"
    ]
  },
  "@roblox/globaltype/DevSink.GetAmountConsumed/params/1": {
    "documentation": "Unknown."
  },
  "@roblox/globaltype/DevSink.GetAmountConsumed/returns/0": {
    "documentation": "Unknown."
  },
  "@roblox/globaltype/DevSink.GetResource": {
    "documentation": "Gets the name of the resource contained, will return the <i>string</i> <code>\"nil\"</code> if nothing is stored, rather than <i>actually</i> returning <code>nil</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/DevSink.GetResource/returns/0"
    ]
  },
  "@roblox/globaltype/DevSink.GetResource/returns/0": {},
  "@roblox/globaltype/DevSink.GetResourceAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/DevSink.GetResourceAmount/returns/0"
    ]
  },
  "@roblox/globaltype/DevSink.GetResourceAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/DevSink.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/DevSink.Resource": {
    "documentation": "The name of the object to produce a sink for."
  },
  "@roblox/globaltype/DevSinkConfiguration": {
    "documentation": "The configuration of the <code>DevSink</code> object.",
    "keys": {
      "Resource": "@roblox/globaltype/DevSinkConfiguration.Resource"
    }
  },
  "@roblox/globaltype/DevSinkConfiguration.Resource": {
    "documentation": "The name of the object to produce a sink for."
  },
  "@roblox/globaltype/DevSource": {
    "documentation": "A debug item meant for developers.",
    "keys": {
      "ClassName": "@roblox/globaltype/DevSource.ClassName",
      "Configure": "@roblox/globaltype/DevSource.Configure",
      "Configured": "@roblox/globaltype/DevSource.Configured",
      "GetAmountGenerated": "@roblox/globaltype/DevSource.GetAmountGenerated",
      "OnClick": "@roblox/globaltype/DevSource.OnClick",
      "Resource": "@roblox/globaltype/DevSource.Resource"
    }
  },
  "@roblox/globaltype/DevSource.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DevSource.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/DevSource.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/DevSource.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/DevSource.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/DevSource.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/DevSource.GetAmountGenerated": {
    "params": [
      {
        "documentation": "@roblox/globaltype/DevSource.GetAmountGenerated",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/DevSource.GetAmountGenerated/params/1",
        "name": "..."
      }
    ],
    "returns": [
      "@roblox/globaltype/DevSource.GetAmountGenerated/returns/0"
    ]
  },
  "@roblox/globaltype/DevSource.GetAmountGenerated/params/1": {
    "documentation": "Unknown."
  },
  "@roblox/globaltype/DevSource.GetAmountGenerated/returns/0": {
    "documentation": "Unknown."
  },
  "@roblox/globaltype/DevSource.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/DevSource.Resource": {
    "documentation": "The name of the object to produce a source for."
  },
  "@roblox/globaltype/DevSourceConfiguration": {
    "documentation": "The configuration of the <code>DevSource</code> object.",
    "keys": {
      "Resource": "@roblox/globaltype/DevSourceConfiguration.Resource"
    }
  },
  "@roblox/globaltype/DevSourceConfiguration.Resource": {
    "documentation": "The name of the object to produce a source for."
  },
  "@roblox/globaltype/DevTeleporter": {
    "documentation": "A debug item meant for developers.",
    "keys": {
      "ClassName": "@roblox/globaltype/DevTeleporter.ClassName",
      "Configure": "@roblox/globaltype/DevTeleporter.Configure",
      "TeleporterID": "@roblox/globaltype/DevTeleporter.TeleporterID"
    }
  },
  "@roblox/globaltype/DevTeleporter.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DevTeleporter.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/DevTeleporter.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/DevTeleporter.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/DevTeleporter.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/DevTeleporter.TeleporterID": {
    "documentation": "The ID of the teleporter at the goal coordinates to teleport directly to."
  },
  "@roblox/globaltype/DevTeleporterConfiguration": {
    "documentation": "The configuration of the <code>DevTeleporter</code> object.",
    "keys": {
      "TeleporterID": "@roblox/globaltype/DevTeleporterConfiguration.TeleporterID"
    }
  },
  "@roblox/globaltype/DevTeleporterConfiguration.TeleporterID": {
    "documentation": "The ID of the teleporter at the goal coordinates to teleport directly to."
  },
  "@roblox/globaltype/Diamond": {
    "documentation": "A rare, carbon-dense, and very durable gem. Takes 2x energy damage & allows lasers to pass.",
    "keys": {
      "ClassName": "@roblox/globaltype/Diamond.ClassName"
    }
  },
  "@roblox/globaltype/Diamond.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Diode": {
    "documentation": "Acts as a wire/chute/pipe/etc, but only works one way, through the diode's input and output faces as indicated by the arrow.",
    "keys": {
      "ClassName": "@roblox/globaltype/Diode.ClassName"
    }
  },
  "@roblox/globaltype/Diode.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Disk": {
    "documentation": "A programmable object capable of storing complex data.\n<b>Be aware, while disks can store userdata & function values, it cannot save them.</b>",
    "keys": {
      "ClassName": "@roblox/globaltype/Disk.ClassName",
      "Clear": "@roblox/globaltype/Disk.Clear",
      "ClearDisk": "@roblox/globaltype/Disk.ClearDisk",
      "Compress": "@roblox/globaltype/Disk.Compress",
      "Decompress": "@roblox/globaltype/Disk.Decompress",
      "Loop": "@roblox/globaltype/Disk.Loop",
      "Read": "@roblox/globaltype/Disk.Read",
      "ReadAll": "@roblox/globaltype/Disk.ReadAll",
      "ReadEntireDisk": "@roblox/globaltype/Disk.ReadEntireDisk",
      "Write": "@roblox/globaltype/Disk.Write",
      "WriteAll": "@roblox/globaltype/Disk.WriteAll"
    }
  },
  "@roblox/globaltype/Disk.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Disk.Clear": {
    "documentation": "Clears all the contents of the disk.",
    "params": []
  },
  "@roblox/globaltype/Disk.ClearDisk": {
    "documentation": "Clears the disk.",
    "params": []
  },
  "@roblox/globaltype/Disk.Compress": {
    "params": []
  },
  "@roblox/globaltype/Disk.Decompress": {
    "params": []
  },
  "@roblox/globaltype/Disk.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Disk.Read": {
    "documentation": "Reads the specified key from the disk and returns the value.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Disk.Read",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Disk.Read/params/1",
        "name": "key"
      }
    ],
    "returns": [
      "@roblox/globaltype/Disk.Read/returns/0"
    ]
  },
  "@roblox/globaltype/Disk.Read/params/1": {},
  "@roblox/globaltype/Disk.Read/returns/0": {},
  "@roblox/globaltype/Disk.ReadAll": {
    "documentation": "Reads the entire content of the disk and outputs it as a dictionary.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Disk.ReadAll/returns/0"
    ]
  },
  "@roblox/globaltype/Disk.ReadAll/returns/0": {
    "documentation": "The content of the disk as a dictionary."
  },
  "@roblox/globaltype/Disk.ReadEntireDisk": {
    "params": [],
    "returns": [
      "@roblox/globaltype/Disk.ReadEntireDisk/returns/0"
    ]
  },
  "@roblox/globaltype/Disk.ReadEntireDisk/returns/0": {},
  "@roblox/globaltype/Disk.Write": {
    "documentation": "Write the specified key with the specified value to the disk.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Disk.Write",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Disk.Write/params/1",
        "name": "key"
      },
      {
        "documentation": "@roblox/globaltype/Disk.Write/params/2",
        "name": "value"
      }
    ]
  },
  "@roblox/globaltype/Disk.Write/params/1": {
    "documentation": "The key to write to the disk at."
  },
  "@roblox/globaltype/Disk.Write/params/2": {
    "documentation": "The value to write to the disk."
  },
  "@roblox/globaltype/Disk.WriteAll": {
    "documentation": "Replaces (to clarify, it <i>does</i> clear the original contents) the content\nof the disk with the specified dictionary.\n\nNote that it will have bizzare behaviour when used with <code>:ReadAll</code>.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Disk.WriteAll",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Disk.WriteAll/params/1",
        "name": "content"
      }
    ]
  },
  "@roblox/globaltype/Disk.WriteAll/params/1": {},
  "@roblox/globaltype/Dispenser": {
    "documentation": "Releases items from attached bins.",
    "keys": {
      "ClassName": "@roblox/globaltype/Dispenser.ClassName",
      "Configure": "@roblox/globaltype/Dispenser.Configure",
      "Configured": "@roblox/globaltype/Dispenser.Configured",
      "Dispense": "@roblox/globaltype/Dispenser.Dispense",
      "Filter": "@roblox/globaltype/Dispenser.Filter",
      "Loop": "@roblox/globaltype/Dispenser.Loop"
    }
  },
  "@roblox/globaltype/Dispenser.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Dispenser.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Dispenser.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Dispenser.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Dispenser.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Dispenser.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Dispenser.Dispense": {
    "documentation": "Dispenses a single item instantly.",
    "params": []
  },
  "@roblox/globaltype/Dispenser.Filter": {
    "documentation": "Which kinds of resources to drop, separated by commas."
  },
  "@roblox/globaltype/Dispenser.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/DispenserConfiguration": {
    "documentation": "The configuration of the <code>Dispenser</code> object.",
    "keys": {
      "Filter": "@roblox/globaltype/DispenserConfiguration.Filter"
    }
  },
  "@roblox/globaltype/DispenserConfiguration.Filter": {
    "documentation": "Which kinds of resources to drop, separated by commas."
  },
  "@roblox/globaltype/Door": {
    "documentation": "A legacy pre-component part. When triggered, it will open, and if triggered again will close.",
    "keys": {
      "ClassName": "@roblox/globaltype/Door.ClassName",
      "ComponentsUpdated": "@roblox/globaltype/Door.ComponentsUpdated"
    }
  },
  "@roblox/globaltype/Door.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Door.ComponentsUpdated": {
    "documentation": "This event never seems to fire, only tested on the deprecated <code>Blade</code> part, though."
  },
  "@roblox/globaltype/DriveBox": {
    "documentation": "When connected to a motor or engine with a rod, it will spin the same speed the engine or motor is going.\n(You must click the drivebox first when creating a rod.)",
    "keys": {
      "ClassName": "@roblox/globaltype/DriveBox.ClassName",
      "Configure": "@roblox/globaltype/DriveBox.Configure",
      "Loop": "@roblox/globaltype/DriveBox.Loop",
      "Ratio": "@roblox/globaltype/DriveBox.Ratio",
      "Reversal": "@roblox/globaltype/DriveBox.Reversal"
    }
  },
  "@roblox/globaltype/DriveBox.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/DriveBox.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/DriveBox.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/DriveBox.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/DriveBox.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/DriveBox.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/DriveBox.Ratio": {
    "documentation": "The ratio of speed from 1 (1:100) to 100 (100:100) between this DriveBox and the source motor."
  },
  "@roblox/globaltype/DriveBox.Reversal": {
    "documentation": "Determines whether the output should be reversed."
  },
  "@roblox/globaltype/DriveBoxConfiguration": {
    "documentation": "The configuration of the <code>DriveBox</code> object.",
    "keys": {
      "Ratio": "@roblox/globaltype/DriveBoxConfiguration.Ratio",
      "Reversal": "@roblox/globaltype/DriveBoxConfiguration.Reversal"
    }
  },
  "@roblox/globaltype/DriveBoxConfiguration.Ratio": {
    "documentation": "The ratio of speed from 1 (1:100) to 100 (100:100) between this DriveBox and the source motor."
  },
  "@roblox/globaltype/DriveBoxConfiguration.Reversal": {
    "documentation": "Determines whether the output should be reversed."
  },
  "@roblox/globaltype/Egg": {
    "documentation": "The perfect consumable item.",
    "keys": {
      "ClassName": "@roblox/globaltype/Egg.ClassName"
    }
  },
  "@roblox/globaltype/Egg.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/ElectricFence": {
    "documentation": "A special version of the fence which damages upon contact as long as it is powered. Conducts electricity like a wire.",
    "keys": {
      "ClassName": "@roblox/globaltype/ElectricFence.ClassName",
      "Loop": "@roblox/globaltype/ElectricFence.Loop"
    }
  },
  "@roblox/globaltype/ElectricFence.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/ElectricFence.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Electromagnet": {
    "documentation": "A powerful magnet.",
    "keys": {
      "ClassName": "@roblox/globaltype/Electromagnet.ClassName",
      "Loop": "@roblox/globaltype/Electromagnet.Loop"
    }
  },
  "@roblox/globaltype/Electromagnet.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Electromagnet.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/EnergyBomb": {
    "documentation": "Causes a powerful explosion when triggered. Often used in space combat as a means of a powerful missile or torpedo.",
    "keys": {
      "ClassName": "@roblox/globaltype/EnergyBomb.ClassName",
      "Damaged": "@roblox/globaltype/EnergyBomb.Damaged",
      "Triggered": "@roblox/globaltype/EnergyBomb.Triggered"
    }
  },
  "@roblox/globaltype/EnergyBomb.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/EnergyBomb.Damaged": {
    "documentation": "Fires when the object is damaged."
  },
  "@roblox/globaltype/EnergyBomb.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/EnergyGun": {
    "documentation": "Fires a powerful shot of energy when provided power and triggered.",
    "keys": {
      "ClassName": "@roblox/globaltype/EnergyGun.ClassName"
    }
  },
  "@roblox/globaltype/EnergyGun.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/EnergyShield": {
    "documentation": "Generates a forcefield protecting its interior from energy-based weapons such as <code>Lasers</code> and <code>PlasmaCannons</code>, and offers full protection from Warhead explosions.\nAn EnergyShield has a few sets of properties that you can fine tune to create a balanced shield.\n\n<code>ShieldRadius</code> - The size of the entire shield. This will exponentially consume more power the higher the radius is.\n<code>RegenerationSpeed</code> - Scale from 1 to 10 on how fast the shield will regenerate. The shield will not regenerate while unpowered.\n<code>ShieldStrength</code> - Scale from 1 to 10 on how much the shield can endure.\n\n<code>RegenerationSpeed</code> and <code>ShieldStrength</code> combined must not exceed 11.",
    "keys": {
      "CalculateCost": "@roblox/globaltype/EnergyShield.CalculateCost",
      "ClassName": "@roblox/globaltype/EnergyShield.ClassName",
      "Configure": "@roblox/globaltype/EnergyShield.Configure",
      "Configured": "@roblox/globaltype/EnergyShield.Configured",
      "GetShieldHealth": "@roblox/globaltype/EnergyShield.GetShieldHealth",
      "Loop": "@roblox/globaltype/EnergyShield.Loop",
      "RegenerationSpeed": "@roblox/globaltype/EnergyShield.RegenerationSpeed",
      "SetColor": "@roblox/globaltype/EnergyShield.SetColor",
      "ShieldRadius": "@roblox/globaltype/EnergyShield.ShieldRadius",
      "ShieldStrength": "@roblox/globaltype/EnergyShield.ShieldStrength"
    }
  },
  "@roblox/globaltype/EnergyShield.CalculateCost": {
    "documentation": "Calculates the power cost of the shield based on its radius.",
    "params": [
      {
        "documentation": "@roblox/globaltype/EnergyShield.CalculateCost",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/EnergyShield.CalculateCost/params/1",
        "name": "radius"
      }
    ],
    "returns": [
      "@roblox/globaltype/EnergyShield.CalculateCost/returns/0"
    ]
  },
  "@roblox/globaltype/EnergyShield.CalculateCost/params/1": {
    "documentation": "The radius of the theoretical energy shield you want to calculate the power cost for.\nIf <code>nil</code>, will default to the <code>EnergyShield.Radius</code> configuration.\nThe parameter is not bound by the constraints of <code>EnergyShield.Radius</code> and will accept any input."
  },
  "@roblox/globaltype/EnergyShield.CalculateCost/returns/0": {
    "documentation": "The <code>Power</code> cost per game tick to keep the <code>EnergyShield</code> running."
  },
  "@roblox/globaltype/EnergyShield.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/EnergyShield.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/EnergyShield.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/EnergyShield.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/EnergyShield.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/EnergyShield.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/EnergyShield.GetShieldHealth": {
    "documentation": "Gets the current health of the shield as a percentage between <code>0</code> and <code>1</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/EnergyShield.GetShieldHealth/returns/0"
    ]
  },
  "@roblox/globaltype/EnergyShield.GetShieldHealth/returns/0": {
    "documentation": "The current health of the shield as a percentage between <code>0</code> and <code>1</code>."
  },
  "@roblox/globaltype/EnergyShield.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/EnergyShield.RegenerationSpeed": {
    "documentation": "Determines how fast the shield regenerates after being hit."
  },
  "@roblox/globaltype/EnergyShield.SetColor": {
    "documentation": "Sets the color of the object.",
    "params": [
      {
        "documentation": "@roblox/globaltype/EnergyShield.SetColor",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/EnergyShield.SetColor/params/1",
        "name": "color"
      }
    ]
  },
  "@roblox/globaltype/EnergyShield.SetColor/params/1": {
    "documentation": "The <code>Color3</code> of the color you want to set the object to."
  },
  "@roblox/globaltype/EnergyShield.ShieldRadius": {
    "documentation": "The size of the entire shield. The shield exponentially consumes more power the higher this is."
  },
  "@roblox/globaltype/EnergyShield.ShieldStrength": {
    "documentation": "Determines the shield's resistance to damage."
  },
  "@roblox/globaltype/EnergyShieldConfiguration": {
    "documentation": "The configuration of the <code>EnergyShield</code> object.",
    "keys": {
      "RegenerationSpeed": "@roblox/globaltype/EnergyShieldConfiguration.RegenerationSpeed",
      "ShieldRadius": "@roblox/globaltype/EnergyShieldConfiguration.ShieldRadius",
      "ShieldStrength": "@roblox/globaltype/EnergyShieldConfiguration.ShieldStrength"
    }
  },
  "@roblox/globaltype/EnergyShieldConfiguration.RegenerationSpeed": {
    "documentation": "Determines how fast the shield regenerates after being hit."
  },
  "@roblox/globaltype/EnergyShieldConfiguration.ShieldRadius": {
    "documentation": "The size of the entire shield. The shield exponentially consumes more power the higher this is."
  },
  "@roblox/globaltype/EnergyShieldConfiguration.ShieldStrength": {
    "documentation": "Determines the shield's resistance to damage."
  },
  "@roblox/globaltype/EnergySword": {
    "documentation": "A short ranged melee weapon which forms its own gravitational field when lunged. Forged with incarnated ̶m̶a̶g̶i̶c science!",
    "keys": {
      "ClassName": "@roblox/globaltype/EnergySword.ClassName"
    }
  },
  "@roblox/globaltype/EnergySword.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Engine": {
    "documentation": "It acts similar to a motor, but is powered by gasoline instead of electricity.",
    "keys": {
      "ClassName": "@roblox/globaltype/Engine.ClassName",
      "Configure": "@roblox/globaltype/Engine.Configure",
      "Configured": "@roblox/globaltype/Engine.Configured",
      "EngineSpeed": "@roblox/globaltype/Engine.EngineSpeed"
    }
  },
  "@roblox/globaltype/Engine.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Engine.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Engine.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Engine.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Engine.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Engine.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Engine.EngineSpeed": {
    "documentation": "Determines the speed at which the engine is driven."
  },
  "@roblox/globaltype/EngineConfiguration": {
    "documentation": "The configuration of the <code>Engine</code> object.",
    "keys": {
      "EngineSpeed": "@roblox/globaltype/EngineConfiguration.EngineSpeed"
    }
  },
  "@roblox/globaltype/EngineConfiguration.EngineSpeed": {
    "documentation": "Determines the speed at which the engine is driven."
  },
  "@roblox/globaltype/EthernetCable": {
    "documentation": "Allows for the transfer of data between ports. Mostly utilized in programming.",
    "keys": {
      "ClassName": "@roblox/globaltype/EthernetCable.ClassName"
    }
  },
  "@roblox/globaltype/EthernetCable.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Event": {
    "keys": {
      "Connect": "@roblox/globaltype/Event.Connect",
      "_eventName": "@roblox/globaltype/Event._eventName"
    }
  },
  "@roblox/globaltype/Event.Connect": {
    "documentation": "Connect the provided callback to be called when the event is fired.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Event.Connect",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Event.Connect/params/1",
        "name": "callback"
      }
    ],
    "returns": [
      "@roblox/globaltype/Event.Connect/returns/0"
    ]
  },
  "@roblox/globaltype/Event.Connect/params/1": {},
  "@roblox/globaltype/Event.Connect/returns/0": {},
  "@roblox/globaltype/Event._eventName": {},
  "@roblox/globaltype/EventConnection": {
    "keys": {
      "Callback": "@roblox/globaltype/EventConnection.Callback",
      "_eventName": "@roblox/globaltype/EventConnection._eventName"
    }
  },
  "@roblox/globaltype/EventConnection.Callback": {
    "documentation": "The function that will be called when the event is fired."
  },
  "@roblox/globaltype/EventConnection._eventName": {},
  "@roblox/globaltype/EventConnectionMetatable": {
    "keys": {
      "Disconnect": "@roblox/globaltype/EventConnectionMetatable.Disconnect",
      "Unbind": "@roblox/globaltype/EventConnectionMetatable.Unbind",
      "__index": "@roblox/globaltype/EventConnectionMetatable.__index",
      "__mode": "@roblox/globaltype/EventConnectionMetatable.__mode"
    }
  },
  "@roblox/globaltype/EventConnectionMetatable.Disconnect": {
    "documentation": "Disconnects the event connection, meaning the callback will no longer be ran when the event is fired.",
    "params": []
  },
  "@roblox/globaltype/EventConnectionMetatable.Unbind": {
    "params": []
  },
  "@roblox/globaltype/EventConnectionMetatable.__index": {},
  "@roblox/globaltype/EventConnectionMetatable.__mode": {},
  "@roblox/globaltype/ExoticMatter": {
    "documentation": "???",
    "keys": {
      "ClassName": "@roblox/globaltype/ExoticMatter.ClassName"
    }
  },
  "@roblox/globaltype/ExoticMatter.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Explosive": {
    "documentation": "Causes an explosion when triggered. You can use a delay wire to make it explode after a few seconds and not immediately.",
    "keys": {
      "ClassName": "@roblox/globaltype/Explosive.ClassName",
      "Damaged": "@roblox/globaltype/Explosive.Damaged",
      "Triggered": "@roblox/globaltype/Explosive.Triggered"
    }
  },
  "@roblox/globaltype/Explosive.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Explosive.Damaged": {
    "documentation": "Fires when the object is damaged."
  },
  "@roblox/globaltype/Explosive.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/Extinguisher": {
    "documentation": "A handy container with a spray nozzle to extinguish fires.",
    "keys": {
      "ClassName": "@roblox/globaltype/Extinguisher.ClassName"
    }
  },
  "@roblox/globaltype/Extinguisher.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Extractor": {
    "documentation": "Harvests or mines materials from the world. It can extract things like grass, snow, wood, ores, etc depending on what terrain it is attached to.\n\nSmall resource-rich mountains can be found in the world, and these produce a number of unique resources such as Oil, Quartz, Silicon, and more.\nYou may want to configure the extractor to extract a specific resource, which you can do by setting the MaterialToExtract config, otherwise, it will select a random resource to mine.",
    "keys": {
      "ClassName": "@roblox/globaltype/Extractor.ClassName",
      "Configure": "@roblox/globaltype/Extractor.Configure",
      "Loop": "@roblox/globaltype/Extractor.Loop",
      "MaterialToExtract": "@roblox/globaltype/Extractor.MaterialToExtract"
    }
  },
  "@roblox/globaltype/Extractor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Extractor.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Extractor.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Extractor.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Extractor.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Extractor.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Extractor.MaterialToExtract": {
    "documentation": "Determines the material to extract from connected natural surfaces. Disables the extractor if blank."
  },
  "@roblox/globaltype/ExtractorConfiguration": {
    "documentation": "The configuration of the <code>Extractor</code> object.",
    "keys": {
      "MaterialToExtract": "@roblox/globaltype/ExtractorConfiguration.MaterialToExtract"
    }
  },
  "@roblox/globaltype/ExtractorConfiguration.MaterialToExtract": {
    "documentation": "Determines the material to extract from connected natural surfaces. Disables the extractor if blank."
  },
  "@roblox/globaltype/FactionHub": {
    "documentation": "Configures faction settings, view members, invite players, accept invites, save resources/models and view controlled regions.\nThis is not a form of claiming a region.",
    "keys": {
      "ClassName": "@roblox/globaltype/FactionHub.ClassName",
      "Configured": "@roblox/globaltype/FactionHub.Configured",
      "OnClick": "@roblox/globaltype/FactionHub.OnClick"
    }
  },
  "@roblox/globaltype/FactionHub.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/FactionHub.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/FactionHub.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/FactionSpawn": {
    "documentation": "Acts as a spawn location for the faction of the player who locked it.",
    "keys": {
      "ClassName": "@roblox/globaltype/FactionSpawn.ClassName"
    }
  },
  "@roblox/globaltype/FactionSpawn.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Faucet": {
    "documentation": "Releases liquids and gases from Tanks.",
    "keys": {
      "ClassName": "@roblox/globaltype/Faucet.ClassName",
      "Configure": "@roblox/globaltype/Faucet.Configure",
      "Configured": "@roblox/globaltype/Faucet.Configured",
      "Dispense": "@roblox/globaltype/Faucet.Dispense",
      "Filter": "@roblox/globaltype/Faucet.Filter",
      "Loop": "@roblox/globaltype/Faucet.Loop"
    }
  },
  "@roblox/globaltype/Faucet.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Faucet.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Faucet.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Faucet.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Faucet.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Faucet.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Faucet.Dispense": {
    "documentation": "Dispenses a single item instantly.",
    "params": []
  },
  "@roblox/globaltype/Faucet.Filter": {
    "documentation": "Which kinds of resources to drop, separated by commas."
  },
  "@roblox/globaltype/Faucet.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/FaucetConfiguration": {
    "documentation": "The configuration of the <code>Faucet</code> object.",
    "keys": {
      "Filter": "@roblox/globaltype/FaucetConfiguration.Filter"
    }
  },
  "@roblox/globaltype/FaucetConfiguration.Filter": {
    "documentation": "Which kinds of resources to drop, separated by commas."
  },
  "@roblox/globaltype/Fence": {
    "documentation": "A metal fence. Can be used to set up walls and guard structures and bases.",
    "keys": {
      "ClassName": "@roblox/globaltype/Fence.ClassName"
    }
  },
  "@roblox/globaltype/Fence.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/FileAttributes": {
    "keys": {
      "metadata": "@roblox/globaltype/FileAttributes.metadata",
      "permissions": "@roblox/globaltype/FileAttributes.permissions"
    }
  },
  "@roblox/globaltype/FileAttributes.metadata": {},
  "@roblox/globaltype/FileAttributes.permissions": {},
  "@roblox/globaltype/FilePermissions": {
    "keys": {
      "read": "@roblox/globaltype/FilePermissions.read",
      "write": "@roblox/globaltype/FilePermissions.write"
    }
  },
  "@roblox/globaltype/FilePermissions.read": {},
  "@roblox/globaltype/FilePermissions.write": {},
  "@roblox/globaltype/FileSystem": {
    "keys": {
      "__index": "@roblox/globaltype/FileSystem.__index",
      "chdir": "@roblox/globaltype/FileSystem.chdir",
      "copy": "@roblox/globaltype/FileSystem.copy",
      "exists": "@roblox/globaltype/FileSystem.exists",
      "filename": "@roblox/globaltype/FileSystem.filename",
      "join": "@roblox/globaltype/FileSystem.join",
      "mkdir": "@roblox/globaltype/FileSystem.mkdir",
      "mklink": "@roblox/globaltype/FileSystem.mklink",
      "moveMerge": "@roblox/globaltype/FileSystem.moveMerge",
      "new": "@roblox/globaltype/FileSystem.new",
      "parentdir": "@roblox/globaltype/FileSystem.parentdir",
      "pwd": "@roblox/globaltype/FileSystem.pwd",
      "readdir": "@roblox/globaltype/FileSystem.readdir",
      "readfile": "@roblox/globaltype/FileSystem.readfile",
      "rename": "@roblox/globaltype/FileSystem.rename",
      "resolve": "@roblox/globaltype/FileSystem.resolve",
      "separator": "@roblox/globaltype/FileSystem.separator",
      "split": "@roblox/globaltype/FileSystem.split",
      "unlink": "@roblox/globaltype/FileSystem.unlink",
      "writefile": "@roblox/globaltype/FileSystem.writefile"
    }
  },
  "@roblox/globaltype/FileSystem.__index": {},
  "@roblox/globaltype/FileSystem.chdir": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.chdir",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.chdir/params/1",
        "name": "pathname"
      }
    ],
    "returns": [
      "@roblox/globaltype/FileSystem.chdir/returns/0"
    ]
  },
  "@roblox/globaltype/FileSystem.chdir/params/1": {},
  "@roblox/globaltype/FileSystem.chdir/returns/0": {},
  "@roblox/globaltype/FileSystem.copy": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.copy",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.copy/params/1",
        "name": "pathnameFrom"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.copy/params/2",
        "name": "pathnameTo"
      }
    ]
  },
  "@roblox/globaltype/FileSystem.copy/params/1": {},
  "@roblox/globaltype/FileSystem.copy/params/2": {},
  "@roblox/globaltype/FileSystem.exists": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.exists/params/0",
        "name": "pathname"
      }
    ],
    "returns": [
      "@roblox/globaltype/FileSystem.exists/returns/0"
    ]
  },
  "@roblox/globaltype/FileSystem.exists/params/0": {},
  "@roblox/globaltype/FileSystem.exists/returns/0": {},
  "@roblox/globaltype/FileSystem.filename": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.filename/params/0",
        "name": "pathname"
      }
    ],
    "returns": [
      "@roblox/globaltype/FileSystem.filename/returns/0"
    ]
  },
  "@roblox/globaltype/FileSystem.filename/params/0": {},
  "@roblox/globaltype/FileSystem.filename/returns/0": {},
  "@roblox/globaltype/FileSystem.join": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.join/params/0",
        "name": "..."
      }
    ],
    "returns": [
      "@roblox/globaltype/FileSystem.join/returns/0"
    ]
  },
  "@roblox/globaltype/FileSystem.join/params/0": {},
  "@roblox/globaltype/FileSystem.join/returns/0": {},
  "@roblox/globaltype/FileSystem.mkdir": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.mkdir",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.mkdir/params/1",
        "name": "pathname"
      }
    ]
  },
  "@roblox/globaltype/FileSystem.mkdir/params/1": {},
  "@roblox/globaltype/FileSystem.mklink": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.mklink",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.mklink/params/1",
        "name": "linkName"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.mklink/params/2",
        "name": "targetName"
      }
    ]
  },
  "@roblox/globaltype/FileSystem.mklink/params/1": {},
  "@roblox/globaltype/FileSystem.mklink/params/2": {},
  "@roblox/globaltype/FileSystem.moveMerge": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.moveMerge",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.moveMerge/params/1",
        "name": "pathnameFrom"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.moveMerge/params/2",
        "name": "pathnameTo"
      }
    ]
  },
  "@roblox/globaltype/FileSystem.moveMerge/params/1": {},
  "@roblox/globaltype/FileSystem.moveMerge/params/2": {},
  "@roblox/globaltype/FileSystem.new": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.new/params/0",
        "name": "source"
      }
    ],
    "returns": [
      "@roblox/globaltype/FileSystem.new/returns/0"
    ]
  },
  "@roblox/globaltype/FileSystem.new/params/0": {},
  "@roblox/globaltype/FileSystem.new/returns/0": {},
  "@roblox/globaltype/FileSystem.parentdir": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.parentdir/params/0",
        "name": "pathname"
      }
    ],
    "returns": [
      "@roblox/globaltype/FileSystem.parentdir/returns/0"
    ]
  },
  "@roblox/globaltype/FileSystem.parentdir/params/0": {},
  "@roblox/globaltype/FileSystem.parentdir/returns/0": {},
  "@roblox/globaltype/FileSystem.pwd": {
    "params": [],
    "returns": [
      "@roblox/globaltype/FileSystem.pwd/returns/0"
    ]
  },
  "@roblox/globaltype/FileSystem.pwd/returns/0": {},
  "@roblox/globaltype/FileSystem.readdir": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.readdir",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.readdir/params/1",
        "name": "pathname"
      }
    ],
    "returns": [
      "@roblox/globaltype/FileSystem.readdir/returns/0"
    ]
  },
  "@roblox/globaltype/FileSystem.readdir/params/1": {},
  "@roblox/globaltype/FileSystem.readdir/returns/0": {},
  "@roblox/globaltype/FileSystem.readfile": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.readfile",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.readfile/params/1",
        "name": "filepath"
      }
    ],
    "returns": [
      "@roblox/globaltype/FileSystem.readfile/returns/0"
    ]
  },
  "@roblox/globaltype/FileSystem.readfile/params/1": {},
  "@roblox/globaltype/FileSystem.readfile/returns/0": {},
  "@roblox/globaltype/FileSystem.rename": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.rename",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.rename/params/1",
        "name": "pathnameFrom"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.rename/params/2",
        "name": "pathnameTo"
      }
    ]
  },
  "@roblox/globaltype/FileSystem.rename/params/1": {},
  "@roblox/globaltype/FileSystem.rename/params/2": {},
  "@roblox/globaltype/FileSystem.resolve": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.resolve/params/0",
        "name": "pathname"
      }
    ],
    "returns": [
      "@roblox/globaltype/FileSystem.resolve/returns/0"
    ]
  },
  "@roblox/globaltype/FileSystem.resolve/params/0": {},
  "@roblox/globaltype/FileSystem.resolve/returns/0": {},
  "@roblox/globaltype/FileSystem.separator": {},
  "@roblox/globaltype/FileSystem.split": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.split/params/0",
        "name": "pathname"
      }
    ],
    "returns": [
      "@roblox/globaltype/FileSystem.split/returns/0"
    ]
  },
  "@roblox/globaltype/FileSystem.split/params/0": {},
  "@roblox/globaltype/FileSystem.split/returns/0": {},
  "@roblox/globaltype/FileSystem.unlink": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.unlink",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.unlink/params/1",
        "name": "pathname"
      }
    ]
  },
  "@roblox/globaltype/FileSystem.unlink/params/1": {},
  "@roblox/globaltype/FileSystem.writefile": {
    "params": [
      {
        "documentation": "@roblox/globaltype/FileSystem.writefile",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.writefile/params/1",
        "name": "filepath"
      },
      {
        "documentation": "@roblox/globaltype/FileSystem.writefile/params/2",
        "name": "contents"
      }
    ]
  },
  "@roblox/globaltype/FileSystem.writefile/params/1": {},
  "@roblox/globaltype/FileSystem.writefile/params/2": {},
  "@roblox/globaltype/FileSystemDevice": {
    "keys": {
      "attributes": "@roblox/globaltype/FileSystemDevice.attributes",
      "device": "@roblox/globaltype/FileSystemDevice.device",
      "kind": "@roblox/globaltype/FileSystemDevice.kind"
    }
  },
  "@roblox/globaltype/FileSystemDevice.attributes": {},
  "@roblox/globaltype/FileSystemDevice.device": {},
  "@roblox/globaltype/FileSystemDevice.kind": {},
  "@roblox/globaltype/FileSystemDirectory": {
    "keys": {
      "attributes": "@roblox/globaltype/FileSystemDirectory.attributes",
      "contents": "@roblox/globaltype/FileSystemDirectory.contents",
      "kind": "@roblox/globaltype/FileSystemDirectory.kind"
    }
  },
  "@roblox/globaltype/FileSystemDirectory.attributes": {},
  "@roblox/globaltype/FileSystemDirectory.contents": {},
  "@roblox/globaltype/FileSystemDirectory.kind": {},
  "@roblox/globaltype/FileSystemFile": {
    "keys": {
      "attributes": "@roblox/globaltype/FileSystemFile.attributes",
      "contents": "@roblox/globaltype/FileSystemFile.contents",
      "kind": "@roblox/globaltype/FileSystemFile.kind"
    }
  },
  "@roblox/globaltype/FileSystemFile.attributes": {},
  "@roblox/globaltype/FileSystemFile.contents": {},
  "@roblox/globaltype/FileSystemFile.kind": {},
  "@roblox/globaltype/FileSystemFileNode": {},
  "@roblox/globaltype/FileSystemLink": {
    "keys": {
      "attributes": "@roblox/globaltype/FileSystemLink.attributes",
      "kind": "@roblox/globaltype/FileSystemLink.kind",
      "target": "@roblox/globaltype/FileSystemLink.target"
    }
  },
  "@roblox/globaltype/FileSystemLink.attributes": {},
  "@roblox/globaltype/FileSystemLink.kind": {},
  "@roblox/globaltype/FileSystemLink.target": {},
  "@roblox/globaltype/FileSystemOperationOptions": {
    "keys": {
      "ignoreLinks": "@roblox/globaltype/FileSystemOperationOptions.ignoreLinks",
      "ignorePermissions": "@roblox/globaltype/FileSystemOperationOptions.ignorePermissions"
    }
  },
  "@roblox/globaltype/FileSystemOperationOptions.ignoreLinks": {},
  "@roblox/globaltype/FileSystemOperationOptions.ignorePermissions": {},
  "@roblox/globaltype/FileSystemRoot": {
    "keys": {
      "attributes": "@roblox/globaltype/FileSystemRoot.attributes",
      "kind": "@roblox/globaltype/FileSystemRoot.kind",
      "pwd": "@roblox/globaltype/FileSystemRoot.pwd",
      "root": "@roblox/globaltype/FileSystemRoot.root"
    }
  },
  "@roblox/globaltype/FileSystemRoot.attributes": {},
  "@roblox/globaltype/FileSystemRoot.kind": {},
  "@roblox/globaltype/FileSystemRoot.pwd": {},
  "@roblox/globaltype/FileSystemRoot.root": {},
  "@roblox/globaltype/Filter": {
    "documentation": "Similar to a chute and a pipe, but only allows the configured material to pass through.",
    "keys": {
      "ClassName": "@roblox/globaltype/Filter.ClassName",
      "Configure": "@roblox/globaltype/Filter.Configure",
      "Filter": "@roblox/globaltype/Filter.Filter",
      "Invert": "@roblox/globaltype/Filter.Invert"
    }
  },
  "@roblox/globaltype/Filter.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Filter.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Filter.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Filter.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Filter.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Filter.Filter": {
    "documentation": "The name of the material allowed to pass through."
  },
  "@roblox/globaltype/Filter.Invert": {
    "documentation": "Whether or not to invert the filter."
  },
  "@roblox/globaltype/FilterConfiguration": {
    "documentation": "The configuration of the <code>Filter</code> object.",
    "keys": {
      "Filter": "@roblox/globaltype/FilterConfiguration.Filter",
      "Invert": "@roblox/globaltype/FilterConfiguration.Invert"
    }
  },
  "@roblox/globaltype/FilterConfiguration.Filter": {
    "documentation": "The name of the material allowed to pass through."
  },
  "@roblox/globaltype/FilterConfiguration.Invert": {
    "documentation": "Whether or not to invert the filter."
  },
  "@roblox/globaltype/FireWood": {
    "documentation": "A version of wood that is able to burn longer, allowing it to be an efficient fire burning device.",
    "keys": {
      "ClassName": "@roblox/globaltype/FireWood.ClassName"
    }
  },
  "@roblox/globaltype/FireWood.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Fireworks": {
    "documentation": "Causes an explosion when triggered. You can use a delay wire to make it explode after a few seconds and not immediately.",
    "keys": {
      "ClassName": "@roblox/globaltype/Fireworks.ClassName",
      "Damaged": "@roblox/globaltype/Fireworks.Damaged",
      "Triggered": "@roblox/globaltype/Fireworks.Triggered"
    }
  },
  "@roblox/globaltype/Fireworks.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Fireworks.Damaged": {
    "documentation": "Fires when the object is damaged."
  },
  "@roblox/globaltype/Fireworks.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/Flamethrower": {
    "documentation": "Shoots a stream of flaming gasoline to ignite your foes.",
    "keys": {
      "ClassName": "@roblox/globaltype/Flamethrower.ClassName",
      "Loop": "@roblox/globaltype/Flamethrower.Loop"
    }
  },
  "@roblox/globaltype/Flamethrower.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Flamethrower.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Flashlight": {
    "documentation": "A flashlight which can be used to provide light.",
    "keys": {
      "ClassName": "@roblox/globaltype/Flashlight.ClassName"
    }
  },
  "@roblox/globaltype/Flashlight.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Flint": {
    "documentation": "Useful for lighting up flammable materials.\nSimply rub it against a flammable material and it will set it on fire.",
    "keys": {
      "ClassName": "@roblox/globaltype/Flint.ClassName"
    }
  },
  "@roblox/globaltype/Flint.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/FloatDevice": {
    "documentation": "Produces a force which counteracts gravity and keeps the device floating. The device will additionally resist upwards and downwards vertical motion.",
    "keys": {
      "ClassName": "@roblox/globaltype/FloatDevice.ClassName"
    }
  },
  "@roblox/globaltype/FloatDevice.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/FluidProjector": {
    "documentation": "A device which projects a field of gas or liquid in front of it which you can swim in.\nHost the universe's greatest pool party!\nThe fluid area can be configureed in size and type.\n\nThe FluidProjector requires power in order to work, and must be supplied with the correct fluid to work.\nSignificantly more power is required on planets with high gravity.\nAs an example, if the fluid is water, it will need a supplied Tank of water attached to work.",
    "keys": {
      "ClassName": "@roblox/globaltype/FluidProjector.ClassName",
      "Configure": "@roblox/globaltype/FluidProjector.Configure",
      "Configured": "@roblox/globaltype/FluidProjector.Configured",
      "Fluid": "@roblox/globaltype/FluidProjector.Fluid",
      "Loop": "@roblox/globaltype/FluidProjector.Loop",
      "Size": "@roblox/globaltype/FluidProjector.Size"
    }
  },
  "@roblox/globaltype/FluidProjector.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/FluidProjector.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/FluidProjector.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/FluidProjector.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/FluidProjector.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/FluidProjector.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/FluidProjector.Fluid": {
    "documentation": "The name of the fluid being projected."
  },
  "@roblox/globaltype/FluidProjector.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/FluidProjector.Size": {
    "documentation": "The size in studs of the projected fluid field."
  },
  "@roblox/globaltype/FluidProjectorConfiguration": {
    "documentation": "The configuration of the <code>FluidProjector</code> object.",
    "keys": {
      "Fluid": "@roblox/globaltype/FluidProjectorConfiguration.Fluid",
      "Size": "@roblox/globaltype/FluidProjectorConfiguration.Size"
    }
  },
  "@roblox/globaltype/FluidProjectorConfiguration.Fluid": {
    "documentation": "The name of the fluid being projected."
  },
  "@roblox/globaltype/FluidProjectorConfiguration.Size": {
    "documentation": "The size in studs of the projected fluid field."
  },
  "@roblox/globaltype/Food": {
    "documentation": "A consumable item.\n<i>Appears</i> to be meat.\nUpon clicking it, it will heal the user's health depending on the size.",
    "keys": {
      "ClassName": "@roblox/globaltype/Food.ClassName",
      "OnClick": "@roblox/globaltype/Food.OnClick"
    }
  },
  "@roblox/globaltype/Food.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Food.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/FourthOfJuly": {
    "documentation": "Causes an explosion when triggered along with a Fourth Of July message. You can use a delay wire to make it explode after a few seconds and not immediately.",
    "keys": {
      "ClassName": "@roblox/globaltype/FourthOfJuly.ClassName",
      "Damaged": "@roblox/globaltype/FourthOfJuly.Damaged",
      "Triggered": "@roblox/globaltype/FourthOfJuly.Triggered"
    }
  },
  "@roblox/globaltype/FourthOfJuly.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/FourthOfJuly.Damaged": {
    "documentation": "Fires when the object is damaged."
  },
  "@roblox/globaltype/FourthOfJuly.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/Framewire": {
    "documentation": "Enter the matrix.",
    "keys": {
      "ClassName": "@roblox/globaltype/Framewire.ClassName"
    }
  },
  "@roblox/globaltype/Framewire.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Freezer": {
    "documentation": "Turns liquid Water into solid Ice, expelling heat energy in the process. Requires some power.",
    "keys": {
      "ClassName": "@roblox/globaltype/Freezer.ClassName",
      "Loop": "@roblox/globaltype/Freezer.Loop"
    }
  },
  "@roblox/globaltype/Freezer.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Freezer.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Furnace": {
    "documentation": "Burns resources at 16x speed to produce Heat energy directly. Has a low thermal conductivity.",
    "keys": {
      "ClassName": "@roblox/globaltype/Furnace.ClassName",
      "Loop": "@roblox/globaltype/Furnace.Loop"
    }
  },
  "@roblox/globaltype/Furnace.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Furnace.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Gasoline": {
    "documentation": "A liquid used for fueling many devices such as rockets and engines.",
    "keys": {
      "ClassName": "@roblox/globaltype/Gasoline.ClassName"
    }
  },
  "@roblox/globaltype/Gasoline.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Gear": {
    "documentation": "A mechanical component commonly used in crafting recipes for many objects.",
    "keys": {
      "ClassName": "@roblox/globaltype/Gear.ClassName"
    }
  },
  "@roblox/globaltype/Gear.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/GeigerCounter": {
    "keys": {
      "ClassName": "@roblox/globaltype/GeigerCounter.ClassName"
    }
  },
  "@roblox/globaltype/GeigerCounter.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Generator": {
    "documentation": "Creates energy from rotation.",
    "keys": {
      "ClassName": "@roblox/globaltype/Generator.ClassName"
    }
  },
  "@roblox/globaltype/Generator.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Glass": {
    "documentation": "Created when sand is burned, set on fire, or fed into a Kiln. Can be broken by heavy impacts or by fist.",
    "keys": {
      "ClassName": "@roblox/globaltype/Glass.ClassName"
    }
  },
  "@roblox/globaltype/Glass.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Gold": {
    "documentation": "A very valuable and stretchable material. Has a thermal conductivity less than copper, and higher than aluminum.",
    "keys": {
      "ClassName": "@roblox/globaltype/Gold.ClassName"
    }
  },
  "@roblox/globaltype/Gold.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Goo": {
    "documentation": "A sticky substance that binds things together like glue. The effect lasts for for two minutes, but it can be washed off with Water. It will also melt off at 95 °F.",
    "keys": {
      "ClassName": "@roblox/globaltype/Goo.ClassName"
    }
  },
  "@roblox/globaltype/Goo.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Grass": {
    "documentation": "An organic substance found in terra and forest planets. Often green, but can be other colors. Useful for planting seeds for agriculture.",
    "keys": {
      "ClassName": "@roblox/globaltype/Grass.ClassName"
    }
  },
  "@roblox/globaltype/Grass.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/GravityGenerator": {
    "documentation": "Generates an artificial gravity field when powered on. The gravity field only affects players, not individual parts. The amount of gravity can also be configureed, but the more gravity the higher amount of power needed. Only works in space, not inside planets.",
    "keys": {
      "ClassName": "@roblox/globaltype/GravityGenerator.ClassName",
      "Configure": "@roblox/globaltype/GravityGenerator.Configure",
      "Gravity": "@roblox/globaltype/GravityGenerator.Gravity",
      "Loop": "@roblox/globaltype/GravityGenerator.Loop"
    }
  },
  "@roblox/globaltype/GravityGenerator.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/GravityGenerator.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/GravityGenerator.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/GravityGenerator.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/GravityGenerator.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/GravityGenerator.Gravity": {
    "documentation": "The amount of gravity within the influence of the GravityGenerator, measured in Gs."
  },
  "@roblox/globaltype/GravityGenerator.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/GravityGeneratorConfiguration": {
    "documentation": "The configuration of the <code>GravityGenerator</code> object.",
    "keys": {
      "Gravity": "@roblox/globaltype/GravityGeneratorConfiguration.Gravity"
    }
  },
  "@roblox/globaltype/GravityGeneratorConfiguration.Gravity": {
    "documentation": "The amount of gravity within the influence of the GravityGenerator, measured in Gs."
  },
  "@roblox/globaltype/Gun": {
    "documentation": "Fires a harmful bullet when triggered.\nMust be supplied with ammo in order to function.\nFor example, you need an iron bin with 1 or more iron directly attached to it to work.",
    "keys": {
      "ClassName": "@roblox/globaltype/Gun.ClassName"
    }
  },
  "@roblox/globaltype/Gun.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Gyro": {
    "documentation": "Stabilizes vehicles and structures by pointing upwards. Useful for mechs or orientating structures to the correct rotation. Has a maximum range of 75000 studss. The gyro can also be configured to seek objects and players.\n\nWhen powered, the gyro will follow its seek commands that can be configured using hammer.\nThe gyro has commands that allow it to find and seek objects and players.\n\nAn example of gyro's seek configuration includes \"Player1 Player2\" which will seek and aim towards the nearest player.\n\nPutting \"Radar\" at the beginning of the seek configuration will make it target parts instead. For example, \"Radar Gold Copper\" will find the nearest Gold or Copper deposit.\n\nPutting \"AllExcept\" will make the seeker target everything except the given list, basically inverting it. For example, \"AllExcept Player1 Player2\" will target \"Player3\" or \"Player\"4 but not \"Player1\".\n\nThe commands \"Min\" and \"Max\" set the minimum or maximum distance the seeker will target. For example, \"Min20 Max500\" will make the seeker only target objects within 500 studs and more than 20 studs away.\n\nTriggerWhenSeeked will trigger all connected parts every second when the Seek configurable is satisfied\n\n\"TrigMin\" and \"TrigMax\" work the same as \"Min\" and \"Max\" but it's for the trigger signal, trigger signal will only be sent if the above property is true.\n\nExceptOwnedBy accepts a list with no spaces, targeting parts that are NOT owned by the people in the supplied list.\n\nPutting \"Sun\" as part of the list will make the seeker automatically target the main stellar body in the system.\n\nGyros also have a property called MaxTorque. This allows you to control the max force on the gyro to stabilize it.",
    "keys": {
      "ClassName": "@roblox/globaltype/Gyro.ClassName",
      "Configure": "@roblox/globaltype/Gyro.Configure",
      "Configured": "@roblox/globaltype/Gyro.Configured",
      "DisableWhenUnpowered": "@roblox/globaltype/Gyro.DisableWhenUnpowered",
      "Loop": "@roblox/globaltype/Gyro.Loop",
      "MaxTorque": "@roblox/globaltype/Gyro.MaxTorque",
      "PointAlong": "@roblox/globaltype/Gyro.PointAlong",
      "PointAt": "@roblox/globaltype/Gyro.PointAt",
      "Seek": "@roblox/globaltype/Gyro.Seek",
      "TriggerWhenSeeked": "@roblox/globaltype/Gyro.TriggerWhenSeeked"
    }
  },
  "@roblox/globaltype/Gyro.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Gyro.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Gyro.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Gyro.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Gyro.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Gyro.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Gyro.DisableWhenUnpowered": {
    "documentation": "Determines whether this gyro should be disabled while it does not have power."
  },
  "@roblox/globaltype/Gyro.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Gyro.MaxTorque": {
    "documentation": "The maximum force in each axis the gyro can exert."
  },
  "@roblox/globaltype/Gyro.PointAlong": {
    "documentation": "Points the gyro along the specified vector. Pass <code>nil</code> or configure the gyro to stop pointing.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Gyro.PointAlong",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Gyro.PointAlong/params/1",
        "name": "direction"
      },
      {
        "documentation": "@roblox/globaltype/Gyro.PointAlong/params/2",
        "name": "up"
      }
    ]
  },
  "@roblox/globaltype/Gyro.PointAlong/params/1": {
    "documentation": "The vector for the gyro to point along."
  },
  "@roblox/globaltype/Gyro.PointAlong/params/2": {
    "documentation": "The <code>UpVector</code> of the gyro with a default of <code>(0, 1, 0)</code>."
  },
  "@roblox/globaltype/Gyro.PointAt": {
    "documentation": "Points the gyro towards the specified position. Pass <code>nil</code> or configure the gyro to stop pointing.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Gyro.PointAt",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Gyro.PointAt/params/1",
        "name": "position"
      },
      {
        "documentation": "@roblox/globaltype/Gyro.PointAt/params/2",
        "name": "up"
      }
    ]
  },
  "@roblox/globaltype/Gyro.PointAt/params/1": {
    "documentation": "The position for the gyro to look at."
  },
  "@roblox/globaltype/Gyro.PointAt/params/2": {
    "documentation": "The <code>UpVector</code> of the gyro with a default of <code>(0, 1, 0)</code>."
  },
  "@roblox/globaltype/Gyro.Seek": {
    "documentation": "The seek commands."
  },
  "@roblox/globaltype/Gyro.TriggerWhenSeeked": {
    "documentation": "Determines whether to send out a trigger signal when the gyro detects something to seek as determined by the Seek configurable."
  },
  "@roblox/globaltype/GyroConfiguration": {
    "documentation": "The configuration of the <code>Gyro</code> object.",
    "keys": {
      "DisableWhenUnpowered": "@roblox/globaltype/GyroConfiguration.DisableWhenUnpowered",
      "MaxTorque": "@roblox/globaltype/GyroConfiguration.MaxTorque",
      "Seek": "@roblox/globaltype/GyroConfiguration.Seek",
      "TriggerWhenSeeked": "@roblox/globaltype/GyroConfiguration.TriggerWhenSeeked"
    }
  },
  "@roblox/globaltype/GyroConfiguration.DisableWhenUnpowered": {
    "documentation": "Determines whether this gyro should be disabled while it does not have power."
  },
  "@roblox/globaltype/GyroConfiguration.MaxTorque": {
    "documentation": "The maximum force in each axis the gyro can exert."
  },
  "@roblox/globaltype/GyroConfiguration.Seek": {
    "documentation": "The seek commands."
  },
  "@roblox/globaltype/GyroConfiguration.TriggerWhenSeeked": {
    "documentation": "Determines whether to send out a trigger signal when the gyro detects something to seek as determined by the Seek configurable."
  },
  "@roblox/globaltype/HalfSphere": {
    "documentation": "A half sphere shaped template object.",
    "keys": {
      "ClassName": "@roblox/globaltype/HalfSphere.ClassName"
    }
  },
  "@roblox/globaltype/HalfSphere.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Handle": {
    "documentation": "A handle which can be equipped when a player touches it, turning all connected parts into an equipable tool.",
    "keys": {
      "ClassName": "@roblox/globaltype/Handle.ClassName",
      "Configure": "@roblox/globaltype/Handle.Configure",
      "Swing": "@roblox/globaltype/Handle.Swing",
      "ToolName": "@roblox/globaltype/Handle.ToolName",
      "TriggerMode": "@roblox/globaltype/Handle.TriggerMode"
    }
  },
  "@roblox/globaltype/Handle.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Handle.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Handle.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Handle.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Handle.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Handle.Swing": {
    "documentation": "What the tool should do when clicking. Point mode will aim the handle at the mouse cursor."
  },
  "@roblox/globaltype/Handle.ToolName": {
    "documentation": "The name of the tool."
  },
  "@roblox/globaltype/Handle.TriggerMode": {
    "documentation": "Determines when this Handle should send trigger signals."
  },
  "@roblox/globaltype/HandleConfiguration": {
    "documentation": "The configuration of the <code>Handle</code> object.",
    "keys": {
      "Swing": "@roblox/globaltype/HandleConfiguration.Swing",
      "ToolName": "@roblox/globaltype/HandleConfiguration.ToolName",
      "TriggerMode": "@roblox/globaltype/HandleConfiguration.TriggerMode"
    }
  },
  "@roblox/globaltype/HandleConfiguration.Swing": {
    "documentation": "What the tool should do when clicking. Point mode will aim the handle at the mouse cursor."
  },
  "@roblox/globaltype/HandleConfiguration.ToolName": {
    "documentation": "The name of the tool."
  },
  "@roblox/globaltype/HandleConfiguration.TriggerMode": {
    "documentation": "Determines when this Handle should send trigger signals."
  },
  "@roblox/globaltype/HandleSwingMode": {
    "documentation": "The mode of the handle swing, used in the <code>Handle</code> part."
  },
  "@roblox/globaltype/HandleTriggerMode": {
    "documentation": "The mode of the handle trigger, used in the <code>Handle</code> part."
  },
  "@roblox/globaltype/Hatch": {
    "documentation": "Acts as a chute when active/gray, but when black or inactive it acts as a normal object.",
    "keys": {
      "ClassName": "@roblox/globaltype/Hatch.ClassName",
      "Configure": "@roblox/globaltype/Hatch.Configure",
      "Configured": "@roblox/globaltype/Hatch.Configured",
      "OnClick": "@roblox/globaltype/Hatch.OnClick",
      "SwitchValue": "@roblox/globaltype/Hatch.SwitchValue"
    }
  },
  "@roblox/globaltype/Hatch.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Hatch.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Hatch.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Hatch.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Hatch.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Hatch.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Hatch.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/Hatch.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/HatchConfiguration": {
    "documentation": "The configuration of the <code>Hatch</code> object.",
    "keys": {
      "SwitchValue": "@roblox/globaltype/HatchConfiguration.SwitchValue"
    }
  },
  "@roblox/globaltype/HatchConfiguration.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/HeatCell": {
    "documentation": "Legacy test item. Stores heat energy.\nHas a limit of 400 kJ.",
    "keys": {
      "ClassName": "@roblox/globaltype/HeatCell.ClassName",
      "ContainerChanged": "@roblox/globaltype/HeatCell.ContainerChanged",
      "GetAmount": "@roblox/globaltype/HeatCell.GetAmount",
      "GetResource": "@roblox/globaltype/HeatCell.GetResource",
      "GetResourceAmount": "@roblox/globaltype/HeatCell.GetResourceAmount"
    }
  },
  "@roblox/globaltype/HeatCell.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/HeatCell.ContainerChanged": {
    "documentation": "Fires when the amount of the resource in the container changes."
  },
  "@roblox/globaltype/HeatCell.GetAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/HeatCell.GetAmount/returns/0"
    ]
  },
  "@roblox/globaltype/HeatCell.GetAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/HeatCell.GetResource": {
    "documentation": "Gets the name of the resource contained, will return the <i>string</i> <code>\"nil\"</code> if nothing is stored, rather than <i>actually</i> returning <code>nil</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/HeatCell.GetResource/returns/0"
    ]
  },
  "@roblox/globaltype/HeatCell.GetResource/returns/0": {},
  "@roblox/globaltype/HeatCell.GetResourceAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/HeatCell.GetResourceAmount/returns/0"
    ]
  },
  "@roblox/globaltype/HeatCell.GetResourceAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/HeatPipe": {
    "documentation": "Allows for the transfer of heat. Use a HeatPump to direct the heat.",
    "keys": {
      "ClassName": "@roblox/globaltype/HeatPipe.ClassName"
    }
  },
  "@roblox/globaltype/HeatPipe.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/HeatPump": {
    "documentation": "Pumps Heat between two points. Pumps a maximum of <b>4 MW</b> of heat energy.",
    "keys": {
      "ClassName": "@roblox/globaltype/HeatPump.ClassName",
      "Configure": "@roblox/globaltype/HeatPump.Configure",
      "Loop": "@roblox/globaltype/HeatPump.Loop",
      "TransferRate": "@roblox/globaltype/HeatPump.TransferRate"
    }
  },
  "@roblox/globaltype/HeatPump.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/HeatPump.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/HeatPump.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/HeatPump.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/HeatPump.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/HeatPump.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/HeatPump.TransferRate": {
    "documentation": "How many kW of heat energy to pump."
  },
  "@roblox/globaltype/HeatPumpConfiguration": {
    "documentation": "The configuration of the <code>HeatPump</code> object.",
    "keys": {
      "TransferRate": "@roblox/globaltype/HeatPumpConfiguration.TransferRate"
    }
  },
  "@roblox/globaltype/HeatPumpConfiguration.TransferRate": {
    "documentation": "How many kW of heat energy to pump."
  },
  "@roblox/globaltype/HeatSink": {
    "documentation": "LEGACY. Reduces the air temperature by <b>10 °F</b> (Produces <b>13.018197023481843 kW</b> of heat energy).",
    "keys": {
      "ClassName": "@roblox/globaltype/HeatSink.ClassName"
    }
  },
  "@roblox/globaltype/HeatSink.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/HeatValve": {
    "documentation": "Acts as a HeatPipe when active/red, but when black or inactive it acts as a normal object.",
    "keys": {
      "ClassName": "@roblox/globaltype/HeatValve.ClassName",
      "Configure": "@roblox/globaltype/HeatValve.Configure",
      "Configured": "@roblox/globaltype/HeatValve.Configured",
      "OnClick": "@roblox/globaltype/HeatValve.OnClick",
      "SwitchValue": "@roblox/globaltype/HeatValve.SwitchValue"
    }
  },
  "@roblox/globaltype/HeatValve.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/HeatValve.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/HeatValve.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/HeatValve.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/HeatValve.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/HeatValve.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/HeatValve.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/HeatValve.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/HeatValveConfiguration": {
    "documentation": "The configuration of the <code>HeatValve</code> object.",
    "keys": {
      "SwitchValue": "@roblox/globaltype/HeatValveConfiguration.SwitchValue"
    }
  },
  "@roblox/globaltype/HeatValveConfiguration.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/Heater": {
    "documentation": "Heats the air to `60 + volume / 16 * 10`°F.",
    "keys": {
      "ClassName": "@roblox/globaltype/Heater.ClassName"
    }
  },
  "@roblox/globaltype/Heater.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Heatshield": {
    "documentation": "Generates a 300 stud radius area that protects all players and <b>only players</b> within the vicinity from temperature damage.",
    "keys": {
      "ClassName": "@roblox/globaltype/Heatshield.ClassName"
    }
  },
  "@roblox/globaltype/Heatshield.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Helium": {
    "documentation": "A light invisible odorless gas, floats up.",
    "keys": {
      "ClassName": "@roblox/globaltype/Helium.ClassName"
    }
  },
  "@roblox/globaltype/Helium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Hologram": {
    "documentation": "Using our brand new Multi-Dimensional Holographic Projection Technology™ you are able to create a stationary clone with only the ID of the user provided!.",
    "keys": {
      "ClassName": "@roblox/globaltype/Hologram.ClassName",
      "Configure": "@roblox/globaltype/Hologram.Configure",
      "Configured": "@roblox/globaltype/Hologram.Configured",
      "UserId": "@roblox/globaltype/Hologram.UserId"
    }
  },
  "@roblox/globaltype/Hologram.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Hologram.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Hologram.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Hologram.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Hologram.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Hologram.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Hologram.UserId": {
    "documentation": "The UserId of the player for the Hologram to display."
  },
  "@roblox/globaltype/HologramConfiguration": {
    "documentation": "The configuration of the <code>Hologram</code> object.",
    "keys": {
      "UserId": "@roblox/globaltype/HologramConfiguration.UserId"
    }
  },
  "@roblox/globaltype/HologramConfiguration.UserId": {
    "documentation": "The UserId of the player for the Hologram to display."
  },
  "@roblox/globaltype/Hotdog": {
    "documentation": "sandwich.",
    "keys": {
      "ClassName": "@roblox/globaltype/Hotdog.ClassName"
    }
  },
  "@roblox/globaltype/Hotdog.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Hull": {
    "documentation": "A legacy pre-component part. Is able to float in the water, as well as carry objects attached to it. Primarily used for creating boats and other water craft.",
    "keys": {
      "ClassName": "@roblox/globaltype/Hull.ClassName",
      "ComponentsUpdated": "@roblox/globaltype/Hull.ComponentsUpdated"
    }
  },
  "@roblox/globaltype/Hull.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Hull.ComponentsUpdated": {
    "documentation": "This event never seems to fire, only tested on the deprecated <code>Blade</code> part, though."
  },
  "@roblox/globaltype/Hydrogen": {
    "documentation": "A gas commonly found in stars and gas giants.",
    "keys": {
      "ClassName": "@roblox/globaltype/Hydrogen.ClassName"
    }
  },
  "@roblox/globaltype/Hydrogen.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Hydroponic": {
    "documentation": "Grows grass and wood from water, turning attached water bins into either wood, sticks or grass. Incredibly useful for space bases or bases in areas devoid of life.",
    "keys": {
      "ClassName": "@roblox/globaltype/Hydroponic.ClassName",
      "Configure": "@roblox/globaltype/Hydroponic.Configure",
      "Grow": "@roblox/globaltype/Hydroponic.Grow",
      "Loop": "@roblox/globaltype/Hydroponic.Loop"
    }
  },
  "@roblox/globaltype/Hydroponic.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Hydroponic.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Hydroponic.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Hydroponic.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Hydroponic.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Hydroponic.Grow": {
    "documentation": "The material to grow from the Hydroponic."
  },
  "@roblox/globaltype/Hydroponic.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/HydroponicConfiguration": {
    "documentation": "The configuration of the <code>Hydroponic</code> object.",
    "keys": {
      "Grow": "@roblox/globaltype/HydroponicConfiguration.Grow"
    }
  },
  "@roblox/globaltype/HydroponicConfiguration.Grow": {
    "documentation": "The material to grow from the Hydroponic."
  },
  "@roblox/globaltype/HyperDrive": {
    "documentation": "A device used to travel at faster than light speeds to other regions of the universe.\n\nSimply input the coordinates to your destination and have a sufficient amount of fuel, and you'll be on your way to your destination.\nTo initiate warping, power the hyperdrive and trigger it. When warping, the hyperdrive will be anchored to prevent any movement.\n\nThe power required for warping will be dependent on the distance travelled, as well as the size of the object being transported.\nThe amount of power required will be displayed in the hyper drive, shown in the red text.\n\nAll of the parts connected to the hyperdrive and every player sitting will be teleported, however any free floating parts or standing up players will be sucked into the vaccum of space, so be careful.\nMake sure the numbers on the hyperdrive is facing up to ensure correct stud alignment.",
    "keys": {
      "ClassName": "@roblox/globaltype/HyperDrive.ClassName",
      "Configure": "@roblox/globaltype/HyperDrive.Configure",
      "Configured": "@roblox/globaltype/HyperDrive.Configured",
      "Coordinates": "@roblox/globaltype/HyperDrive.Coordinates",
      "GetRequiredPower": "@roblox/globaltype/HyperDrive.GetRequiredPower",
      "Triggered": "@roblox/globaltype/HyperDrive.Triggered"
    }
  },
  "@roblox/globaltype/HyperDrive.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/HyperDrive.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/HyperDrive.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/HyperDrive.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/HyperDrive.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/HyperDrive.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/HyperDrive.Coordinates": {
    "documentation": "The coordinates to warp to."
  },
  "@roblox/globaltype/HyperDrive.GetRequiredPower": {
    "documentation": "Returns the amount of power required for the warp.",
    "params": []
  },
  "@roblox/globaltype/HyperDrive.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/HyperDriveConfiguration": {
    "documentation": "The configuration of the <code>HyperDrive</code> object.",
    "keys": {
      "Coordinates": "@roblox/globaltype/HyperDriveConfiguration.Coordinates"
    }
  },
  "@roblox/globaltype/HyperDriveConfiguration.Coordinates": {
    "documentation": "The coordinates to warp to."
  },
  "@roblox/globaltype/HyperspaceRadar": {
    "documentation": "A device that images areas of hyperspace, allowing one to view hyperspace disturbances and track where HyperDrives have warped.",
    "keys": {
      "ClassName": "@roblox/globaltype/HyperspaceRadar.ClassName",
      "Configure": "@roblox/globaltype/HyperspaceRadar.Configure",
      "ViewCoordinates": "@roblox/globaltype/HyperspaceRadar.ViewCoordinates"
    }
  },
  "@roblox/globaltype/HyperspaceRadar.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/HyperspaceRadar.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/HyperspaceRadar.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/HyperspaceRadar.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/HyperspaceRadar.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/HyperspaceRadar.ViewCoordinates": {
    "documentation": "The coordinates to view."
  },
  "@roblox/globaltype/HyperspaceRadarConfiguration": {
    "documentation": "The configuration of the <code>HyperspaceRadar</code> object.",
    "keys": {
      "ViewCoordinates": "@roblox/globaltype/HyperspaceRadarConfiguration.ViewCoordinates"
    }
  },
  "@roblox/globaltype/HyperspaceRadarConfiguration.ViewCoordinates": {
    "documentation": "The coordinates to view."
  },
  "@roblox/globaltype/Ice": {
    "documentation": "A compact natural resource found in tundra planets and the top of a few mountains. It is a slippery material, and has very low friction which can be useful in some devices.",
    "keys": {
      "ClassName": "@roblox/globaltype/Ice.ClassName"
    }
  },
  "@roblox/globaltype/Ice.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Igniter": {
    "documentation": "Sets alight unlocked parts within the immediate vicinity when triggered. Range depends on the size.",
    "keys": {
      "ClassName": "@roblox/globaltype/Igniter.ClassName",
      "Triggered": "@roblox/globaltype/Igniter.Triggered"
    }
  },
  "@roblox/globaltype/Igniter.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Igniter.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/ImpactPlate": {
    "documentation": "EXPERIMENTAL - Distributes the damage it takes between itself and parts attached to its top surface, with higher health parts absorbing the most damage.\n<b>25%</b> resistance to kinetic damage (guns, blades, cannons, explosions).\nCannot be chained with other <code>ImpactPlate</code>s.",
    "keys": {
      "ClassName": "@roblox/globaltype/ImpactPlate.ClassName"
    }
  },
  "@roblox/globaltype/ImpactPlate.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/ImpulseCannon": {
    "documentation": "Blasts a harmless burst of energy which sends anything nearby soaring at a high velocity.",
    "keys": {
      "ClassName": "@roblox/globaltype/ImpulseCannon.ClassName"
    }
  },
  "@roblox/globaltype/ImpulseCannon.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Instrument": {
    "documentation": "A part that measures information about the world.\n\nYou can set it to measure one of:\n- <code>Power</code> is the total amount of power connected to the instrument.\n- <code>Position</code> is the position of the instrument in the world.\n- <code>Orientation</code> is the orientation of the instrument in the world.\n- <code>Size</code> is the size of the part attached to the instrument.\n- <code>Speed</code> is the speed of the instrument.\n- <code>AngularSpeed</code> is the angular speed of the instrument.\n- <code>Temperature</code> is the temperature of the instrument in Kelvin\n- <code>TemperatureF</code> is the temperature of the instrument in Fahrenheit.\n- <code>TemperatureC</code> is the temperature of the instrument in Celsius.\n- <code>AirTemperature</code> is the air temperature around the instrument in <code>Kelvin</code>.\n- <code>AirTemperatureF</code> is the air temperature around the instrument in <code>Fahrenheit</code>.\n- <code>AirTemperatureC</code> is the air temperature around the instrument in <code>Celsius</code>.\n- <code>Time</code> is the current region time.",
    "keys": {
      "ClassName": "@roblox/globaltype/Instrument.ClassName",
      "Configure": "@roblox/globaltype/Instrument.Configure",
      "GetReading": "@roblox/globaltype/Instrument.GetReading",
      "Loop": "@roblox/globaltype/Instrument.Loop",
      "Type": "@roblox/globaltype/Instrument.Type"
    }
  },
  "@roblox/globaltype/Instrument.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Instrument.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Instrument.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Instrument.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Instrument.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Instrument.GetReading": {
    "documentation": "Passing a number to <code>GetReading</code> is deprecated. Use the string name of the reading instead.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Instrument.GetReading",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Instrument.GetReading/params/1",
        "name": "type"
      }
    ],
    "returns": [
      "@roblox/globaltype/Instrument.GetReading/returns/0"
    ]
  },
  "@roblox/globaltype/Instrument.GetReading/params/1": {},
  "@roblox/globaltype/Instrument.GetReading/returns/0": {},
  "@roblox/globaltype/Instrument.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Instrument.Type": {
    "documentation": "The type of instrument readout to display on the instrument."
  },
  "@roblox/globaltype/InstrumentConfiguration": {
    "documentation": "The configuration of the <code>Instrument</code> object.",
    "keys": {
      "Type": "@roblox/globaltype/InstrumentConfiguration.Type"
    }
  },
  "@roblox/globaltype/InstrumentConfiguration.Type": {
    "documentation": "The type of instrument readout to display on the instrument."
  },
  "@roblox/globaltype/InstrumentType": {
    "documentation": "The type of instrument reading desired, used in the <code>Instrument</code> part."
  },
  "@roblox/globaltype/Insulation": {
    "documentation": "A flammable material with a low thermal conductivity.",
    "keys": {
      "ClassName": "@roblox/globaltype/Insulation.ClassName"
    }
  },
  "@roblox/globaltype/Insulation.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/IonRocket": {
    "documentation": "A simple, fast propulsion device which consumes power to produce thrust. Moves in the direction of the arrow.\nCan travel up to 100s/s at maximum propulsion.",
    "keys": {
      "ClassName": "@roblox/globaltype/IonRocket.ClassName",
      "Configure": "@roblox/globaltype/IonRocket.Configure",
      "Configured": "@roblox/globaltype/IonRocket.Configured",
      "Propulsion": "@roblox/globaltype/IonRocket.Propulsion"
    }
  },
  "@roblox/globaltype/IonRocket.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/IonRocket.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/IonRocket.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/IonRocket.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/IonRocket.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/IonRocket.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/IonRocket.Propulsion": {
    "documentation": "Determines the speed traveled at, 0 being standstill. Affects fuel consumption."
  },
  "@roblox/globaltype/IonRocketConfiguration": {
    "documentation": "The configuration of the <code>IonRocket</code> object.",
    "keys": {
      "Propulsion": "@roblox/globaltype/IonRocketConfiguration.Propulsion"
    }
  },
  "@roblox/globaltype/IonRocketConfiguration.Propulsion": {
    "documentation": "Determines the speed traveled at, 0 being standstill. Affects fuel consumption."
  },
  "@roblox/globaltype/Iron": {
    "documentation": "A compact and durable material, commonly found in planets. It is used often in crafting, and is a very important resource to have. Has poor thermal conductivity compared to most metals.",
    "keys": {
      "ClassName": "@roblox/globaltype/Iron.ClassName"
    }
  },
  "@roblox/globaltype/Iron.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/JSON": {
    "documentation": "A full JSON value, can be a string, number, boolean, buffer, a JSON array, or another JSON dictionary."
  },
  "@roblox/globaltype/JSONValue": {
    "documentation": "An individual JSON value, can be a string, number, boolean, buffer."
  },
  "@roblox/globaltype/Jade": {
    "documentation": "Reduces damage taken by 1.5 to a minimum of 0.2, but takes 25% additional damage.",
    "keys": {
      "ClassName": "@roblox/globaltype/Jade.ClassName"
    }
  },
  "@roblox/globaltype/Jade.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Katana": {
    "documentation": "A weeaboo sword used to cut down your enemies.",
    "keys": {
      "ClassName": "@roblox/globaltype/Katana.ClassName"
    }
  },
  "@roblox/globaltype/Katana.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Keyboard": {
    "documentation": "Similar to a button, except is programmable to take more than one key input.\nCan be attached to a vehicle seat or clicked by a player.",
    "keys": {
      "ClassName": "@roblox/globaltype/Keyboard.ClassName",
      "KeyPressed": "@roblox/globaltype/Keyboard.KeyPressed",
      "SimulateKeyPress": "@roblox/globaltype/Keyboard.SimulateKeyPress",
      "SimulateTextInput": "@roblox/globaltype/Keyboard.SimulateTextInput",
      "SimulateUserInput": "@roblox/globaltype/Keyboard.SimulateUserInput",
      "TextInputted": "@roblox/globaltype/Keyboard.TextInputted",
      "UserInput": "@roblox/globaltype/Keyboard.UserInput"
    }
  },
  "@roblox/globaltype/Keyboard.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Keyboard.KeyPressed": {
    "documentation": "Fires when the user presses a key."
  },
  "@roblox/globaltype/Keyboard.SimulateKeyPress": {
    "documentation": "Simulates a key press just like you would press a key on the keyboard.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Keyboard.SimulateKeyPress",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Keyboard.SimulateKeyPress/params/1",
        "name": "key"
      },
      {
        "documentation": "@roblox/globaltype/Keyboard.SimulateKeyPress/params/2",
        "name": "player"
      }
    ]
  },
  "@roblox/globaltype/Keyboard.SimulateKeyPress/params/1": {},
  "@roblox/globaltype/Keyboard.SimulateKeyPress/params/2": {},
  "@roblox/globaltype/Keyboard.SimulateTextInput": {
    "documentation": "Simulates text input just like you would type in the keyboard and enter. This fires the <code>TextInputted</code> event.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Keyboard.SimulateTextInput",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Keyboard.SimulateTextInput/params/1",
        "name": "input"
      },
      {
        "documentation": "@roblox/globaltype/Keyboard.SimulateTextInput/params/2",
        "name": "player"
      }
    ]
  },
  "@roblox/globaltype/Keyboard.SimulateTextInput/params/1": {},
  "@roblox/globaltype/Keyboard.SimulateTextInput/params/2": {},
  "@roblox/globaltype/Keyboard.SimulateUserInput": {
    "params": []
  },
  "@roblox/globaltype/Keyboard.TextInputted": {
    "documentation": "Fires when a player finishes typing into the keyboard. Note that a newline will\nbe present wherever the cursor of the player was when they pressed enter (generally\nthe end, but if they moved their cursor whilst typing, it may be in the middle\nof the text)."
  },
  "@roblox/globaltype/Keyboard.UserInput": {
    "documentation": "Will fire when a user presses a key, it is already filtered to <code>gameProcessedEvent</code> being false."
  },
  "@roblox/globaltype/Kiln": {
    "documentation": "Turns attached sand bins into glass.",
    "keys": {
      "ClassName": "@roblox/globaltype/Kiln.ClassName",
      "Loop": "@roblox/globaltype/Kiln.Loop"
    }
  },
  "@roblox/globaltype/Kiln.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Kiln.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Lantern": {
    "documentation": "A handheld lantern which can be used to provide light.",
    "keys": {
      "ClassName": "@roblox/globaltype/Lantern.ClassName"
    }
  },
  "@roblox/globaltype/Lantern.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Laser": {
    "documentation": "Fires a concentraded beam of energy when powered, which can be used to damage and set objects on fire.\nHas a Range of 1000 studs.\nPrimarily used as a weapon in space combat situations.\nWhile it can damage objects effectively, it cannot damage energy shields.",
    "keys": {
      "ClassName": "@roblox/globaltype/Laser.ClassName",
      "Configure": "@roblox/globaltype/Laser.Configure",
      "DamageOnlyPlayers": "@roblox/globaltype/Laser.DamageOnlyPlayers",
      "Loop": "@roblox/globaltype/Laser.Loop"
    }
  },
  "@roblox/globaltype/Laser.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Laser.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Laser.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Laser.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Laser.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Laser.DamageOnlyPlayers": {
    "documentation": "Determines if this laser is only allowed to damage players and not materials."
  },
  "@roblox/globaltype/Laser.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/LaserConfiguration": {
    "documentation": "The configuration of the <code>Laser</code> object.",
    "keys": {
      "DamageOnlyPlayers": "@roblox/globaltype/LaserConfiguration.DamageOnlyPlayers"
    }
  },
  "@roblox/globaltype/LaserConfiguration.DamageOnlyPlayers": {
    "documentation": "Determines if this laser is only allowed to damage players and not materials."
  },
  "@roblox/globaltype/Lava": {
    "documentation": "A liquid used for fueling many devices such as rockets and engines.",
    "keys": {
      "ClassName": "@roblox/globaltype/Lava.ClassName"
    }
  },
  "@roblox/globaltype/Lava.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Lead": {
    "documentation": "An uncommon material used in protection against radiation and weapon manufacturing. Has one of the lowest thermal conductivities of all elemental metals in the game, next to Titanium.",
    "keys": {
      "ClassName": "@roblox/globaltype/Lead.ClassName"
    }
  },
  "@roblox/globaltype/Lead.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/LifeSensor": {
    "documentation": "Senses and detects organic life up to a distance of 2000 studs. It only has a purpose within programming.\nIt is used in alien technology to hunt down organisms such as players.",
    "keys": {
      "ClassName": "@roblox/globaltype/LifeSensor.ClassName",
      "GetPlayers": "@roblox/globaltype/LifeSensor.GetPlayers",
      "GetReading": "@roblox/globaltype/LifeSensor.GetReading",
      "ListPlayers": "@roblox/globaltype/LifeSensor.ListPlayers"
    }
  },
  "@roblox/globaltype/LifeSensor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/LifeSensor.GetPlayers": {
    "documentation": "Returns a table where the keys are <i>player</i> <code>UserId</code>s and the values are <i>player</i> CFrames. Only has a 2,000 stud range.",
    "params": [],
    "returns": [
      "@roblox/globaltype/LifeSensor.GetPlayers/returns/0"
    ]
  },
  "@roblox/globaltype/LifeSensor.GetPlayers/returns/0": {
    "documentation": "A dictionary of player <code>UserId</code>s to their world CFrames."
  },
  "@roblox/globaltype/LifeSensor.GetReading": {
    "documentation": "Returns a table where the keys are <i>humanoid</i> names and the values are <i>humanoid</i> positions. Only has a 2,000 stud range.",
    "params": [],
    "returns": [
      "@roblox/globaltype/LifeSensor.GetReading/returns/0"
    ]
  },
  "@roblox/globaltype/LifeSensor.GetReading/returns/0": {
    "documentation": "A dictionary of humanoid names to their world positions."
  },
  "@roblox/globaltype/LifeSensor.ListPlayers": {
    "documentation": "Returns an array of player <code>UserId</code>s. Ignores the 2,000 stud range limit.",
    "params": [],
    "returns": [
      "@roblox/globaltype/LifeSensor.ListPlayers/returns/0"
    ]
  },
  "@roblox/globaltype/LifeSensor.ListPlayers/returns/0": {
    "documentation": "An array of player <code>UserId</code>s."
  },
  "@roblox/globaltype/Light": {
    "documentation": "Emits light when powered with electricity. Can be colored in different ways, changing the light color.",
    "keys": {
      "Brightness": "@roblox/globaltype/Light.Brightness",
      "ClassName": "@roblox/globaltype/Light.ClassName",
      "Configure": "@roblox/globaltype/Light.Configure",
      "Configured": "@roblox/globaltype/Light.Configured",
      "LightRange": "@roblox/globaltype/Light.LightRange",
      "SetColor": "@roblox/globaltype/Light.SetColor",
      "Shadows": "@roblox/globaltype/Light.Shadows"
    }
  },
  "@roblox/globaltype/Light.Brightness": {
    "documentation": "The brightness of the light."
  },
  "@roblox/globaltype/Light.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Light.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Light.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Light.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Light.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Light.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Light.LightRange": {
    "documentation": "The range of the light."
  },
  "@roblox/globaltype/Light.SetColor": {
    "documentation": "Sets the color of the object.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Light.SetColor",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Light.SetColor/params/1",
        "name": "color"
      }
    ]
  },
  "@roblox/globaltype/Light.SetColor/params/1": {
    "documentation": "The <code>Color3</code> of the color you want to set the object to."
  },
  "@roblox/globaltype/Light.Shadows": {
    "documentation": "Whether or not the light will cast shadows."
  },
  "@roblox/globaltype/LightBridge": {
    "documentation": "Fires a beam of solid light that can be walked on.",
    "keys": {
      "BeamColor": "@roblox/globaltype/LightBridge.BeamColor",
      "ClassName": "@roblox/globaltype/LightBridge.ClassName",
      "Configure": "@roblox/globaltype/LightBridge.Configure",
      "Configured": "@roblox/globaltype/LightBridge.Configured",
      "Loop": "@roblox/globaltype/LightBridge.Loop"
    }
  },
  "@roblox/globaltype/LightBridge.BeamColor": {
    "documentation": "The color of the bridge's beam."
  },
  "@roblox/globaltype/LightBridge.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/LightBridge.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/LightBridge.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/LightBridge.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/LightBridge.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/LightBridge.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/LightBridge.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/LightBridgeConfiguration": {
    "documentation": "The configuration of the <code>LightBridge</code> object.",
    "keys": {
      "BeamColor": "@roblox/globaltype/LightBridgeConfiguration.BeamColor"
    }
  },
  "@roblox/globaltype/LightBridgeConfiguration.BeamColor": {
    "documentation": "The color of the bridge's beam."
  },
  "@roblox/globaltype/LightConfiguration": {
    "documentation": "The configuration of the <code>Light</code> object.",
    "keys": {
      "Brightness": "@roblox/globaltype/LightConfiguration.Brightness",
      "LightRange": "@roblox/globaltype/LightConfiguration.LightRange",
      "Shadows": "@roblox/globaltype/LightConfiguration.Shadows"
    }
  },
  "@roblox/globaltype/LightConfiguration.Brightness": {
    "documentation": "The brightness of the light."
  },
  "@roblox/globaltype/LightConfiguration.LightRange": {
    "documentation": "The range of the light."
  },
  "@roblox/globaltype/LightConfiguration.Shadows": {
    "documentation": "Whether or not the light will cast shadows."
  },
  "@roblox/globaltype/LightTube": {
    "documentation": "Emits light when powered with electricity. Can be colored in different ways, changing the light color.",
    "keys": {
      "ClassName": "@roblox/globaltype/LightTube.ClassName",
      "SetColor": "@roblox/globaltype/LightTube.SetColor"
    }
  },
  "@roblox/globaltype/LightTube.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/LightTube.SetColor": {
    "documentation": "Sets the color of the object.",
    "params": [
      {
        "documentation": "@roblox/globaltype/LightTube.SetColor",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/LightTube.SetColor/params/1",
        "name": "color"
      }
    ]
  },
  "@roblox/globaltype/LightTube.SetColor/params/1": {
    "documentation": "The <code>Color3</code> of the color you want to set the object to."
  },
  "@roblox/globaltype/Magnesium": {
    "documentation": "A shiny gray solid that is flammable, randomly ignites when touching stone.",
    "keys": {
      "ClassName": "@roblox/globaltype/Magnesium.ClassName"
    }
  },
  "@roblox/globaltype/Magnesium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Mandrillium": {
    "documentation": "An ancient artifact left behind from an alternate reality.",
    "keys": {
      "ClassName": "@roblox/globaltype/Mandrillium.ClassName"
    }
  },
  "@roblox/globaltype/Mandrillium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Marble": {
    "documentation": "A compact, durable material. Primarily decorative.",
    "keys": {
      "ClassName": "@roblox/globaltype/Marble.ClassName"
    }
  },
  "@roblox/globaltype/Marble.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Melter": {
    "documentation": "Melts Ice into liquid Water by consuming Power.",
    "keys": {
      "ClassName": "@roblox/globaltype/Melter.ClassName",
      "Loop": "@roblox/globaltype/Melter.Loop"
    }
  },
  "@roblox/globaltype/Melter.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Melter.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/MethodData": {
    "keys": {
      "Arguments": "@roblox/globaltype/MethodData.Arguments",
      "Description": "@roblox/globaltype/MethodData.Description",
      "Name": "@roblox/globaltype/MethodData.Name",
      "Results": "@roblox/globaltype/MethodData.Results"
    }
  },
  "@roblox/globaltype/MethodData.Arguments": {
    "documentation": "The arguments that the method takes."
  },
  "@roblox/globaltype/MethodData.Description": {
    "documentation": "A description of the method."
  },
  "@roblox/globaltype/MethodData.Name": {
    "documentation": "The name of the method."
  },
  "@roblox/globaltype/MethodData.Results": {},
  "@roblox/globaltype/MethodParameter": {
    "keys": {
      "Description": "@roblox/globaltype/MethodParameter.Description",
      "Name": "@roblox/globaltype/MethodParameter.Name",
      "Type": "@roblox/globaltype/MethodParameter.Type"
    }
  },
  "@roblox/globaltype/MethodParameter.Description": {
    "documentation": "A description of the method parameter."
  },
  "@roblox/globaltype/MethodParameter.Name": {
    "documentation": "The name of the method parameter."
  },
  "@roblox/globaltype/MethodParameter.Type": {
    "documentation": "The type of the method parameter."
  },
  "@roblox/globaltype/Microcontroller": {
    "documentation": "Runs limited Roblox luau code in an environment called \"pilot.lua\".\nTriggering it with a polysillicon will either start, stop, or restart (FlipFlop mode) your code.\nYou can also click it to turn it on/off.\n\nMicrocontrollers consume power depending on the amount of CPU time you use, which is the number of milliseconds your code spends doing stuff.\nPauses and waits don't count towards your CPU time since they allow the game to continue on to go do other work.\nOne CPU unit costs 1 units of power.\nIf you don't have enough power your Microcontroller will pause.\n\nYour code has a CPU limit, it can only spend up to 100 milliseconds every game tick. If you go over this limit it will pause until the next game tick.\n\nYou can press F9 to view WoS's client-side output. Any logs or errors from your Microcontrollers will appear there.\n\nIf you want to know about various globals you can use from Roblox's engine, you can take a look at Roblox's Developer Documentation and search for Roblox Globals and Lua Globals.\nFor more info, check the game's wiki, or look at one of the game's social platforms if it's linked at the bottom of the game page.",
    "keys": {
      "ClassName": "@roblox/globaltype/Microcontroller.ClassName",
      "Code": "@roblox/globaltype/Microcontroller.Code",
      "Configure": "@roblox/globaltype/Microcontroller.Configure",
      "Loop": "@roblox/globaltype/Microcontroller.Loop",
      "OnClick": "@roblox/globaltype/Microcontroller.OnClick",
      "Receive": "@roblox/globaltype/Microcontroller.Receive",
      "Send": "@roblox/globaltype/Microcontroller.Send",
      "Shutdown": "@roblox/globaltype/Microcontroller.Shutdown",
      "StartOnSpawn": "@roblox/globaltype/Microcontroller.StartOnSpawn"
    }
  },
  "@roblox/globaltype/Microcontroller.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Microcontroller.Code": {
    "documentation": "The code to be executed on this microcontroller."
  },
  "@roblox/globaltype/Microcontroller.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Microcontroller.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Microcontroller.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Microcontroller.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Microcontroller.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Microcontroller.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/Microcontroller.Receive": {
    "documentation": "Waits for data to be received.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Microcontroller.Receive/returns/0",
      "@roblox/globaltype/Microcontroller.Receive/returns/1"
    ]
  },
  "@roblox/globaltype/Microcontroller.Receive/returns/0": {
    "documentation": "The microcontroller sending the data."
  },
  "@roblox/globaltype/Microcontroller.Receive/returns/1": {
    "documentation": "The parameters sent through by the other microcontroller."
  },
  "@roblox/globaltype/Microcontroller.Send": {
    "documentation": "Sends the data you provide to a remote microcontroller. Parts you pass will be based on your microcontroller's context.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Microcontroller.Send",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Microcontroller.Send/params/1",
        "name": "..."
      }
    ]
  },
  "@roblox/globaltype/Microcontroller.Send/params/1": {
    "documentation": "The parameters to send to the other microcontroller."
  },
  "@roblox/globaltype/Microcontroller.Shutdown": {
    "documentation": "Kills the microcontroller.",
    "params": []
  },
  "@roblox/globaltype/Microcontroller.StartOnSpawn": {
    "documentation": "Whether or not to start the Microcontroller when it spawns."
  },
  "@roblox/globaltype/MicrocontrollerConfiguration": {
    "documentation": "The configuration of the <code>Microcontroller</code> object.",
    "keys": {
      "Code": "@roblox/globaltype/MicrocontrollerConfiguration.Code",
      "StartOnSpawn": "@roblox/globaltype/MicrocontrollerConfiguration.StartOnSpawn"
    }
  },
  "@roblox/globaltype/MicrocontrollerConfiguration.Code": {
    "documentation": "The code to be executed on this microcontroller."
  },
  "@roblox/globaltype/MicrocontrollerConfiguration.StartOnSpawn": {
    "documentation": "Whether or not to start the Microcontroller when it spawns."
  },
  "@roblox/globaltype/Microphone": {
    "documentation": "Used in programming. Takes user's input from chat.",
    "keys": {
      "Chatted": "@roblox/globaltype/Microphone.Chatted",
      "ClassName": "@roblox/globaltype/Microphone.ClassName"
    }
  },
  "@roblox/globaltype/Microphone.Chatted": {
    "documentation": "Fires when a player sends a message in the chat."
  },
  "@roblox/globaltype/Microphone.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/MiningLaser": {
    "documentation": "Fires a beam at resource deposits that will mine them just like an Extractor can, allowing for mining while mobile.\nThe MiningLaser produces 2x the resources, but costs 5x more power to run.",
    "keys": {
      "ClassName": "@roblox/globaltype/MiningLaser.ClassName",
      "Configure": "@roblox/globaltype/MiningLaser.Configure",
      "Loop": "@roblox/globaltype/MiningLaser.Loop",
      "MaterialToExtract": "@roblox/globaltype/MiningLaser.MaterialToExtract"
    }
  },
  "@roblox/globaltype/MiningLaser.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/MiningLaser.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/MiningLaser.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/MiningLaser.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/MiningLaser.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/MiningLaser.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/MiningLaser.MaterialToExtract": {
    "documentation": "Determines the material to extract from the laser beam. Disables the laser if blank."
  },
  "@roblox/globaltype/MiningLaserConfiguration": {
    "documentation": "The configuration of the <code>MiningLaser</code> object.",
    "keys": {
      "MaterialToExtract": "@roblox/globaltype/MiningLaserConfiguration.MaterialToExtract"
    }
  },
  "@roblox/globaltype/MiningLaserConfiguration.MaterialToExtract": {
    "documentation": "Determines the material to extract from the laser beam. Disables the laser if blank."
  },
  "@roblox/globaltype/Modem": {
    "documentation": "A part that allows you to send messages cross-region and make HTTP requests to the web.",
    "keys": {
      "ClassName": "@roblox/globaltype/Modem.ClassName",
      "Configure": "@roblox/globaltype/Modem.Configure",
      "GetAsync": "@roblox/globaltype/Modem.GetAsync",
      "GetRequest": "@roblox/globaltype/Modem.GetRequest",
      "Loop": "@roblox/globaltype/Modem.Loop",
      "MessageSent": "@roblox/globaltype/Modem.MessageSent",
      "NetworkID": "@roblox/globaltype/Modem.NetworkID",
      "PostAsync": "@roblox/globaltype/Modem.PostAsync",
      "PostRequest": "@roblox/globaltype/Modem.PostRequest",
      "RealPostRequest": "@roblox/globaltype/Modem.RealPostRequest",
      "RequestAsync": "@roblox/globaltype/Modem.RequestAsync",
      "SendLocalMessage": "@roblox/globaltype/Modem.SendLocalMessage",
      "SendMessage": "@roblox/globaltype/Modem.SendMessage",
      "UrlEncode": "@roblox/globaltype/Modem.UrlEncode"
    }
  },
  "@roblox/globaltype/Modem.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Modem.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Modem.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Modem.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Modem.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Modem.GetAsync": {
    "documentation": "Identical to <code>HttpService:GetAsync</code>.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Modem.GetAsync",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Modem.GetAsync/params/1",
        "name": "url"
      },
      {
        "documentation": "@roblox/globaltype/Modem.GetAsync/params/2",
        "name": "nocache"
      },
      {
        "documentation": "@roblox/globaltype/Modem.GetAsync/params/3",
        "name": "headers"
      }
    ],
    "returns": [
      "@roblox/globaltype/Modem.GetAsync/returns/0"
    ]
  },
  "@roblox/globaltype/Modem.GetAsync/params/1": {},
  "@roblox/globaltype/Modem.GetAsync/params/2": {},
  "@roblox/globaltype/Modem.GetAsync/params/3": {},
  "@roblox/globaltype/Modem.GetAsync/returns/0": {},
  "@roblox/globaltype/Modem.GetRequest": {
    "params": [
      {
        "documentation": "@roblox/globaltype/Modem.GetRequest",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Modem.GetRequest/params/1",
        "name": "domain"
      }
    ],
    "returns": [
      "@roblox/globaltype/Modem.GetRequest/returns/0"
    ]
  },
  "@roblox/globaltype/Modem.GetRequest/params/1": {},
  "@roblox/globaltype/Modem.GetRequest/returns/0": {},
  "@roblox/globaltype/Modem.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Modem.MessageSent": {},
  "@roblox/globaltype/Modem.NetworkID": {
    "documentation": "The ID of the network this modem should connect to."
  },
  "@roblox/globaltype/Modem.PostAsync": {
    "documentation": "Identical to <code>HttpService:PostAsync</code>.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Modem.PostAsync",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Modem.PostAsync/params/1",
        "name": "url"
      },
      {
        "documentation": "@roblox/globaltype/Modem.PostAsync/params/2",
        "name": "data"
      },
      {
        "documentation": "@roblox/globaltype/Modem.PostAsync/params/3",
        "name": "contentType"
      },
      {
        "documentation": "@roblox/globaltype/Modem.PostAsync/params/4",
        "name": "compress"
      },
      {
        "documentation": "@roblox/globaltype/Modem.PostAsync/params/5",
        "name": "headers"
      }
    ],
    "returns": [
      "@roblox/globaltype/Modem.PostAsync/returns/0"
    ]
  },
  "@roblox/globaltype/Modem.PostAsync/params/1": {
    "documentation": "The destination address for the data."
  },
  "@roblox/globaltype/Modem.PostAsync/params/2": {
    "documentation": "The data being sent."
  },
  "@roblox/globaltype/Modem.PostAsync/params/3": {
    "documentation": "Modifies the value in the <code>Content-Type</code> header sent with the request."
  },
  "@roblox/globaltype/Modem.PostAsync/params/4": {
    "documentation": "Determines whether the data is compressed (<b>gzipped</b>) when sent."
  },
  "@roblox/globaltype/Modem.PostAsync/params/5": {
    "documentation": "Used to specify some HTTP request headers."
  },
  "@roblox/globaltype/Modem.PostAsync/returns/0": {
    "documentation": "The HTTP response sent back indicating the request result."
  },
  "@roblox/globaltype/Modem.PostRequest": {
    "params": [
      {
        "documentation": "@roblox/globaltype/Modem.PostRequest",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Modem.PostRequest/params/1",
        "name": "domain"
      },
      {
        "documentation": "@roblox/globaltype/Modem.PostRequest/params/2",
        "name": "data"
      }
    ]
  },
  "@roblox/globaltype/Modem.PostRequest/params/1": {},
  "@roblox/globaltype/Modem.PostRequest/params/2": {},
  "@roblox/globaltype/Modem.RealPostRequest": {
    "params": [
      {
        "documentation": "@roblox/globaltype/Modem.RealPostRequest",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Modem.RealPostRequest/params/1",
        "name": "domain"
      },
      {
        "documentation": "@roblox/globaltype/Modem.RealPostRequest/params/2",
        "name": "data"
      },
      {
        "documentation": "@roblox/globaltype/Modem.RealPostRequest/params/3",
        "name": "asyncBool"
      },
      {
        "documentation": "@roblox/globaltype/Modem.RealPostRequest/params/4",
        "name": "transformFunction"
      },
      {
        "documentation": "@roblox/globaltype/Modem.RealPostRequest/params/5",
        "name": "optionalHeaders"
      }
    ],
    "returns": [
      "@roblox/globaltype/Modem.RealPostRequest/returns/0"
    ]
  },
  "@roblox/globaltype/Modem.RealPostRequest/params/1": {},
  "@roblox/globaltype/Modem.RealPostRequest/params/2": {},
  "@roblox/globaltype/Modem.RealPostRequest/params/3": {},
  "@roblox/globaltype/Modem.RealPostRequest/params/4": {
    "params": [
      {
        "documentation": "@roblox/globaltype/Modem.RealPostRequest/params/4/params/0",
        "name": "..."
      }
    ]
  },
  "@roblox/globaltype/Modem.RealPostRequest/params/4/params/0": {},
  "@roblox/globaltype/Modem.RealPostRequest/params/5": {},
  "@roblox/globaltype/Modem.RealPostRequest/returns/0": {
    "keys": {
      "response": "@roblox/globaltype/Modem.RealPostRequest/returns/0.response",
      "success": "@roblox/globaltype/Modem.RealPostRequest/returns/0.success"
    }
  },
  "@roblox/globaltype/Modem.RealPostRequest/returns/0.response": {},
  "@roblox/globaltype/Modem.RealPostRequest/returns/0.success": {},
  "@roblox/globaltype/Modem.RequestAsync": {
    "documentation": "Identical to <code>HttpService:RequestAsync</code>.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Modem.RequestAsync",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Modem.RequestAsync/params/1",
        "name": "options"
      }
    ],
    "returns": [
      "@roblox/globaltype/Modem.RequestAsync/returns/0"
    ]
  },
  "@roblox/globaltype/Modem.RequestAsync/params/1": {},
  "@roblox/globaltype/Modem.RequestAsync/returns/0": {},
  "@roblox/globaltype/Modem.SendLocalMessage": {
    "documentation": "Sends a message to all modems in the same region of the same <code>NetworkID</code>.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Modem.SendLocalMessage",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Modem.SendLocalMessage/params/1",
        "name": "data"
      },
      {
        "documentation": "@roblox/globaltype/Modem.SendLocalMessage/params/2",
        "name": "id"
      }
    ]
  },
  "@roblox/globaltype/Modem.SendLocalMessage/params/1": {},
  "@roblox/globaltype/Modem.SendLocalMessage/params/2": {},
  "@roblox/globaltype/Modem.SendMessage": {
    "params": [
      {
        "documentation": "@roblox/globaltype/Modem.SendMessage",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Modem.SendMessage/params/1",
        "name": "data"
      },
      {
        "documentation": "@roblox/globaltype/Modem.SendMessage/params/2",
        "name": "id"
      }
    ]
  },
  "@roblox/globaltype/Modem.SendMessage/params/1": {},
  "@roblox/globaltype/Modem.SendMessage/params/2": {},
  "@roblox/globaltype/Modem.UrlEncode": {
    "documentation": "The <code>UrlEncode</code> function [percent-encodes](https://en.wikipedia.org/wiki/Percent-encoding) a given string so that reserved characters properly encoded with '%' and two hexadecimal characters.\nIdentical to <code>HttpService:UrlEncode</code>.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Modem.UrlEncode",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Modem.UrlEncode/params/1",
        "name": "input"
      }
    ],
    "returns": [
      "@roblox/globaltype/Modem.UrlEncode/returns/0"
    ]
  },
  "@roblox/globaltype/Modem.UrlEncode/params/1": {},
  "@roblox/globaltype/Modem.UrlEncode/returns/0": {},
  "@roblox/globaltype/ModemConfiguration": {
    "documentation": "The configuration of the <code>Modem</code> object.",
    "keys": {
      "NetworkID": "@roblox/globaltype/ModemConfiguration.NetworkID"
    }
  },
  "@roblox/globaltype/ModemConfiguration.NetworkID": {
    "documentation": "The ID of the network this modem should connect to."
  },
  "@roblox/globaltype/ModemRequest": {
    "keys": {
      "Body": "@roblox/globaltype/ModemRequest.Body",
      "Compress": "@roblox/globaltype/ModemRequest.Compress",
      "Headers": "@roblox/globaltype/ModemRequest.Headers",
      "Method": "@roblox/globaltype/ModemRequest.Method",
      "Url": "@roblox/globaltype/ModemRequest.Url"
    }
  },
  "@roblox/globaltype/ModemRequest.Body": {
    "documentation": "The body of the request, is usually a JSON string."
  },
  "@roblox/globaltype/ModemRequest.Compress": {
    "documentation": "What type of compression to use for the request."
  },
  "@roblox/globaltype/ModemRequest.Headers": {
    "documentation": "The headers of the request."
  },
  "@roblox/globaltype/ModemRequest.Method": {
    "documentation": "The HTTP method to use for the request."
  },
  "@roblox/globaltype/ModemRequest.Url": {
    "documentation": "The real world URL to send the request to."
  },
  "@roblox/globaltype/ModemRequestResponse": {
    "keys": {
      "Body": "@roblox/globaltype/ModemRequestResponse.Body",
      "Headers": "@roblox/globaltype/ModemRequestResponse.Headers",
      "StatusCode": "@roblox/globaltype/ModemRequestResponse.StatusCode",
      "StatusMessage": "@roblox/globaltype/ModemRequestResponse.StatusMessage",
      "Success": "@roblox/globaltype/ModemRequestResponse.Success"
    }
  },
  "@roblox/globaltype/ModemRequestResponse.Body": {
    "documentation": "The body of the response, is usually a JSON string."
  },
  "@roblox/globaltype/ModemRequestResponse.Headers": {
    "documentation": "The headers of the response."
  },
  "@roblox/globaltype/ModemRequestResponse.StatusCode": {
    "documentation": "The HTTP status code of the response."
  },
  "@roblox/globaltype/ModemRequestResponse.StatusMessage": {
    "documentation": "The HTTP status message of the response."
  },
  "@roblox/globaltype/ModemRequestResponse.Success": {
    "documentation": "Whether the request was successful or not."
  },
  "@roblox/globaltype/MonsterMashPotion": {
    "documentation": "You'll be a graveyard smash with this thrilling dance potion.",
    "keys": {
      "ClassName": "@roblox/globaltype/MonsterMashPotion.ClassName"
    }
  },
  "@roblox/globaltype/MonsterMashPotion.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Motor": {
    "documentation": "Spins objects attached to the hinge at the front when powered.",
    "keys": {
      "ClassName": "@roblox/globaltype/Motor.ClassName",
      "Configure": "@roblox/globaltype/Motor.Configure",
      "Configured": "@roblox/globaltype/Motor.Configured",
      "Power": "@roblox/globaltype/Motor.Power",
      "Ratio": "@roblox/globaltype/Motor.Ratio"
    }
  },
  "@roblox/globaltype/Motor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Motor.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Motor.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Motor.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Motor.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Motor.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Motor.Power": {
    "documentation": "Determines the amount of power used to drive the motor. This affects the torque and power consumption. Negative values are reverse."
  },
  "@roblox/globaltype/Motor.Ratio": {
    "documentation": "Determines the gear ratio applied to the motor in terms of the multiplier on the RPM. A value of 0.1 indicates a 10:1 ratio, where RPM is 1/10th and torque is 10x when compared to the default setting of 1."
  },
  "@roblox/globaltype/MotorConfiguration": {
    "documentation": "The configuration of the <code>Motor</code> object.",
    "keys": {
      "Power": "@roblox/globaltype/MotorConfiguration.Power",
      "Ratio": "@roblox/globaltype/MotorConfiguration.Ratio"
    }
  },
  "@roblox/globaltype/MotorConfiguration.Power": {
    "documentation": "Determines the amount of power used to drive the motor. This affects the torque and power consumption. Negative values are reverse."
  },
  "@roblox/globaltype/MotorConfiguration.Ratio": {
    "documentation": "Determines the gear ratio applied to the motor in terms of the multiplier on the RPM. A value of 0.1 indicates a 10:1 ratio, where RPM is 1/10th and torque is 10x when compared to the default setting of 1."
  },
  "@roblox/globaltype/MustardGas": {
    "documentation": "A heavy chemical warfare weapon used to damage organisms. Gas Masks nullify the effects of this gas.",
    "keys": {
      "ClassName": "@roblox/globaltype/MustardGas.ClassName"
    }
  },
  "@roblox/globaltype/MustardGas.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Neon": {
    "documentation": "A building decoration material that glows by itself without requiring power.",
    "keys": {
      "ClassName": "@roblox/globaltype/Neon.ClassName"
    }
  },
  "@roblox/globaltype/Neon.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Network": {
    "documentation": "A network object.",
    "keys": {
      "GetHistory": "@roblox/globaltype/Network.GetHistory",
      "GetPart": "@roblox/globaltype/Network.GetPart",
      "GetPartFromPort": "@roblox/globaltype/Network.GetPartFromPort",
      "GetParts": "@roblox/globaltype/Network.GetParts",
      "GetPartsFromPort": "@roblox/globaltype/Network.GetPartsFromPort",
      "GetPort": "@roblox/globaltype/Network.GetPort",
      "GetPorts": "@roblox/globaltype/Network.GetPorts",
      "GetSubnet": "@roblox/globaltype/Network.GetSubnet",
      "__index": "@roblox/globaltype/Network.__index",
      "new": "@roblox/globaltype/Network.new"
    }
  },
  "@roblox/globaltype/Network.GetHistory": {
    "documentation": "Returns a list of all objects that have been traversed by the network. Note this makes a copy of the internal state and is therefore modifying it does not affect the network itself whatsoever.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Network.GetHistory/returns/0"
    ]
  },
  "@roblox/globaltype/Network.GetHistory/returns/0": {},
  "@roblox/globaltype/Network.GetPart": {
    "documentation": "Gets a part of the specified type from any connected ports.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Network.GetPart",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Network.GetPart/params/1",
        "name": "className"
      }
    ],
    "returns": [
      "@roblox/globaltype/Network.GetPart/returns/0"
    ]
  },
  "@roblox/globaltype/Network.GetPart/params/1": {},
  "@roblox/globaltype/Network.GetPart/returns/0": {},
  "@roblox/globaltype/Network.GetPartFromPort": {
    "documentation": "Gets a part of the specified type from any port of the specified ID.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Network.GetPartFromPort",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Network.GetPartFromPort/params/1",
        "name": "port"
      },
      {
        "documentation": "@roblox/globaltype/Network.GetPartFromPort/params/2",
        "name": "className"
      }
    ],
    "returns": [
      "@roblox/globaltype/Network.GetPartFromPort/returns/0"
    ]
  },
  "@roblox/globaltype/Network.GetPartFromPort/params/1": {},
  "@roblox/globaltype/Network.GetPartFromPort/params/2": {},
  "@roblox/globaltype/Network.GetPartFromPort/returns/0": {},
  "@roblox/globaltype/Network.GetParts": {
    "documentation": "Gets all the parts of the specified type that are directly connected to the microcontroller (they must not be on a port whatsoever, they maybe on an ethernet cable that directly touches the microcontroller, though).",
    "params": [
      {
        "documentation": "@roblox/globaltype/Network.GetParts",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Network.GetParts/params/1",
        "name": "className"
      }
    ],
    "returns": [
      "@roblox/globaltype/Network.GetParts/returns/0"
    ]
  },
  "@roblox/globaltype/Network.GetParts/params/1": {},
  "@roblox/globaltype/Network.GetParts/returns/0": {},
  "@roblox/globaltype/Network.GetPartsFromPort": {
    "documentation": "Gets all the parts of the specified type from any port of the specified ID.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Network.GetPartsFromPort",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Network.GetPartsFromPort/params/1",
        "name": "port"
      },
      {
        "documentation": "@roblox/globaltype/Network.GetPartsFromPort/params/2",
        "name": "className"
      }
    ],
    "returns": [
      "@roblox/globaltype/Network.GetPartsFromPort/returns/0"
    ]
  },
  "@roblox/globaltype/Network.GetPartsFromPort/params/1": {},
  "@roblox/globaltype/Network.GetPartsFromPort/params/2": {},
  "@roblox/globaltype/Network.GetPartsFromPort/returns/0": {},
  "@roblox/globaltype/Network.GetPort": {
    "params": [
      {
        "documentation": "@roblox/globaltype/Network.GetPort",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Network.GetPort/params/1",
        "name": "port"
      }
    ],
    "returns": [
      "@roblox/globaltype/Network.GetPort/returns/0"
    ]
  },
  "@roblox/globaltype/Network.GetPort/params/1": {},
  "@roblox/globaltype/Network.GetPort/returns/0": {},
  "@roblox/globaltype/Network.GetPorts": {
    "params": [
      {
        "documentation": "@roblox/globaltype/Network.GetPorts",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Network.GetPorts/params/1",
        "name": "port"
      }
    ],
    "returns": [
      "@roblox/globaltype/Network.GetPorts/returns/0"
    ]
  },
  "@roblox/globaltype/Network.GetPorts/params/1": {},
  "@roblox/globaltype/Network.GetPorts/returns/0": {},
  "@roblox/globaltype/Network.GetSubnet": {
    "documentation": "Creates a new network with its root set to the specified <code>Port</code>.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Network.GetSubnet",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Network.GetSubnet/params/1",
        "name": "port"
      }
    ],
    "returns": [
      "@roblox/globaltype/Network.GetSubnet/returns/0"
    ]
  },
  "@roblox/globaltype/Network.GetSubnet/params/1": {},
  "@roblox/globaltype/Network.GetSubnet/returns/0": {},
  "@roblox/globaltype/Network.__index": {},
  "@roblox/globaltype/Network.new": {
    "params": [
      {
        "documentation": "@roblox/globaltype/Network.new/params/0",
        "name": "rootParts"
      },
      {
        "documentation": "@roblox/globaltype/Network.new/params/1",
        "name": "parentNetwork"
      }
    ],
    "returns": [
      "@roblox/globaltype/Network.new/returns/0"
    ]
  },
  "@roblox/globaltype/Network.new/params/0": {
    "documentation": "An array of objects to be the roots of the network"
  },
  "@roblox/globaltype/Network.new/params/1": {
    "documentation": "You can use this to make a new network that will never explore along the path that was taken by the network you pass."
  },
  "@roblox/globaltype/Network.new/returns/0": {},
  "@roblox/globaltype/Neutronium": {
    "documentation": "The most durable obtainable material in the game. It is a strange form of matter found from the crusts of neutron stars. Due to the nature of neutron stars, neutronium is the hardest known material as well as the densest known material in the universe.",
    "keys": {
      "ClassName": "@roblox/globaltype/Neutronium.ClassName"
    }
  },
  "@roblox/globaltype/Neutronium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/NightVisionGoggles": {
    "documentation": "A set of goggles which can be used to see in the dark.",
    "keys": {
      "ClassName": "@roblox/globaltype/NightVisionGoggles.ClassName"
    }
  },
  "@roblox/globaltype/NightVisionGoggles.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/NitrogenOxide": {
    "documentation": "A light gas emitted from machines such as extractors and rockets. Inhaling can cause severe lung damage.",
    "keys": {
      "ClassName": "@roblox/globaltype/NitrogenOxide.ClassName"
    }
  },
  "@roblox/globaltype/NitrogenOxide.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/NuclearWaste": {
    "documentation": "A highly radioactive material produced from spent Uranium in a reactor.",
    "keys": {
      "ClassName": "@roblox/globaltype/NuclearWaste.ClassName"
    }
  },
  "@roblox/globaltype/NuclearWaste.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Obamium": {
    "documentation": "An ancient artifact left behind from an alternate reality.",
    "keys": {
      "ClassName": "@roblox/globaltype/Obamium.ClassName"
    }
  },
  "@roblox/globaltype/Obamium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Obelisk": {
    "documentation": "An object designed to attract aliens to the region. Emits an ominous noise when powered.\nMust be anchored and powered in order to function. Must also be open to the sky. Only one obelisk in a region can be powered at a time.\nWhen active, it will summon aliens every 300 seconds.\n<b>Use at your own risk.</b>",
    "keys": {
      "ClassName": "@roblox/globaltype/Obelisk.ClassName",
      "Loop": "@roblox/globaltype/Obelisk.Loop"
    }
  },
  "@roblox/globaltype/Obelisk.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Obelisk.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/ObjectDetector": {
    "documentation": "Casts a ray on the face with the hole on it, returning data of the object the ray hits.\n\nMicrocontroller function <code>GetLastHitData</code> returns a table with data about the last object hit.\n\nThe \"last hit\" part updates with a frequency of 1 frame.",
    "keys": {
      "ClassName": "@roblox/globaltype/ObjectDetector.ClassName",
      "Configure": "@roblox/globaltype/ObjectDetector.Configure",
      "GetLastHitData": "@roblox/globaltype/ObjectDetector.GetLastHitData",
      "GetLastHitPart": "@roblox/globaltype/ObjectDetector.GetLastHitPart",
      "MaxDistance": "@roblox/globaltype/ObjectDetector.MaxDistance",
      "TriggerAtDistance": "@roblox/globaltype/ObjectDetector.TriggerAtDistance"
    }
  },
  "@roblox/globaltype/ObjectDetector.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/ObjectDetector.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/ObjectDetector.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/ObjectDetector.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/ObjectDetector.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/ObjectDetector.GetLastHitData": {
    "documentation": "Returns a table with data about the last object hit by the <code>ObjectDetector</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/ObjectDetector.GetLastHitData/returns/0"
    ]
  },
  "@roblox/globaltype/ObjectDetector.GetLastHitData/returns/0": {
    "documentation": "The hit data provided by the <code>ObjectDetector</code>."
  },
  "@roblox/globaltype/ObjectDetector.GetLastHitPart": {
    "documentation": "Returns the most recently hit part by the <code>ObjectDetector</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/ObjectDetector.GetLastHitPart/returns/0"
    ]
  },
  "@roblox/globaltype/ObjectDetector.GetLastHitPart/returns/0": {
    "documentation": "A reference to the most recently hit part."
  },
  "@roblox/globaltype/ObjectDetector.MaxDistance": {
    "documentation": "The range that it can detect an object. Must be between 0 and 1000."
  },
  "@roblox/globaltype/ObjectDetector.TriggerAtDistance": {
    "documentation": "The range that it will trigger if it detects an object."
  },
  "@roblox/globaltype/ObjectDetectorConfiguration": {
    "documentation": "The configuration of the <code>ObjectDetector</code> object.",
    "keys": {
      "MaxDistance": "@roblox/globaltype/ObjectDetectorConfiguration.MaxDistance",
      "TriggerAtDistance": "@roblox/globaltype/ObjectDetectorConfiguration.TriggerAtDistance"
    }
  },
  "@roblox/globaltype/ObjectDetectorConfiguration.MaxDistance": {
    "documentation": "The range that it can detect an object. Must be between 0 and 1000."
  },
  "@roblox/globaltype/ObjectDetectorConfiguration.TriggerAtDistance": {
    "documentation": "The range that it will trigger if it detects an object."
  },
  "@roblox/globaltype/ObjectDetectorHitData": {
    "documentation": "A type that demonstrates the fact that what type the object detector returns depends on what it hits."
  },
  "@roblox/globaltype/ObjectDetectorHitNothing": {
    "documentation": "The data provided by the object detector when it doesn't hit anything.",
    "keys": {
      "CFrame": "@roblox/globaltype/ObjectDetectorHitNothing.CFrame",
      "Color": "@roblox/globaltype/ObjectDetectorHitNothing.Color",
      "Distance": "@roblox/globaltype/ObjectDetectorHitNothing.Distance",
      "Name": "@roblox/globaltype/ObjectDetectorHitNothing.Name",
      "Position": "@roblox/globaltype/ObjectDetectorHitNothing.Position",
      "Size": "@roblox/globaltype/ObjectDetectorHitNothing.Size",
      "isTerrain": "@roblox/globaltype/ObjectDetectorHitNothing.isTerrain"
    }
  },
  "@roblox/globaltype/ObjectDetectorHitNothing.CFrame": {},
  "@roblox/globaltype/ObjectDetectorHitNothing.Color": {},
  "@roblox/globaltype/ObjectDetectorHitNothing.Distance": {
    "documentation": "Will be greater than or equal to the <code>ObjectDetector</code>'s <code>MaxDistance</code> configuration, note, there is a slight error in this value so it may be ~1e-3 less than it should be."
  },
  "@roblox/globaltype/ObjectDetectorHitNothing.Name": {},
  "@roblox/globaltype/ObjectDetectorHitNothing.Position": {},
  "@roblox/globaltype/ObjectDetectorHitNothing.Size": {},
  "@roblox/globaltype/ObjectDetectorHitNothing.isTerrain": {
    "documentation": "Whether or not the hit object is terrain."
  },
  "@roblox/globaltype/ObjectDetectorHitObject": {
    "documentation": "The data provided by the object detector when it hits an object.",
    "keys": {
      "CFrame": "@roblox/globaltype/ObjectDetectorHitObject.CFrame",
      "Color": "@roblox/globaltype/ObjectDetectorHitObject.Color",
      "CreatedBy": "@roblox/globaltype/ObjectDetectorHitObject.CreatedBy",
      "Distance": "@roblox/globaltype/ObjectDetectorHitObject.Distance",
      "LockedBy": "@roblox/globaltype/ObjectDetectorHitObject.LockedBy",
      "Name": "@roblox/globaltype/ObjectDetectorHitObject.Name",
      "Position": "@roblox/globaltype/ObjectDetectorHitObject.Position",
      "Size": "@roblox/globaltype/ObjectDetectorHitObject.Size",
      "isTerrain": "@roblox/globaltype/ObjectDetectorHitObject.isTerrain"
    }
  },
  "@roblox/globaltype/ObjectDetectorHitObject.CFrame": {
    "documentation": "The <code>CFrame</code> of the hit object."
  },
  "@roblox/globaltype/ObjectDetectorHitObject.Color": {
    "documentation": "The <code>Color</code> of the hit object."
  },
  "@roblox/globaltype/ObjectDetectorHitObject.CreatedBy": {
    "documentation": "The <code>UserId</code> of the person who <em>created</em> the part.\nParts created by \"THE DEVELOPERS\" or \"???\" have a <code>CreatedBy</code> value of <code>-1</code>.\nIt <em>can</em> be <code>nil</code> if the game doesn't know who created the part."
  },
  "@roblox/globaltype/ObjectDetectorHitObject.Distance": {
    "documentation": "The distance between the start of the ray and the contact point."
  },
  "@roblox/globaltype/ObjectDetectorHitObject.LockedBy": {
    "documentation": "The <code>UserId</code> of the person who <em>locked</em> the part.\nParts locked by \"THE DEVELOPERS\" have a <code>LockedBy</code> value of <code>-2</code>\nParts locked by \"???\" have a <code>LockedBy</code> value of <code>-1</code>\nThis value will be <code>nil</code> if the part is unlocked."
  },
  "@roblox/globaltype/ObjectDetectorHitObject.Name": {
    "documentation": "The name of the hit object."
  },
  "@roblox/globaltype/ObjectDetectorHitObject.Position": {
    "documentation": "The <code>Position</code> of the hit object itself, not the <code>Position</code> of contact between the ray and the object."
  },
  "@roblox/globaltype/ObjectDetectorHitObject.Size": {
    "documentation": "The <code>Size</code> of the hit object."
  },
  "@roblox/globaltype/ObjectDetectorHitObject.isTerrain": {
    "documentation": "Whether or not the hit object is terrain."
  },
  "@roblox/globaltype/ObjectDetectorHitTerrain": {
    "documentation": "The data provided by the object detector when it hits terrain.",
    "keys": {
      "CFrame": "@roblox/globaltype/ObjectDetectorHitTerrain.CFrame",
      "Color": "@roblox/globaltype/ObjectDetectorHitTerrain.Color",
      "Distance": "@roblox/globaltype/ObjectDetectorHitTerrain.Distance",
      "Name": "@roblox/globaltype/ObjectDetectorHitTerrain.Name",
      "Position": "@roblox/globaltype/ObjectDetectorHitTerrain.Position",
      "Size": "@roblox/globaltype/ObjectDetectorHitTerrain.Size",
      "isTerrain": "@roblox/globaltype/ObjectDetectorHitTerrain.isTerrain"
    }
  },
  "@roblox/globaltype/ObjectDetectorHitTerrain.CFrame": {
    "documentation": "The <code>CFrame</code> of the hit object."
  },
  "@roblox/globaltype/ObjectDetectorHitTerrain.Color": {
    "documentation": "The <code>Color</code> of the hit object."
  },
  "@roblox/globaltype/ObjectDetectorHitTerrain.Distance": {
    "documentation": "The distance between the start of the ray and the contact point."
  },
  "@roblox/globaltype/ObjectDetectorHitTerrain.Name": {
    "documentation": "The name of the hit object. If it is \"Collider\" then the object detector is hitting an <code>EnergyShield</code>, it can also be a player's limb, it will not provide the name of the player, just the name of the hit limb."
  },
  "@roblox/globaltype/ObjectDetectorHitTerrain.Position": {
    "documentation": "The <code>Position</code> of the hit object itself, not the <code>Position</code> of contact between the ray and the object."
  },
  "@roblox/globaltype/ObjectDetectorHitTerrain.Size": {
    "documentation": "The <code>Size</code> of the hit object."
  },
  "@roblox/globaltype/ObjectDetectorHitTerrain.isTerrain": {
    "documentation": "Whether or not the hit object is terrain."
  },
  "@roblox/globaltype/Oil": {
    "documentation": "A liquid used in refineries to produce Gasoline which can be used for fueling engines and rockets and Petroleum which can be used to make plastic.",
    "keys": {
      "ClassName": "@roblox/globaltype/Oil.ClassName"
    }
  },
  "@roblox/globaltype/Oil.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/OrbitRegionInfo": {},
  "@roblox/globaltype/PDWX44": {
    "documentation": "A versatile automatic pulse based PDW capable of dishing incredible amounts of damage in a small amount of time. Equipped with 3 barrels for an unparalleled firerate.",
    "keys": {
      "ClassName": "@roblox/globaltype/PDWX44.ClassName"
    }
  },
  "@roblox/globaltype/PDWX44.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Part100k": {
    "documentation": "100k visits special item.",
    "keys": {
      "ClassName": "@roblox/globaltype/Part100k.ClassName",
      "OnClick": "@roblox/globaltype/Part100k.OnClick",
      "Triggered": "@roblox/globaltype/Part100k.Triggered"
    }
  },
  "@roblox/globaltype/Part100k.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Part100k.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/Part100k.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/Perfectium": {
    "documentation": "The perfect material. Unbreakable, very stretchable, but is impossibly rare. The very sight of it makes you wonder the imperfections of human beings.",
    "keys": {
      "ClassName": "@roblox/globaltype/Perfectium.ClassName"
    }
  },
  "@roblox/globaltype/Perfectium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Permission": {
    "documentation": "Different types of permissions that can be granted to players."
  },
  "@roblox/globaltype/Petroleum": {
    "documentation": "A gas used for creating plastic.",
    "keys": {
      "ClassName": "@roblox/globaltype/Petroleum.ClassName"
    }
  },
  "@roblox/globaltype/Petroleum.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/PilotObject": {
    "documentation": "The base object that all other objects inherit from.",
    "keys": {
      "Anchored": "@roblox/globaltype/PilotObject.Anchored",
      "AssemblyCenterOfMass": "@roblox/globaltype/PilotObject.AssemblyCenterOfMass",
      "AssemblyLinearVelocity": "@roblox/globaltype/PilotObject.AssemblyLinearVelocity",
      "AssemblyMass": "@roblox/globaltype/PilotObject.AssemblyMass",
      "CFrame": "@roblox/globaltype/PilotObject.CFrame",
      "CanInstallComponent": "@roblox/globaltype/PilotObject.CanInstallComponent",
      "CanUninstallComponent": "@roblox/globaltype/PilotObject.CanUninstallComponent",
      "ClassName": "@roblox/globaltype/PilotObject.ClassName",
      "Click": "@roblox/globaltype/PilotObject.Click",
      "Color": "@roblox/globaltype/PilotObject.Color",
      "CreatedBy": "@roblox/globaltype/PilotObject.CreatedBy",
      "Destroying": "@roblox/globaltype/PilotObject.Destroying",
      "Durability": "@roblox/globaltype/PilotObject.Durability",
      "GUID": "@roblox/globaltype/PilotObject.GUID",
      "GetColor": "@roblox/globaltype/PilotObject.GetColor",
      "GetComponent": "@roblox/globaltype/PilotObject.GetComponent",
      "GetConfigurables": "@roblox/globaltype/PilotObject.GetConfigurables",
      "GetDurability": "@roblox/globaltype/PilotObject.GetDurability",
      "GetEvents": "@roblox/globaltype/PilotObject.GetEvents",
      "GetMethods": "@roblox/globaltype/PilotObject.GetMethods",
      "GetNameOfOwnerAsync": "@roblox/globaltype/PilotObject.GetNameOfOwnerAsync",
      "GetOwnerId": "@roblox/globaltype/PilotObject.GetOwnerId",
      "GetShape": "@roblox/globaltype/PilotObject.GetShape",
      "GetSize": "@roblox/globaltype/PilotObject.GetSize",
      "GetTemperature": "@roblox/globaltype/PilotObject.GetTemperature",
      "HasComponent": "@roblox/globaltype/PilotObject.HasComponent",
      "HasPermission": "@roblox/globaltype/PilotObject.HasPermission",
      "Health": "@roblox/globaltype/PilotObject.Health",
      "Heat": "@roblox/globaltype/PilotObject.Heat",
      "IsDestroyed": "@roblox/globaltype/PilotObject.IsDestroyed",
      "IsGrounded": "@roblox/globaltype/PilotObject.IsGrounded",
      "ListComponents": "@roblox/globaltype/PilotObject.ListComponents",
      "Mass": "@roblox/globaltype/PilotObject.Mass",
      "Material": "@roblox/globaltype/PilotObject.Material",
      "Orientation": "@roblox/globaltype/PilotObject.Orientation",
      "PartLocked": "@roblox/globaltype/PilotObject.PartLocked",
      "Position": "@roblox/globaltype/PilotObject.Position",
      "Size": "@roblox/globaltype/PilotObject.Size",
      "Temperature": "@roblox/globaltype/PilotObject.Temperature",
      "Trigger": "@roblox/globaltype/PilotObject.Trigger"
    }
  },
  "@roblox/globaltype/PilotObject.Anchored": {
    "documentation": "Whether or not the object is anchored."
  },
  "@roblox/globaltype/PilotObject.AssemblyCenterOfMass": {
    "documentation": "The center of mass of the object's assembly."
  },
  "@roblox/globaltype/PilotObject.AssemblyLinearVelocity": {
    "documentation": "The velocity of the object's assembly."
  },
  "@roblox/globaltype/PilotObject.AssemblyMass": {
    "documentation": "The total mass of the object's assembly."
  },
  "@roblox/globaltype/PilotObject.CFrame": {
    "documentation": "The current <code>CFrame</code> of the object."
  },
  "@roblox/globaltype/PilotObject.CanInstallComponent": {
    "documentation": "Checks if the specified component can be installed on the object.",
    "params": [
      {
        "documentation": "@roblox/globaltype/PilotObject.CanInstallComponent",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/PilotObject.CanInstallComponent/params/1",
        "name": "componentName"
      }
    ],
    "returns": [
      "@roblox/globaltype/PilotObject.CanInstallComponent/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.CanInstallComponent/params/1": {
    "documentation": "The name of the component to check whether it is installable or not."
  },
  "@roblox/globaltype/PilotObject.CanInstallComponent/returns/0": {
    "documentation": "Whether or not the component can be installed on the object."
  },
  "@roblox/globaltype/PilotObject.CanUninstallComponent": {
    "documentation": "Checks if the specified component can be uninstalled from the object.",
    "params": [
      {
        "documentation": "@roblox/globaltype/PilotObject.CanUninstallComponent",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/PilotObject.CanUninstallComponent/params/1",
        "name": "componentName"
      }
    ],
    "returns": [
      "@roblox/globaltype/PilotObject.CanUninstallComponent/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.CanUninstallComponent/params/1": {
    "documentation": "The name of the component to check whether it is uninstallable or not."
  },
  "@roblox/globaltype/PilotObject.CanUninstallComponent/returns/0": {
    "documentation": "Whether or not the component can be uninstalled from the object."
  },
  "@roblox/globaltype/PilotObject.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/PilotObject.Click": {
    "documentation": "Emulates a user clicking on the object, seems dysfunctional in some cases, (i.e., <code>ClickButton</code> components do not get triggered).",
    "params": []
  },
  "@roblox/globaltype/PilotObject.Color": {
    "documentation": "The current color of the object."
  },
  "@roblox/globaltype/PilotObject.CreatedBy": {
    "documentation": "The <code>UserId</code> of the user who <i>created</i> the part. Will be <code>nil</code> if the part was created by a constructor."
  },
  "@roblox/globaltype/PilotObject.Destroying": {
    "documentation": "Fires when the object is destroyed."
  },
  "@roblox/globaltype/PilotObject.Durability": {
    "documentation": "The <i>total</i> durability of the object."
  },
  "@roblox/globaltype/PilotObject.GUID": {
    "documentation": "A unique identifier for the object, useful for comparing different references to the same object."
  },
  "@roblox/globaltype/PilotObject.GetColor": {
    "documentation": "Gets the color of the object.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.GetColor/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.GetColor/returns/0": {
    "documentation": "The color of the object."
  },
  "@roblox/globaltype/PilotObject.GetComponent": {
    "documentation": "Gets the component of the specified type for the object.",
    "params": [
      {
        "documentation": "@roblox/globaltype/PilotObject.GetComponent",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/PilotObject.GetComponent/params/1",
        "name": "componentName"
      }
    ],
    "returns": [
      "@roblox/globaltype/PilotObject.GetComponent/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.GetComponent/params/1": {
    "documentation": "The name of the component to get."
  },
  "@roblox/globaltype/PilotObject.GetComponent/returns/0": {
    "documentation": "The component of the requested type for the object, or <code>nil</code> if it does not have the component."
  },
  "@roblox/globaltype/PilotObject.GetConfigurables": {
    "documentation": "Gets information about the configurables of the object.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.GetConfigurables/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.GetConfigurables/returns/0": {
    "documentation": "An dictionary of configurable names to data about that configurable."
  },
  "@roblox/globaltype/PilotObject.GetDurability": {
    "documentation": "Gets the <i>maximum</i> (not current) durability of the object.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.GetDurability/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.GetDurability/returns/0": {
    "documentation": "The <i>maximum</i> durability of the object."
  },
  "@roblox/globaltype/PilotObject.GetEvents": {
    "documentation": "Gets information about the events of the object.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.GetEvents/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.GetEvents/returns/0": {
    "documentation": "An array of event names."
  },
  "@roblox/globaltype/PilotObject.GetMethods": {
    "documentation": "Gets information about the methods of the object.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.GetMethods/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.GetMethods/returns/0": {
    "documentation": "An dictionary of method names to data about that method."
  },
  "@roblox/globaltype/PilotObject.GetNameOfOwnerAsync": {
    "documentation": "Returns the username of the owner of the part, if the part is locked, otherwise returns the username of the creator of the part.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.GetNameOfOwnerAsync/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.GetNameOfOwnerAsync/returns/0": {
    "documentation": "The username of the 'owner' of the part."
  },
  "@roblox/globaltype/PilotObject.GetOwnerId": {
    "documentation": "Returns who locked the part if the part is locked, otherwise returns who created the part.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.GetOwnerId/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.GetOwnerId/returns/0": {
    "documentation": "The <code>UserId</code> of the 'owner' of the part."
  },
  "@roblox/globaltype/PilotObject.GetShape": {
    "documentation": "Gets the shape of the part.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.GetShape/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.GetShape/returns/0": {
    "documentation": "The shape of the part, or <code>nil</code> if the part is a block."
  },
  "@roblox/globaltype/PilotObject.GetSize": {
    "documentation": "Gets the size of the object.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.GetSize/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.GetSize/returns/0": {
    "documentation": "The size of the object."
  },
  "@roblox/globaltype/PilotObject.GetTemperature": {
    "documentation": "Gets the temperature of the object.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.GetTemperature/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.GetTemperature/returns/0": {
    "documentation": "The temperature of the object."
  },
  "@roblox/globaltype/PilotObject.HasComponent": {
    "documentation": "Returns a boolean as to whether or not the object has the specified component.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.HasComponent/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.HasComponent/returns/0": {
    "documentation": "Whether or not the object has the specified component."
  },
  "@roblox/globaltype/PilotObject.HasPermission": {
    "documentation": "Returns a boolean as to whether or not the microcontroller has permission to do the specified action.",
    "params": [
      {
        "documentation": "@roblox/globaltype/PilotObject.HasPermission",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/PilotObject.HasPermission/params/1",
        "name": "permission"
      }
    ],
    "returns": [
      "@roblox/globaltype/PilotObject.HasPermission/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.HasPermission/params/1": {
    "documentation": "The permission to check for."
  },
  "@roblox/globaltype/PilotObject.HasPermission/returns/0": {
    "documentation": "Whether or not the microcontroller has the specified permission."
  },
  "@roblox/globaltype/PilotObject.Health": {
    "documentation": "The health of the object as a <i>percentage</i> (between 0 and 1) of the total durability."
  },
  "@roblox/globaltype/PilotObject.Heat": {
    "documentation": "The current [<i>heat</i>](https://en.wikipedia.org/wiki/Heat) of the object, this is different from the <i>temperature</i>."
  },
  "@roblox/globaltype/PilotObject.IsDestroyed": {
    "documentation": "Returns a boolean as to whether or not the object is destroyed.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.IsDestroyed/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.IsDestroyed/returns/0": {
    "documentation": "Whether or not the object is destroyed."
  },
  "@roblox/globaltype/PilotObject.IsGrounded": {
    "documentation": "Tells you if the part is grounded, meaning it does it have physics. If it is attached to terrain or an anchor for example, it will be grounded.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.IsGrounded/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.IsGrounded/returns/0": {
    "documentation": "Whether or not the object is grounded."
  },
  "@roblox/globaltype/PilotObject.ListComponents": {
    "documentation": "Lists all the components installed on the object.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PilotObject.ListComponents/returns/0"
    ]
  },
  "@roblox/globaltype/PilotObject.ListComponents/returns/0": {
    "documentation": "An array of the names of the components installed on the object."
  },
  "@roblox/globaltype/PilotObject.Mass": {
    "documentation": "The mass of the object."
  },
  "@roblox/globaltype/PilotObject.Material": {
    "documentation": "The current material of the object as an [<code>Enum.Material</code>](https://create.roblox.com/docs/reference/engine/enums/Material)."
  },
  "@roblox/globaltype/PilotObject.Orientation": {
    "documentation": "The current orientation of the object."
  },
  "@roblox/globaltype/PilotObject.PartLocked": {
    "documentation": "The <code>UserId</code> of the user who <i>locked</i> the part. Will be <code>nil</code> if the part is unlocked."
  },
  "@roblox/globaltype/PilotObject.Position": {
    "documentation": "The current position of the object."
  },
  "@roblox/globaltype/PilotObject.Size": {
    "documentation": "The current size of the object."
  },
  "@roblox/globaltype/PilotObject.Temperature": {
    "documentation": "The current [<i>temperature</i>](https://en.wikipedia.org/wiki/Temperature) of the object, this is different from the <i>heat</i>."
  },
  "@roblox/globaltype/PilotObject.Trigger": {
    "documentation": "Triggers the object.",
    "params": []
  },
  "@roblox/globaltype/Pipe": {
    "documentation": "Provides a medium for the transfer of liquids and gases between Tanks and other objects.",
    "keys": {
      "ClassName": "@roblox/globaltype/Pipe.ClassName"
    }
  },
  "@roblox/globaltype/Pipe.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Pistol": {
    "documentation": "A simple repeating firearm.",
    "keys": {
      "ClassName": "@roblox/globaltype/Pistol.ClassName"
    }
  },
  "@roblox/globaltype/Pistol.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Piston": {
    "documentation": "More accurately a linear actuator. There is a rail among us.",
    "keys": {
      "ClassName": "@roblox/globaltype/Piston.ClassName",
      "Configure": "@roblox/globaltype/Piston.Configure",
      "Configured": "@roblox/globaltype/Piston.Configured",
      "Position1": "@roblox/globaltype/Piston.Position1",
      "Position2": "@roblox/globaltype/Piston.Position2",
      "SetPosition": "@roblox/globaltype/Piston.SetPosition",
      "Speed": "@roblox/globaltype/Piston.Speed"
    }
  },
  "@roblox/globaltype/Piston.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Piston.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Piston.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Piston.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Piston.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Piston.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Piston.Position1": {
    "documentation": "Determines the position of the first state of the piston."
  },
  "@roblox/globaltype/Piston.Position2": {
    "documentation": "Determines the position of the second state of the piston."
  },
  "@roblox/globaltype/Piston.SetPosition": {
    "params": []
  },
  "@roblox/globaltype/Piston.Speed": {
    "documentation": "Determines the speed of the piston."
  },
  "@roblox/globaltype/PistonConfiguration": {
    "documentation": "The configuration of the <code>Piston</code> object.",
    "keys": {
      "Position1": "@roblox/globaltype/PistonConfiguration.Position1",
      "Position2": "@roblox/globaltype/PistonConfiguration.Position2",
      "Speed": "@roblox/globaltype/PistonConfiguration.Speed"
    }
  },
  "@roblox/globaltype/PistonConfiguration.Position1": {
    "documentation": "Determines the position of the first state of the piston."
  },
  "@roblox/globaltype/PistonConfiguration.Position2": {
    "documentation": "Determines the position of the second state of the piston."
  },
  "@roblox/globaltype/PistonConfiguration.Speed": {
    "documentation": "Determines the speed of the piston."
  },
  "@roblox/globaltype/PlanetRegionInfo": {
    "documentation": "The region info format of a planet."
  },
  "@roblox/globaltype/PlanetType": {
    "documentation": "The type of a planet."
  },
  "@roblox/globaltype/Plasma": {
    "documentation": "A gas found abundant in stars, and can be harvested from them. Used primarily for weapons, as well as electrical components.",
    "keys": {
      "ClassName": "@roblox/globaltype/Plasma.ClassName"
    }
  },
  "@roblox/globaltype/Plasma.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/PlasmaCannon": {
    "documentation": "Fires an orb of unstable plasma out of the barrel exploding on impact.\nNeeds to be fueled with 500 power and 50 helium or 1 plasma to fire.",
    "keys": {
      "ClassName": "@roblox/globaltype/PlasmaCannon.ClassName"
    }
  },
  "@roblox/globaltype/PlasmaCannon.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Plastic": {
    "documentation": "A cheap material made from petroleum and Coal through polymerisation inside assemblers.",
    "keys": {
      "ClassName": "@roblox/globaltype/Plastic.ClassName",
      "Loop": "@roblox/globaltype/Plastic.Loop"
    }
  },
  "@roblox/globaltype/Plastic.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Plastic.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/PlayableRegionInfo": {
    "documentation": "A region that can be entered by the player, say, the orbit of a planet, the planet itself or a space region.",
    "keys": {
      "Coordinate": "@roblox/globaltype/PlayableRegionInfo.Coordinate",
      "EnterLocation": "@roblox/globaltype/PlayableRegionInfo.EnterLocation",
      "Name": "@roblox/globaltype/PlayableRegionInfo.Name",
      "RegionSeed": "@roblox/globaltype/PlayableRegionInfo.RegionSeed",
      "RegionServer": "@roblox/globaltype/PlayableRegionInfo.RegionServer",
      "StringCoordinate": "@roblox/globaltype/PlayableRegionInfo.StringCoordinate"
    }
  },
  "@roblox/globaltype/PlayableRegionInfo.Coordinate": {
    "documentation": "The coordinates of the region in the non-serialisable <code>Coordinates</code> format."
  },
  "@roblox/globaltype/PlayableRegionInfo.EnterLocation": {
    "documentation": "The location where the player warps into the region."
  },
  "@roblox/globaltype/PlayableRegionInfo.Name": {
    "documentation": "The name of the region."
  },
  "@roblox/globaltype/PlayableRegionInfo.RegionSeed": {},
  "@roblox/globaltype/PlayableRegionInfo.RegionServer": {},
  "@roblox/globaltype/PlayableRegionInfo.StringCoordinate": {
    "documentation": "The coordinates of the region as a string (i.e., <code>0, 0, 0, 0, false</code>)."
  },
  "@roblox/globaltype/PlayerLimb": {
    "documentation": "The limb of the player, used in the <code>Player</code> part."
  },
  "@roblox/globaltype/Plutonium": {
    "documentation": "A highly radioactive compound used in manufacturing nuclear explosives.",
    "keys": {
      "ClassName": "@roblox/globaltype/Plutonium.ClassName"
    }
  },
  "@roblox/globaltype/Plutonium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/PlutoniumCore": {
    "documentation": "A volatile core close to going supercritical used in recipes for Nuclear explosives.",
    "keys": {
      "ClassName": "@roblox/globaltype/PlutoniumCore.ClassName"
    }
  },
  "@roblox/globaltype/PlutoniumCore.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Polysilicon": {
    "documentation": "An electronic material which transforms a trigger signal into special on/off/toggle signals.\n\nHas a configuration called Frequency which dictates how many times the polysilicon will repeat a trigger.\nFor example, if a polysilicon was attached to a pulley, having a frequency of 5 and triggered, the pulley will be activated 5 times.",
    "keys": {
      "ClassName": "@roblox/globaltype/Polysilicon.ClassName",
      "Configure": "@roblox/globaltype/Polysilicon.Configure",
      "Configured": "@roblox/globaltype/Polysilicon.Configured",
      "Frequency": "@roblox/globaltype/Polysilicon.Frequency",
      "PolysiliconMode": "@roblox/globaltype/Polysilicon.PolysiliconMode"
    }
  },
  "@roblox/globaltype/Polysilicon.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Polysilicon.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Polysilicon.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Polysilicon.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Polysilicon.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Polysilicon.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Polysilicon.Frequency": {
    "documentation": "The amount of times to activate the Polysilicon from a single trigger."
  },
  "@roblox/globaltype/Polysilicon.PolysiliconMode": {
    "documentation": "The mode of the Polysilicon. Each mode results in different behaviors for objects."
  },
  "@roblox/globaltype/PolysiliconConfiguration": {
    "documentation": "The configuration of the <code>Polysilicon</code> object.",
    "keys": {
      "Frequency": "@roblox/globaltype/PolysiliconConfiguration.Frequency",
      "PolysiliconMode": "@roblox/globaltype/PolysiliconConfiguration.PolysiliconMode"
    }
  },
  "@roblox/globaltype/PolysiliconConfiguration.Frequency": {
    "documentation": "The amount of times to activate the Polysilicon from a single trigger."
  },
  "@roblox/globaltype/PolysiliconConfiguration.PolysiliconMode": {
    "documentation": "The mode of the Polysilicon. Each mode results in different behaviors for objects."
  },
  "@roblox/globaltype/PolysiliconMode": {
    "documentation": "The mode of polysilicon, used in the <code>Polysilicon</code> part."
  },
  "@roblox/globaltype/Port": {
    "documentation": "Only used in programming. Allows a <code>Microcontroller</code> to interface with <code>PilotObject</code>s.\nTo do so, the Port must be between the <code>Microcontroller</code> and the <code>PilotObject</code> or <code>Microcontroller</code> and the <code>EthernetCable</code> (to interface with objects further away from the <code>Microcontroller</code>).",
    "keys": {
      "ClassName": "@roblox/globaltype/Port.ClassName",
      "Configure": "@roblox/globaltype/Port.Configure",
      "PortID": "@roblox/globaltype/Port.PortID",
      "Triggered": "@roblox/globaltype/Port.Triggered"
    }
  },
  "@roblox/globaltype/Port.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Port.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Port.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Port.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Port.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Port.PortID": {
    "documentation": "The ID of this port used to utilize this port by connected <code>Microcontroller</code>s."
  },
  "@roblox/globaltype/Port.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/PortConfiguration": {
    "documentation": "The configuration of the <code>Port</code> object.",
    "keys": {
      "PortID": "@roblox/globaltype/PortConfiguration.PortID"
    }
  },
  "@roblox/globaltype/PortConfiguration.PortID": {
    "documentation": "The ID of this port used to utilize this port by connected <code>Microcontroller</code>s."
  },
  "@roblox/globaltype/PortLike": {
    "documentation": "A value that will be accepted as a port by the <code>GetPart(s)(FromPort)</code> functions."
  },
  "@roblox/globaltype/PowerCell": {
    "documentation": "Stores electricity, and is used to power many devices using wires or by directly attaching it.\nHas a maximum capacity of 200000.",
    "keys": {
      "ClassName": "@roblox/globaltype/PowerCell.ClassName",
      "ContainerChanged": "@roblox/globaltype/PowerCell.ContainerChanged",
      "GetAmount": "@roblox/globaltype/PowerCell.GetAmount",
      "GetResource": "@roblox/globaltype/PowerCell.GetResource",
      "GetResourceAmount": "@roblox/globaltype/PowerCell.GetResourceAmount"
    }
  },
  "@roblox/globaltype/PowerCell.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/PowerCell.ContainerChanged": {
    "documentation": "Fires when the amount of the resource in the container changes."
  },
  "@roblox/globaltype/PowerCell.GetAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PowerCell.GetAmount/returns/0"
    ]
  },
  "@roblox/globaltype/PowerCell.GetAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/PowerCell.GetResource": {
    "documentation": "Gets the name of the resource contained, will return the <i>string</i> <code>\"nil\"</code> if nothing is stored, rather than <i>actually</i> returning <code>nil</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PowerCell.GetResource/returns/0"
    ]
  },
  "@roblox/globaltype/PowerCell.GetResource/returns/0": {},
  "@roblox/globaltype/PowerCell.GetResourceAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/PowerCell.GetResourceAmount/returns/0"
    ]
  },
  "@roblox/globaltype/PowerCell.GetResourceAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/Primer": {
    "documentation": "A component used in crafting recipes for a few objects.",
    "keys": {
      "ClassName": "@roblox/globaltype/Primer.ClassName"
    }
  },
  "@roblox/globaltype/Primer.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Propeller": {
    "documentation": "Propellers propel forward when spun.\nForward direction indicated by white spot.\nDoes not work in space or non atmospheric planets.",
    "keys": {
      "ClassName": "@roblox/globaltype/Propeller.ClassName",
      "Loop": "@roblox/globaltype/Propeller.Loop"
    }
  },
  "@roblox/globaltype/Propeller.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Propeller.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Prosthetic": {
    "documentation": "An artificial part that can be attached to players in exchange for a limb.\nThe limb configuration can be configureed to be the limb you want to have for a prosthetic, for example configuring it to be \"Right Leg\" will have the prosthetic attach itself to your character.\nSimply touch the prosthetic, and it will automatically be attached to your body. This process is extremely unhealthy, however, and may result in short-term complications.\n\nParts can be attached to the prosthetic, allowing many uses for the prosthetic limb.\n\nProsthetic limbs are also electrically conductable, acting as a wire.\n\nHeavily damages the character once attached.\nProsthetics can't have more than 50 parts attached to them.",
    "keys": {
      "ClassName": "@roblox/globaltype/Prosthetic.ClassName",
      "Configure": "@roblox/globaltype/Prosthetic.Configure",
      "Configured": "@roblox/globaltype/Prosthetic.Configured",
      "Limb": "@roblox/globaltype/Prosthetic.Limb"
    }
  },
  "@roblox/globaltype/Prosthetic.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Prosthetic.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Prosthetic.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Prosthetic.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Prosthetic.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Prosthetic.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Prosthetic.Limb": {
    "documentation": "The name of the limb that this Prosthetic is for."
  },
  "@roblox/globaltype/ProstheticConfiguration": {
    "documentation": "The configuration of the <code>Prosthetic</code> object.",
    "keys": {
      "Limb": "@roblox/globaltype/ProstheticConfiguration.Limb"
    }
  },
  "@roblox/globaltype/ProstheticConfiguration.Limb": {
    "documentation": "The name of the limb that this Prosthetic is for."
  },
  "@roblox/globaltype/ProximityButton": {
    "documentation": "Sends trigger signals when interacted via its ProximityPrompt.",
    "keys": {
      "ClassName": "@roblox/globaltype/ProximityButton.ClassName",
      "Configure": "@roblox/globaltype/ProximityButton.Configure",
      "Configured": "@roblox/globaltype/ProximityButton.Configured",
      "GamepadKeyCode": "@roblox/globaltype/ProximityButton.GamepadKeyCode",
      "HoldDuration": "@roblox/globaltype/ProximityButton.HoldDuration",
      "KeyboardKeyCode": "@roblox/globaltype/ProximityButton.KeyboardKeyCode",
      "MaxActivationDistance": "@roblox/globaltype/ProximityButton.MaxActivationDistance",
      "ObjectText": "@roblox/globaltype/ProximityButton.ObjectText",
      "PromptButtonHoldBegan": "@roblox/globaltype/ProximityButton.PromptButtonHoldBegan",
      "PromptButtonHoldEnded": "@roblox/globaltype/ProximityButton.PromptButtonHoldEnded",
      "PromptTriggerEnded": "@roblox/globaltype/ProximityButton.PromptTriggerEnded",
      "PromptTriggered": "@roblox/globaltype/ProximityButton.PromptTriggered",
      "RequiresLineOfSight": "@roblox/globaltype/ProximityButton.RequiresLineOfSight"
    }
  },
  "@roblox/globaltype/ProximityButton.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/ProximityButton.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/ProximityButton.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/ProximityButton.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/ProximityButton.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/ProximityButton.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/ProximityButton.GamepadKeyCode": {
    "documentation": "The name of the key that will trigger the proximity prompt on a gamepad."
  },
  "@roblox/globaltype/ProximityButton.HoldDuration": {
    "documentation": "The length of time that the proximity prompt has to be held down for."
  },
  "@roblox/globaltype/ProximityButton.KeyboardKeyCode": {
    "documentation": "The name of the key that will trigger the proximity prompt on a keyboard."
  },
  "@roblox/globaltype/ProximityButton.MaxActivationDistance": {
    "documentation": "The range of the prompt, from 0 - 50."
  },
  "@roblox/globaltype/ProximityButton.ObjectText": {
    "documentation": "The text of the proximity prompt."
  },
  "@roblox/globaltype/ProximityButton.PromptButtonHoldBegan": {},
  "@roblox/globaltype/ProximityButton.PromptButtonHoldEnded": {},
  "@roblox/globaltype/ProximityButton.PromptTriggerEnded": {},
  "@roblox/globaltype/ProximityButton.PromptTriggered": {},
  "@roblox/globaltype/ProximityButton.RequiresLineOfSight": {
    "documentation": "Whether a line of sight to the center of the part is required for the prompt to become visible."
  },
  "@roblox/globaltype/ProximityButtonConfiguration": {
    "documentation": "The configuration of the <code>ProximityButton</code> object.",
    "keys": {
      "GamepadKeyCode": "@roblox/globaltype/ProximityButtonConfiguration.GamepadKeyCode",
      "HoldDuration": "@roblox/globaltype/ProximityButtonConfiguration.HoldDuration",
      "KeyboardKeyCode": "@roblox/globaltype/ProximityButtonConfiguration.KeyboardKeyCode",
      "MaxActivationDistance": "@roblox/globaltype/ProximityButtonConfiguration.MaxActivationDistance",
      "ObjectText": "@roblox/globaltype/ProximityButtonConfiguration.ObjectText",
      "RequiresLineOfSight": "@roblox/globaltype/ProximityButtonConfiguration.RequiresLineOfSight"
    }
  },
  "@roblox/globaltype/ProximityButtonConfiguration.GamepadKeyCode": {
    "documentation": "The name of the key that will trigger the proximity prompt on a gamepad."
  },
  "@roblox/globaltype/ProximityButtonConfiguration.HoldDuration": {
    "documentation": "The length of time that the proximity prompt has to be held down for."
  },
  "@roblox/globaltype/ProximityButtonConfiguration.KeyboardKeyCode": {
    "documentation": "The name of the key that will trigger the proximity prompt on a keyboard."
  },
  "@roblox/globaltype/ProximityButtonConfiguration.MaxActivationDistance": {
    "documentation": "The range of the prompt, from 0 - 50."
  },
  "@roblox/globaltype/ProximityButtonConfiguration.ObjectText": {
    "documentation": "The text of the proximity prompt."
  },
  "@roblox/globaltype/ProximityButtonConfiguration.RequiresLineOfSight": {
    "documentation": "Whether a line of sight to the center of the part is required for the prompt to become visible."
  },
  "@roblox/globaltype/Pulverizer": {
    "documentation": "Pulverizes resources into powdered forms. Power cost: 3/s.\n\nRecipes:\n- 1x <b>Quartz</b>,1x <b>Stone</b> → 2x <b>Sand</b>\n- 1x <b>Ice</b> → 1x <b>Snow</b>",
    "keys": {
      "ClassName": "@roblox/globaltype/Pulverizer.ClassName"
    }
  },
  "@roblox/globaltype/Pulverizer.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Pump": {
    "documentation": "Pumps liquid from the environment into attached Tanks. For example, a pump located in the ocean will pump water when powered.",
    "keys": {
      "ClassName": "@roblox/globaltype/Pump.ClassName",
      "Configure": "@roblox/globaltype/Pump.Configure",
      "Configured": "@roblox/globaltype/Pump.Configured",
      "LiquidToPump": "@roblox/globaltype/Pump.LiquidToPump",
      "Loop": "@roblox/globaltype/Pump.Loop"
    }
  },
  "@roblox/globaltype/Pump.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Pump.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Pump.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Pump.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Pump.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Pump.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Pump.LiquidToPump": {
    "documentation": "The name of the liquid to extract using the pump."
  },
  "@roblox/globaltype/Pump.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/PumpConfiguration": {
    "documentation": "The configuration of the <code>Pump</code> object.",
    "keys": {
      "LiquidToPump": "@roblox/globaltype/PumpConfiguration.LiquidToPump"
    }
  },
  "@roblox/globaltype/PumpConfiguration.LiquidToPump": {
    "documentation": "The name of the liquid to extract using the pump."
  },
  "@roblox/globaltype/Quartz": {
    "documentation": "A translucent and malleable crystal useful for making durable windows.",
    "keys": {
      "ClassName": "@roblox/globaltype/Quartz.ClassName"
    }
  },
  "@roblox/globaltype/Quartz.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/RTG": {
    "documentation": "Creates electricity from decaying radioactive elements.",
    "keys": {
      "ClassName": "@roblox/globaltype/RTG.ClassName"
    }
  },
  "@roblox/globaltype/RTG.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Radar": {
    "documentation": "An instrument that shows a 2D top-down representation of Earth.",
    "keys": {
      "ClassName": "@roblox/globaltype/Radar.ClassName",
      "Loop": "@roblox/globaltype/Radar.Loop"
    }
  },
  "@roblox/globaltype/Radar.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Radar.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Radiator": {
    "documentation": "LEGACY. Emits heat by releasing photons, making it ideal for discarding heat, and cooling things down. Will raise the temperature of surrounding air by <b>2.25 °F/s</b> (<b>85%</b> of the input heat will be permanently discarded). Effectively gets rid of <b>16.6 kW</b> (1 kW is 1 kJ/s) of heat energy. In total, only <b>2.93 kW</b> of the heat energy it releases will re-enter any surrounding air. In space, all <b>19.53 kW</b> of the Radiator's throughput will be expelled.",
    "keys": {
      "ClassName": "@roblox/globaltype/Radiator.ClassName"
    }
  },
  "@roblox/globaltype/Radiator.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Rail": {
    "documentation": "Slides and moves objects along its surface when powered and triggered.\nUseful for creating retractable pistons and actuators, for turrets or other retractable devices.\nRails will only move objects connected on the relative top surface of the rail.\n\nRails have 2 configurations, <code>Position1</code> and <code>Position2</code>.\nBoth configurations should be between 0 and 100. These are percents of where the attached objects should slide to.\nFor example, if a rail was 50 studs long and <code>Position2</code> was 50 or 50%, the attached objects will slide to the middle or at 25 studs.\n\nThe rail can only be activated through the use of polysilicons.\n- <code>Activating</code> polysilicons will set the rail to <code>Position1</code>.\n- <code>Deactivating</code> polysilicons will set the rail to <code>Position2</code>.\n- <code>FlipFlop</code> polysilicons will act like a switch, setting to <code>Position2</code> if <code>Position1</code> and vice versa.\n\nDue to roblox physics, rails may act weirdly. To prevent this from happening, you should always place your rails first before anything else.\nIt is recommended to attach objects on the rail after the rail is safely placed down.",
    "keys": {
      "ClassName": "@roblox/globaltype/Rail.ClassName",
      "Configure": "@roblox/globaltype/Rail.Configure",
      "Position1": "@roblox/globaltype/Rail.Position1",
      "Position2": "@roblox/globaltype/Rail.Position2",
      "SetPosition": "@roblox/globaltype/Rail.SetPosition",
      "TweenTime": "@roblox/globaltype/Rail.TweenTime"
    }
  },
  "@roblox/globaltype/Rail.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Rail.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Rail.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Rail.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Rail.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Rail.Position1": {
    "documentation": "Determines the position of the first state of the rail."
  },
  "@roblox/globaltype/Rail.Position2": {
    "documentation": "Determines the position of the second state of the rail."
  },
  "@roblox/globaltype/Rail.SetPosition": {
    "documentation": "Sets the position of the rail.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Rail.SetPosition",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Rail.SetPosition/params/1",
        "name": "depth"
      }
    ]
  },
  "@roblox/globaltype/Rail.SetPosition/params/1": {},
  "@roblox/globaltype/Rail.TweenTime": {
    "documentation": "Determines the time it takes for the rail to change positions."
  },
  "@roblox/globaltype/RailConfiguration": {
    "documentation": "The configuration of the <code>Rail</code> object.",
    "keys": {
      "Position1": "@roblox/globaltype/RailConfiguration.Position1",
      "Position2": "@roblox/globaltype/RailConfiguration.Position2",
      "TweenTime": "@roblox/globaltype/RailConfiguration.TweenTime"
    }
  },
  "@roblox/globaltype/RailConfiguration.Position1": {
    "documentation": "Determines the position of the first state of the rail."
  },
  "@roblox/globaltype/RailConfiguration.Position2": {
    "documentation": "Determines the position of the second state of the rail."
  },
  "@roblox/globaltype/RailConfiguration.TweenTime": {
    "documentation": "Determines the time it takes for the rail to change positions."
  },
  "@roblox/globaltype/Railgun": {
    "documentation": "Fires a piercing <code>Rail</code> at high speeds. A long range weapon. Requires <code>Rail</code>s and electricity for ammo. The damage increases for every 10 studs of length.\nIt will pierce if the hit part is destroyed. Must be at least have a width and height of 6 and at least a length of 30 to function.\nWhile the <code>Railgun</code> is similar to the <code>Artillery</code>, the <code>Railgun</code> is nearly instant while <code>Artillery</code> is a projectile weapon.\n\nRequires to charge for one minute before it can fire. While charging and when charged, it creates large amount of heat. The charging status resets when this part is damaged.\nWhen it is finished charging, it will stop creating a sound. At that point, it must be triggered and supplied by a <code>Rail</code> bin in order to fire.",
    "keys": {
      "ClassName": "@roblox/globaltype/Railgun.ClassName",
      "Damaged": "@roblox/globaltype/Railgun.Damaged",
      "Loop": "@roblox/globaltype/Railgun.Loop",
      "Triggered": "@roblox/globaltype/Railgun.Triggered"
    }
  },
  "@roblox/globaltype/Railgun.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Railgun.Damaged": {
    "documentation": "Fires when the object is damaged."
  },
  "@roblox/globaltype/Railgun.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Railgun.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/Range": {
    "documentation": "Specifies a range of values, it is a string of the form <code>min:max</code>."
  },
  "@roblox/globaltype/RawFileSystem": {
    "keys": {
      "Device": "@roblox/globaltype/RawFileSystem.Device",
      "Directory": "@roblox/globaltype/RawFileSystem.Directory",
      "File": "@roblox/globaltype/RawFileSystem.File",
      "Link": "@roblox/globaltype/RawFileSystem.Link",
      "Root": "@roblox/globaltype/RawFileSystem.Root",
      "SYSTEM_NOACCESS": "@roblox/globaltype/RawFileSystem.SYSTEM_NOACCESS",
      "SYSTEM_READONLY": "@roblox/globaltype/RawFileSystem.SYSTEM_READONLY",
      "read": "@roblox/globaltype/RawFileSystem.read",
      "readlink": "@roblox/globaltype/RawFileSystem.readlink",
      "write": "@roblox/globaltype/RawFileSystem.write"
    }
  },
  "@roblox/globaltype/RawFileSystem.Device": {
    "params": [
      {
        "documentation": "@roblox/globaltype/RawFileSystem.Device/params/0",
        "name": "device"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.Device/params/1",
        "name": "attributes"
      }
    ],
    "returns": [
      "@roblox/globaltype/RawFileSystem.Device/returns/0"
    ]
  },
  "@roblox/globaltype/RawFileSystem.Device/params/0": {},
  "@roblox/globaltype/RawFileSystem.Device/params/1": {},
  "@roblox/globaltype/RawFileSystem.Device/returns/0": {},
  "@roblox/globaltype/RawFileSystem.Directory": {
    "params": [
      {
        "documentation": "@roblox/globaltype/RawFileSystem.Directory/params/0",
        "name": "contents"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.Directory/params/1",
        "name": "attributes"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.Directory/params/2",
        "name": "readonly"
      }
    ],
    "returns": [
      "@roblox/globaltype/RawFileSystem.Directory/returns/0"
    ]
  },
  "@roblox/globaltype/RawFileSystem.Directory/params/0": {},
  "@roblox/globaltype/RawFileSystem.Directory/params/1": {},
  "@roblox/globaltype/RawFileSystem.Directory/params/2": {},
  "@roblox/globaltype/RawFileSystem.Directory/returns/0": {},
  "@roblox/globaltype/RawFileSystem.File": {
    "params": [
      {
        "documentation": "@roblox/globaltype/RawFileSystem.File/params/0",
        "name": "contents"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.File/params/1",
        "name": "attributes"
      }
    ],
    "returns": [
      "@roblox/globaltype/RawFileSystem.File/returns/0"
    ]
  },
  "@roblox/globaltype/RawFileSystem.File/params/0": {},
  "@roblox/globaltype/RawFileSystem.File/params/1": {},
  "@roblox/globaltype/RawFileSystem.File/returns/0": {},
  "@roblox/globaltype/RawFileSystem.Link": {
    "params": [
      {
        "documentation": "@roblox/globaltype/RawFileSystem.Link/params/0",
        "name": "pathname"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.Link/params/1",
        "name": "attributes"
      }
    ],
    "returns": [
      "@roblox/globaltype/RawFileSystem.Link/returns/0"
    ]
  },
  "@roblox/globaltype/RawFileSystem.Link/params/0": {},
  "@roblox/globaltype/RawFileSystem.Link/params/1": {},
  "@roblox/globaltype/RawFileSystem.Link/returns/0": {},
  "@roblox/globaltype/RawFileSystem.Root": {
    "params": [
      {
        "documentation": "@roblox/globaltype/RawFileSystem.Root/params/0",
        "name": "root"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.Root/params/1",
        "name": "attributes"
      }
    ],
    "returns": [
      "@roblox/globaltype/RawFileSystem.Root/returns/0"
    ]
  },
  "@roblox/globaltype/RawFileSystem.Root/params/0": {},
  "@roblox/globaltype/RawFileSystem.Root/params/1": {},
  "@roblox/globaltype/RawFileSystem.Root/returns/0": {},
  "@roblox/globaltype/RawFileSystem.SYSTEM_NOACCESS": {},
  "@roblox/globaltype/RawFileSystem.SYSTEM_READONLY": {},
  "@roblox/globaltype/RawFileSystem.read": {
    "params": [
      {
        "documentation": "@roblox/globaltype/RawFileSystem.read",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.read/params/1",
        "name": "root"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.read/params/2",
        "name": "pathname"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.read/params/3",
        "name": "options"
      }
    ],
    "returns": [
      "@roblox/globaltype/RawFileSystem.read/returns/0"
    ]
  },
  "@roblox/globaltype/RawFileSystem.read/params/1": {},
  "@roblox/globaltype/RawFileSystem.read/params/2": {},
  "@roblox/globaltype/RawFileSystem.read/params/3": {},
  "@roblox/globaltype/RawFileSystem.read/returns/0": {},
  "@roblox/globaltype/RawFileSystem.readlink": {
    "params": [
      {
        "documentation": "@roblox/globaltype/RawFileSystem.readlink",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.readlink/params/1",
        "name": "root"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.readlink/params/2",
        "name": "link"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.readlink/params/3",
        "name": "options"
      }
    ],
    "returns": [
      "@roblox/globaltype/RawFileSystem.readlink/returns/0"
    ]
  },
  "@roblox/globaltype/RawFileSystem.readlink/params/1": {},
  "@roblox/globaltype/RawFileSystem.readlink/params/2": {},
  "@roblox/globaltype/RawFileSystem.readlink/params/3": {},
  "@roblox/globaltype/RawFileSystem.readlink/returns/0": {},
  "@roblox/globaltype/RawFileSystem.write": {
    "params": [
      {
        "documentation": "@roblox/globaltype/RawFileSystem.write",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.write/params/1",
        "name": "root"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.write/params/2",
        "name": "pathname"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.write/params/3",
        "name": "node"
      },
      {
        "documentation": "@roblox/globaltype/RawFileSystem.write/params/4",
        "name": "options"
      }
    ]
  },
  "@roblox/globaltype/RawFileSystem.write/params/1": {},
  "@roblox/globaltype/RawFileSystem.write/params/2": {},
  "@roblox/globaltype/RawFileSystem.write/params/3": {},
  "@roblox/globaltype/RawFileSystem.write/params/4": {},
  "@roblox/globaltype/Reactor": {
    "documentation": "Generates steam using water and heat from radiation.\nUp to 4 pieces of uranium can be inserted into the reactor as fuel.\nIf the temperature is above 400, it will begin to turn water into steam (rate dependent on temperature).\nIf the temperature exceeds 1200 F, a meltdown will occur.\nThe Reactor fuel status can be acquired through the :GetFuel() method with a microcontroller.\nPolysilicon is used to control a reactor, and fuel must be ejected manually:\n\nActivation lowers the control rods, decreasing reaction rate.\nDeactivation raises the control rods, allowing fuel to react.\nFlipFlop will eject fuel or waste from the fuel rod with the least fuel.",
    "keys": {
      "Alarm": "@roblox/globaltype/Reactor.Alarm",
      "ClassName": "@roblox/globaltype/Reactor.ClassName",
      "Configure": "@roblox/globaltype/Reactor.Configure",
      "GetEfficiency": "@roblox/globaltype/Reactor.GetEfficiency",
      "GetFuel": "@roblox/globaltype/Reactor.GetFuel",
      "GetTemp": "@roblox/globaltype/Reactor.GetTemp",
      "Loop": "@roblox/globaltype/Reactor.Loop",
      "TriggerWhenEmpty": "@roblox/globaltype/Reactor.TriggerWhenEmpty"
    }
  },
  "@roblox/globaltype/Reactor.Alarm": {
    "documentation": "Determines whether the reactor alarm system is enabled for when the reactor is near meltdown temperature."
  },
  "@roblox/globaltype/Reactor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Reactor.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Reactor.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Reactor.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Reactor.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Reactor.GetEfficiency": {
    "params": [],
    "returns": [
      "@roblox/globaltype/Reactor.GetEfficiency/returns/0"
    ]
  },
  "@roblox/globaltype/Reactor.GetEfficiency/returns/0": {},
  "@roblox/globaltype/Reactor.GetFuel": {
    "documentation": "Returns an array with four numeric values each representative of their fuel rod. The order is strict and goes from the first to the fourth fuel rod.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Reactor.GetFuel/returns/0"
    ]
  },
  "@roblox/globaltype/Reactor.GetFuel/returns/0": {},
  "@roblox/globaltype/Reactor.GetTemp": {
    "documentation": "Returns a numeric value representing the current temperature of the reactor in degrees fahrenheit.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Reactor.GetTemp/returns/0"
    ]
  },
  "@roblox/globaltype/Reactor.GetTemp/returns/0": {
    "documentation": "The current temperature of the reactor in degrees fahrenheit."
  },
  "@roblox/globaltype/Reactor.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Reactor.TriggerWhenEmpty": {
    "documentation": "Determines whether or not the reactor will emit a trigger signal when its fuel is empty."
  },
  "@roblox/globaltype/ReactorConfiguration": {
    "documentation": "The configuration of the <code>Reactor</code> object.",
    "keys": {
      "Alarm": "@roblox/globaltype/ReactorConfiguration.Alarm",
      "TriggerWhenEmpty": "@roblox/globaltype/ReactorConfiguration.TriggerWhenEmpty"
    }
  },
  "@roblox/globaltype/ReactorConfiguration.Alarm": {
    "documentation": "Determines whether the reactor alarm system is enabled for when the reactor is near meltdown temperature."
  },
  "@roblox/globaltype/ReactorConfiguration.TriggerWhenEmpty": {
    "documentation": "Determines whether or not the reactor will emit a trigger signal when its fuel is empty."
  },
  "@roblox/globaltype/Refinery": {
    "documentation": "Turns oil into Petroleum and Gasoline.",
    "keys": {
      "ClassName": "@roblox/globaltype/Refinery.ClassName",
      "Loop": "@roblox/globaltype/Refinery.Loop"
    }
  },
  "@roblox/globaltype/Refinery.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Refinery.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/RegionCloaker": {
    "documentation": "Hides a certain region from players, making the coordinates not appear on their screen.\nRegion can only be (un)cloaked every 25 seconds. So if you unpower the <code>RegionCloaker</code>, you must wait 25 seconds before powering it again to ensure the region gets cloaked.",
    "keys": {
      "ClassName": "@roblox/globaltype/RegionCloaker.ClassName"
    }
  },
  "@roblox/globaltype/RegionCloaker.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/RegionColor": {
    "documentation": "The color of the region, used for planets.",
    "keys": {
      "B": "@roblox/globaltype/RegionColor.B",
      "G": "@roblox/globaltype/RegionColor.G",
      "R": "@roblox/globaltype/RegionColor.R"
    }
  },
  "@roblox/globaltype/RegionColor.B": {
    "documentation": "The blue channel of the region color."
  },
  "@roblox/globaltype/RegionColor.G": {
    "documentation": "The green channel of the region color."
  },
  "@roblox/globaltype/RegionColor.R": {
    "documentation": "The red channel of the region color."
  },
  "@roblox/globaltype/RegionEntryLocation": {
    "documentation": "The location where the player warps into a region.",
    "keys": {
      "X": "@roblox/globaltype/RegionEntryLocation.X",
      "Y": "@roblox/globaltype/RegionEntryLocation.Y",
      "Z": "@roblox/globaltype/RegionEntryLocation.Z"
    }
  },
  "@roblox/globaltype/RegionEntryLocation.X": {
    "documentation": "The <code>X</code> position of the location."
  },
  "@roblox/globaltype/RegionEntryLocation.Y": {
    "documentation": "The <code>Y</code> position of the location."
  },
  "@roblox/globaltype/RegionEntryLocation.Z": {
    "documentation": "The <code>Z</code> position of the location."
  },
  "@roblox/globaltype/RegionInfo": {},
  "@roblox/globaltype/RegionLog": {
    "documentation": "A log of an event that happened in a region, such as a player spawning into or warping out of the region.",
    "keys": {
      "Desc": "@roblox/globaltype/RegionLog.Desc",
      "Event": "@roblox/globaltype/RegionLog.Event",
      "TimeAgo": "@roblox/globaltype/RegionLog.TimeAgo"
    }
  },
  "@roblox/globaltype/RegionLog.Desc": {
    "documentation": "A description of the event that happened in the region."
  },
  "@roblox/globaltype/RegionLog.Event": {
    "documentation": "The type of event that happened in the region."
  },
  "@roblox/globaltype/RegionLog.TimeAgo": {
    "documentation": "The time since the event happened, in seconds. Does not update in real time."
  },
  "@roblox/globaltype/RegionLogType": {
    "documentation": "The type of a region log, used to describe what happened in the region."
  },
  "@roblox/globaltype/ReinforcedGlass": {
    "documentation": "A stronger, slightly less malleable version of glass. Blocks radiation.",
    "keys": {
      "ClassName": "@roblox/globaltype/ReinforcedGlass.ClassName"
    }
  },
  "@roblox/globaltype/ReinforcedGlass.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Relay": {
    "documentation": "A powerful transmitter capable of transmitting trigger signals and resources/power between different regions.\nIt is a more powerful version of the antenna and transporter.\n\nUnlike the antenna, the relay has 2 modes, mode 0 and mode 1.\nMode 0 sends resources/power and trigger signals, while mode 1 receives it.\n\nUnlike the antenna, it can also transfer power in inactive regions or regions without players in them.\nThis means that you can connect a relay to your main base, warp away without anyone in the base, and still have the relay get the sufficient amount of power.\n\nHowever, you should have only one sending relay per coordinate, as conflicts can occur if there are 2 or more relays in the region/coordinates sending power or signals with the same ID.\nOn the other hand, there can be an infinite number of receivers but the power/resources will be distributed evenly among them.\n\nFor example, let's say a relay network has a total output of 500 power and 25 iron. If there are 5 active receivers, each of them will get 100 power and 5 iron.\n\nWhen the relay is red, it means it not functioning. When it turns green, it is properly linked up to another relay or is sending signals.",
    "keys": {
      "ClassName": "@roblox/globaltype/Relay.ClassName",
      "Configure": "@roblox/globaltype/Relay.Configure",
      "LinkerID": "@roblox/globaltype/Relay.LinkerID",
      "Mode": "@roblox/globaltype/Relay.Mode"
    }
  },
  "@roblox/globaltype/Relay.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Relay.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Relay.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Relay.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Relay.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Relay.LinkerID": {
    "documentation": "The ID of the relay, to send or take materials to or from other relays with the same ID."
  },
  "@roblox/globaltype/Relay.Mode": {
    "documentation": "The mode of the relay. Send outputs materials to other receiving relays; Receive receives materials from sending relays."
  },
  "@roblox/globaltype/RelayConfiguration": {
    "documentation": "The configuration of the <code>Relay</code> object.",
    "keys": {
      "LinkerID": "@roblox/globaltype/RelayConfiguration.LinkerID",
      "Mode": "@roblox/globaltype/RelayConfiguration.Mode"
    }
  },
  "@roblox/globaltype/RelayConfiguration.LinkerID": {
    "documentation": "The ID of the relay, to send or take materials to or from other relays with the same ID."
  },
  "@roblox/globaltype/RelayConfiguration.Mode": {
    "documentation": "The mode of the relay. Send outputs materials to other receiving relays; Receive receives materials from sending relays."
  },
  "@roblox/globaltype/RelayMode": {
    "documentation": "The mode of the relay, used in the <code>Relay</code> part."
  },
  "@roblox/globaltype/RemoteControl": {
    "documentation": "Sends trigger signals forward wirelessly when triggered. Supports all variants of trigger signals including from Polysilicon.",
    "keys": {
      "ClassName": "@roblox/globaltype/RemoteControl.ClassName",
      "Configure": "@roblox/globaltype/RemoteControl.Configure",
      "RemoteControlMode": "@roblox/globaltype/RemoteControl.RemoteControlMode",
      "RemoteControlRange": "@roblox/globaltype/RemoteControl.RemoteControlRange"
    }
  },
  "@roblox/globaltype/RemoteControl.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/RemoteControl.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/RemoteControl.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/RemoteControl.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/RemoteControl.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/RemoteControl.RemoteControlMode": {
    "documentation": "The way in which trigger signals should be transmitted. This setting only affects parts that are connective to trigger signals (e.g. TriggerWire)."
  },
  "@roblox/globaltype/RemoteControl.RemoteControlRange": {
    "documentation": "The range in studs at which signals will be transmitted."
  },
  "@roblox/globaltype/RemoteControlConfiguration": {
    "documentation": "The configuration of the <code>RemoteControl</code> object.",
    "keys": {
      "RemoteControlMode": "@roblox/globaltype/RemoteControlConfiguration.RemoteControlMode",
      "RemoteControlRange": "@roblox/globaltype/RemoteControlConfiguration.RemoteControlRange"
    }
  },
  "@roblox/globaltype/RemoteControlConfiguration.RemoteControlMode": {
    "documentation": "The way in which trigger signals should be transmitted. This setting only affects parts that are connective to trigger signals (e.g. TriggerWire)."
  },
  "@roblox/globaltype/RemoteControlConfiguration.RemoteControlRange": {
    "documentation": "The range in studs at which signals will be transmitted."
  },
  "@roblox/globaltype/RemoteControlMode": {
    "documentation": "The mode of the remote control, used in the <code>RemoteControl</code> part."
  },
  "@roblox/globaltype/RepairKit": {
    "documentation": "A useful kit of tools that can be used to repair objects which have been damaged. Keep away from biters.",
    "keys": {
      "ClassName": "@roblox/globaltype/RepairKit.ClassName"
    }
  },
  "@roblox/globaltype/RepairKit.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/RepairLaser": {
    "documentation": "Fires a beam that repairs objects. Repairs <b>1</b> HP/s.",
    "keys": {
      "ClassName": "@roblox/globaltype/RepairLaser.ClassName",
      "Loop": "@roblox/globaltype/RepairLaser.Loop"
    }
  },
  "@roblox/globaltype/RepairLaser.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/RepairLaser.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/RepairPlate": {
    "documentation": "EXPERIMENTAL - While at least <b>90%</b> charged (<b>27</b> power), distributes repaired health between itself and damaged parts attached to its top surface.\n\nCharges at a fixed rate of <b>1</b> power per second, up to a total capacity of <b>30</b>. Once charged, it consumes <b>2.5</b> power per second.\nCan be chained with other <code>RepairPlate</code>s.\nPower cannot be inserted or extracted.\nCannot be resized below 1x1x1.",
    "keys": {
      "ClassName": "@roblox/globaltype/RepairPlate.ClassName",
      "Loop": "@roblox/globaltype/RepairPlate.Loop"
    }
  },
  "@roblox/globaltype/RepairPlate.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/RepairPlate.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/ResourceString": {
    "documentation": "A string representing an object's [<code>ClassName</code>](</objects/PilotObject#ClassName>)"
  },
  "@roblox/globaltype/Rice": {
    "documentation": "Rice is nice.",
    "keys": {
      "ClassName": "@roblox/globaltype/Rice.ClassName"
    }
  },
  "@roblox/globaltype/Rice.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Rifle": {
    "documentation": "A powerful long-range bolt action weapon. Q to scope.",
    "keys": {
      "ClassName": "@roblox/globaltype/Rifle.ClassName"
    }
  },
  "@roblox/globaltype/Rifle.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/RingData": {
    "documentation": "The data about the rings of a planet, if it has any.",
    "keys": {
      "RingStart": "@roblox/globaltype/RingData.RingStart",
      "RingsAmount": "@roblox/globaltype/RingData.RingsAmount",
      "RingsEnd": "@roblox/globaltype/RingData.RingsEnd",
      "RingsType": "@roblox/globaltype/RingData.RingsType"
    }
  },
  "@roblox/globaltype/RingData.RingStart": {},
  "@roblox/globaltype/RingData.RingsAmount": {
    "documentation": "The total amount of individual asteroids within the rings."
  },
  "@roblox/globaltype/RingData.RingsEnd": {},
  "@roblox/globaltype/RingData.RingsType": {
    "documentation": "The physical material the majority of the rings are made of."
  },
  "@roblox/globaltype/Rocket": {
    "documentation": "A propulsion device that consumes gasoline.",
    "keys": {
      "ClassName": "@roblox/globaltype/Rocket.ClassName",
      "Configure": "@roblox/globaltype/Rocket.Configure",
      "Configured": "@roblox/globaltype/Rocket.Configured",
      "Loop": "@roblox/globaltype/Rocket.Loop",
      "Propulsion": "@roblox/globaltype/Rocket.Propulsion"
    }
  },
  "@roblox/globaltype/Rocket.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Rocket.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Rocket.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Rocket.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Rocket.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Rocket.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Rocket.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Rocket.Propulsion": {
    "documentation": "Determines the speed traveled at, 0 being standstill. Affects fuel consumption."
  },
  "@roblox/globaltype/RocketConfiguration": {
    "documentation": "The configuration of the <code>Rocket</code> object.",
    "keys": {
      "Propulsion": "@roblox/globaltype/RocketConfiguration.Propulsion"
    }
  },
  "@roblox/globaltype/RocketConfiguration.Propulsion": {
    "documentation": "Determines the speed traveled at, 0 being standstill. Affects fuel consumption."
  },
  "@roblox/globaltype/Rotor": {
    "documentation": "Provides vertical height when spun, and only works in oxygen planets.\nThe spin speed determines the height, and the tilt of the rotor determines the forward propulsion of the rotor.",
    "keys": {
      "ClassName": "@roblox/globaltype/Rotor.ClassName",
      "Loop": "@roblox/globaltype/Rotor.Loop"
    }
  },
  "@roblox/globaltype/Rotor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Rotor.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/RoundWedge": {
    "documentation": "A block rounded on one edge, or 1/4 of a cylinder.",
    "keys": {
      "ClassName": "@roblox/globaltype/RoundWedge.ClassName"
    }
  },
  "@roblox/globaltype/RoundWedge.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/RoundWedge2": {
    "documentation": "A block rounded inwards on one edge.",
    "keys": {
      "ClassName": "@roblox/globaltype/RoundWedge2.ClassName"
    }
  },
  "@roblox/globaltype/RoundWedge2.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Router": {
    "documentation": "A wireless transmitter that can transmit an ethernet connection.",
    "keys": {
      "ClassName": "@roblox/globaltype/Router.ClassName",
      "Configure": "@roblox/globaltype/Router.Configure",
      "RouterID": "@roblox/globaltype/Router.RouterID"
    }
  },
  "@roblox/globaltype/Router.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Router.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Router.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Router.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Router.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Router.RouterID": {
    "documentation": "The ID of this router, to transmit to others with the same ID."
  },
  "@roblox/globaltype/RouterConfiguration": {
    "documentation": "The configuration of the <code>Router</code> object.",
    "keys": {
      "RouterID": "@roblox/globaltype/RouterConfiguration.RouterID"
    }
  },
  "@roblox/globaltype/RouterConfiguration.RouterID": {
    "documentation": "The ID of this router, to transmit to others with the same ID."
  },
  "@roblox/globaltype/Rubber": {
    "documentation": "A textile resource used in manufacturing many industrial objects.",
    "keys": {
      "ClassName": "@roblox/globaltype/Rubber.ClassName"
    }
  },
  "@roblox/globaltype/Rubber.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Ruby": {
    "documentation": "A shiny red gem which can be found in mountain deposits. Exceptionally durable for how easily it can be obtained. Takes 2x energy damage & allows lasers to pass.",
    "keys": {
      "ClassName": "@roblox/globaltype/Ruby.ClassName"
    }
  },
  "@roblox/globaltype/Ruby.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/RustedMetal": {
    "documentation": "A weathered piece of metal.",
    "keys": {
      "ClassName": "@roblox/globaltype/RustedMetal.ClassName"
    }
  },
  "@roblox/globaltype/RustedMetal.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/SMG": {
    "documentation": "A fast firing, fully automatic gun able to pump out lots of rounds down range.",
    "keys": {
      "ClassName": "@roblox/globaltype/SMG.ClassName"
    }
  },
  "@roblox/globaltype/SMG.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Sail": {
    "documentation": "Utilizes the wind to move forward.",
    "keys": {
      "ClassName": "@roblox/globaltype/Sail.ClassName",
      "Loop": "@roblox/globaltype/Sail.Loop"
    }
  },
  "@roblox/globaltype/Sail.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Sail.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Sand": {
    "documentation": "An abundant resource that can be found in the shores of terra and forest planets, the sea floors of ocean planets and in the dunes of desert planets. When burnt, the sand becomes glass.",
    "keys": {
      "ClassName": "@roblox/globaltype/Sand.ClassName"
    }
  },
  "@roblox/globaltype/Sand.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Scanner": {
    "documentation": "An end-game part which can remotely retrieve Microcontroller references to parts, providing information and control. Can also triangulate the positions of enemy parts given enough well placed scanners.",
    "keys": {
      "CalculateCost": "@roblox/globaltype/Scanner.CalculateCost",
      "ClassName": "@roblox/globaltype/Scanner.ClassName",
      "Configure": "@roblox/globaltype/Scanner.Configure",
      "GetDistance": "@roblox/globaltype/Scanner.GetDistance",
      "GetPartsInRange": "@roblox/globaltype/Scanner.GetPartsInRange",
      "Locate": "@roblox/globaltype/Scanner.Locate",
      "Range": "@roblox/globaltype/Scanner.Range"
    }
  },
  "@roblox/globaltype/Scanner.CalculateCost": {
    "documentation": "Calculates the cost of performing a scan with the given range.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Scanner.CalculateCost",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Scanner.CalculateCost/params/1",
        "name": "range"
      }
    ],
    "returns": [
      "@roblox/globaltype/Scanner.CalculateCost/returns/0"
    ]
  },
  "@roblox/globaltype/Scanner.CalculateCost/params/1": {},
  "@roblox/globaltype/Scanner.CalculateCost/returns/0": {},
  "@roblox/globaltype/Scanner.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Scanner.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Scanner.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Scanner.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Scanner.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Scanner.GetDistance": {
    "documentation": "Gets the approximate distance to the part. Accuracy falls off exponentially.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Scanner.GetDistance",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Scanner.GetDistance/params/1",
        "name": "part"
      }
    ],
    "returns": [
      "@roblox/globaltype/Scanner.GetDistance/returns/0"
    ]
  },
  "@roblox/globaltype/Scanner.GetDistance/params/1": {},
  "@roblox/globaltype/Scanner.GetDistance/returns/0": {},
  "@roblox/globaltype/Scanner.GetPartsInRange": {
    "documentation": "Does a (power hungry) query for all parts in the configured (or specified) range up to 1024 studs. Can optionally filter for a class name, but many use cases will prefer to store part objects in a set.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Scanner.GetPartsInRange",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Scanner.GetPartsInRange/params/1",
        "name": "range"
      },
      {
        "documentation": "@roblox/globaltype/Scanner.GetPartsInRange/params/2",
        "name": "className"
      }
    ],
    "returns": [
      "@roblox/globaltype/Scanner.GetPartsInRange/returns/0"
    ]
  },
  "@roblox/globaltype/Scanner.GetPartsInRange/params/1": {},
  "@roblox/globaltype/Scanner.GetPartsInRange/params/2": {},
  "@roblox/globaltype/Scanner.GetPartsInRange/returns/0": {},
  "@roblox/globaltype/Scanner.Locate": {
    "documentation": "Uses GPS to locate a part (uses :GetDistance() internally). The scanners you provide should be on different axes and stuff. You need at least 3 to correctly identify a position.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Scanner.Locate",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Scanner.Locate/params/1",
        "name": "part"
      },
      {
        "documentation": "@roblox/globaltype/Scanner.Locate/params/2",
        "name": "scanners"
      }
    ],
    "returns": [
      "@roblox/globaltype/Scanner.Locate/returns/0"
    ]
  },
  "@roblox/globaltype/Scanner.Locate/params/1": {},
  "@roblox/globaltype/Scanner.Locate/params/2": {},
  "@roblox/globaltype/Scanner.Locate/returns/0": {},
  "@roblox/globaltype/Scanner.Range": {
    "documentation": "The default range to scan for parts within."
  },
  "@roblox/globaltype/ScannerConfiguration": {
    "documentation": "The configuration of the <code>Scanner</code> object.",
    "keys": {
      "Range": "@roblox/globaltype/ScannerConfiguration.Range"
    }
  },
  "@roblox/globaltype/ScannerConfiguration.Range": {
    "documentation": "The default range to scan for parts within."
  },
  "@roblox/globaltype/Scrapper": {
    "documentation": "Scraps unlocked solid items into their crafting components (with some loss) on contact when powered, else destroys them if unpowered. Will send locked single raw parts such as Iron or AlienCore into connected bins.",
    "keys": {
      "ClassName": "@roblox/globaltype/Scrapper.ClassName",
      "Loop": "@roblox/globaltype/Scrapper.Loop"
    }
  },
  "@roblox/globaltype/Scrapper.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Scrapper.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Screen": {
    "documentation": "Allows for the programmatic creation of GUI elements.\n\nInternally, it utilises a [<code>SurfaceGUI</code>](https://create.roblox.com/docs/reference/engine/classes/SurfaceGui), and is therefore no different from normal roblox GUIs.\n\nThere are some limitations with <code>Screen</code>s in Waste of Space, such as an inability to use <code>[ViewportFrame](https://create.roblox.com/docs/reference/engine/classes/ViewportFrame)</code>s",
    "keys": {
      "ClassName": "@roblox/globaltype/Screen.ClassName",
      "ClearElements": "@roblox/globaltype/Screen.ClearElements",
      "Configure": "@roblox/globaltype/Screen.Configure",
      "Configured": "@roblox/globaltype/Screen.Configured",
      "CreateElement": "@roblox/globaltype/Screen.CreateElement",
      "GetCanvas": "@roblox/globaltype/Screen.GetCanvas",
      "GetDimensions": "@roblox/globaltype/Screen.GetDimensions",
      "VideoID": "@roblox/globaltype/Screen.VideoID"
    }
  },
  "@roblox/globaltype/Screen.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Screen.ClearElements": {
    "documentation": "Clears all objects that are descendants of the screen.",
    "params": []
  },
  "@roblox/globaltype/Screen.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Screen.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Screen.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Screen.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Screen.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Screen.CreateElement": {
    "documentation": "Creates an element of the specified class name with the specified properties.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Screen.CreateElement",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Screen.CreateElement/params/1",
        "name": "className"
      },
      {
        "documentation": "@roblox/globaltype/Screen.CreateElement/params/2",
        "name": "properties"
      }
    ],
    "returns": [
      "@roblox/globaltype/Screen.CreateElement/returns/0"
    ]
  },
  "@roblox/globaltype/Screen.CreateElement/params/1": {},
  "@roblox/globaltype/Screen.CreateElement/params/2": {},
  "@roblox/globaltype/Screen.CreateElement/returns/0": {},
  "@roblox/globaltype/Screen.GetCanvas": {
    "documentation": "Returns the parent container of all the screen's content.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Screen.GetCanvas/returns/0"
    ]
  },
  "@roblox/globaltype/Screen.GetCanvas/returns/0": {},
  "@roblox/globaltype/Screen.GetDimensions": {
    "documentation": "Gets the size of the screen in pixels in the form of a <code>Vector2</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Screen.GetDimensions/returns/0"
    ]
  },
  "@roblox/globaltype/Screen.GetDimensions/returns/0": {
    "documentation": "The size of the screen in pixels."
  },
  "@roblox/globaltype/Screen.VideoID": {
    "documentation": "The ID of the camera feed being to be viewed, or 0 for none."
  },
  "@roblox/globaltype/ScreenConfiguration": {
    "documentation": "The configuration of the <code>Screen</code> object.",
    "keys": {
      "VideoID": "@roblox/globaltype/ScreenConfiguration.VideoID"
    }
  },
  "@roblox/globaltype/ScreenConfiguration.VideoID": {
    "documentation": "The ID of the camera feed being to be viewed, or 0 for none."
  },
  "@roblox/globaltype/ScubaMask": {
    "documentation": "A set of goggles which can be used to help vision while underwater.",
    "keys": {
      "ClassName": "@roblox/globaltype/ScubaMask.ClassName"
    }
  },
  "@roblox/globaltype/ScubaMask.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Seat": {
    "documentation": "A seat.",
    "keys": {
      "ClassName": "@roblox/globaltype/Seat.ClassName",
      "EjectOccupant": "@roblox/globaltype/Seat.EjectOccupant",
      "GetOccupant": "@roblox/globaltype/Seat.GetOccupant",
      "OccupantChanged": "@roblox/globaltype/Seat.OccupantChanged"
    }
  },
  "@roblox/globaltype/Seat.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Seat.EjectOccupant": {
    "documentation": "Ejects the seat occupant.",
    "params": []
  },
  "@roblox/globaltype/Seat.GetOccupant": {
    "documentation": "Retrieves the <code>UserId</code> of the seat's occupant, it will be <code>nil</code> if there is no occupant.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Seat.GetOccupant/returns/0"
    ]
  },
  "@roblox/globaltype/Seat.GetOccupant/returns/0": {
    "documentation": "The <code>UserId</code> of the seat's occupant, or <code>nil</code> if there is no occupant."
  },
  "@roblox/globaltype/Seat.OccupantChanged": {
    "documentation": "Fires when the occupant of the seat changes."
  },
  "@roblox/globaltype/Servo": {
    "documentation": "Spins objects attached to the hinge at the front when powered, to set angles.\n\n<code>Polysilicon</code> can be used to control its angle.\n - <code>Activate</code> will increment the goal angle by the configured angle step (clockwise looking at its face).\n - <code>Deactivate</code> will decrement the goal angle (counter-clockwise).\n - <code>FlipFlop</code> will reset the angle to 0.\n\n<code>Microcontroller</code>s can also set a servo's angle with <code>:SetAngle(targetAngle)</code>",
    "keys": {
      "Angle": "@roblox/globaltype/Servo.Angle",
      "AngleStep": "@roblox/globaltype/Servo.AngleStep",
      "ClassName": "@roblox/globaltype/Servo.ClassName",
      "Configure": "@roblox/globaltype/Servo.Configure",
      "Configured": "@roblox/globaltype/Servo.Configured",
      "Responsiveness": "@roblox/globaltype/Servo.Responsiveness",
      "ServoSpeed": "@roblox/globaltype/Servo.ServoSpeed",
      "SetAngle": "@roblox/globaltype/Servo.SetAngle"
    }
  },
  "@roblox/globaltype/Servo.Angle": {
    "documentation": "Determines the angle of the servo. When configured with a value outside of the specified range, it will be calculated modulo 360 (i.e., 360 ⟹ 0, 375 ⟹ 15, -10 ⟹ 350)."
  },
  "@roblox/globaltype/Servo.AngleStep": {
    "documentation": "Determines the change in angle when a pulse is received by Polysilicon."
  },
  "@roblox/globaltype/Servo.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Servo.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Servo.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Servo.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Servo.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Servo.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Servo.Responsiveness": {
    "documentation": "Determines how fast the servo attempts to correct its angle."
  },
  "@roblox/globaltype/Servo.ServoSpeed": {
    "documentation": "Determines the speed at which the servo is driven."
  },
  "@roblox/globaltype/Servo.SetAngle": {
    "documentation": "Sets the target angle of a servo just as would if you were configuring it.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Servo.SetAngle",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Servo.SetAngle/params/1",
        "name": "angle"
      }
    ]
  },
  "@roblox/globaltype/Servo.SetAngle/params/1": {
    "documentation": "The angle of the servo in angular degrees."
  },
  "@roblox/globaltype/ServoConfiguration": {
    "documentation": "The configuration of the <code>Servo</code> object.",
    "keys": {
      "Angle": "@roblox/globaltype/ServoConfiguration.Angle",
      "AngleStep": "@roblox/globaltype/ServoConfiguration.AngleStep",
      "Responsiveness": "@roblox/globaltype/ServoConfiguration.Responsiveness",
      "ServoSpeed": "@roblox/globaltype/ServoConfiguration.ServoSpeed"
    }
  },
  "@roblox/globaltype/ServoConfiguration.Angle": {
    "documentation": "Determines the angle of the servo. When configured with a value outside of the specified range, it will be calculated modulo 360 (i.e., 360 ⟹ 0, 375 ⟹ 15, -10 ⟹ 350)."
  },
  "@roblox/globaltype/ServoConfiguration.AngleStep": {
    "documentation": "Determines the change in angle when a pulse is received by Polysilicon."
  },
  "@roblox/globaltype/ServoConfiguration.Responsiveness": {
    "documentation": "Determines how fast the servo attempts to correct its angle."
  },
  "@roblox/globaltype/ServoConfiguration.ServoSpeed": {
    "documentation": "Determines the speed at which the servo is driven."
  },
  "@roblox/globaltype/Shotgun": {
    "documentation": "Fires a shot of harmful pellets when triggered.\nMust be supplied with ammo in order to function.\nFor example, you need an iron bin with 1 or more iron directly attached to it to work.",
    "keys": {
      "ClassName": "@roblox/globaltype/Shotgun.ClassName"
    }
  },
  "@roblox/globaltype/Shotgun.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Sign": {
    "documentation": "Displays text or images. To display an image, configure it to id:imageid.",
    "keys": {
      "ClassName": "@roblox/globaltype/Sign.ClassName",
      "Configure": "@roblox/globaltype/Sign.Configure",
      "Configured": "@roblox/globaltype/Sign.Configured",
      "SignText": "@roblox/globaltype/Sign.SignText",
      "TextColor": "@roblox/globaltype/Sign.TextColor",
      "TextFont": "@roblox/globaltype/Sign.TextFont"
    }
  },
  "@roblox/globaltype/Sign.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Sign.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Sign.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Sign.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Sign.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Sign.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Sign.SignText": {
    "documentation": "The text to display on the front of the sign. Rich text is allowed."
  },
  "@roblox/globaltype/Sign.TextColor": {
    "documentation": "The color of the text on the sign."
  },
  "@roblox/globaltype/Sign.TextFont": {
    "documentation": "The font of the text on the sign."
  },
  "@roblox/globaltype/SignConfiguration": {
    "documentation": "The configuration of the <code>Sign</code> object.",
    "keys": {
      "SignText": "@roblox/globaltype/SignConfiguration.SignText",
      "TextColor": "@roblox/globaltype/SignConfiguration.TextColor",
      "TextFont": "@roblox/globaltype/SignConfiguration.TextFont"
    }
  },
  "@roblox/globaltype/SignConfiguration.SignText": {
    "documentation": "The text to display on the front of the sign. Rich text is allowed."
  },
  "@roblox/globaltype/SignConfiguration.TextColor": {
    "documentation": "The color of the text on the sign."
  },
  "@roblox/globaltype/SignConfiguration.TextFont": {
    "documentation": "The font of the text on the sign."
  },
  "@roblox/globaltype/Silicon": {
    "documentation": "A metalloid that is very useful for electronics. Can commonly be found in cliffs and rocks.",
    "keys": {
      "ClassName": "@roblox/globaltype/Silicon.ClassName"
    }
  },
  "@roblox/globaltype/Silicon.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/SimpleBlackHoleRegionInfo": {
    "keys": {
      "BeaconCount": "@roblox/globaltype/SimpleBlackHoleRegionInfo.BeaconCount",
      "Name": "@roblox/globaltype/SimpleBlackHoleRegionInfo.Name",
      "Size": "@roblox/globaltype/SimpleBlackHoleRegionInfo.Size",
      "Type": "@roblox/globaltype/SimpleBlackHoleRegionInfo.Type"
    }
  },
  "@roblox/globaltype/SimpleBlackHoleRegionInfo.BeaconCount": {
    "documentation": "The amount of beacons in the region at the time of the scan."
  },
  "@roblox/globaltype/SimpleBlackHoleRegionInfo.Name": {
    "documentation": "The name of the region."
  },
  "@roblox/globaltype/SimpleBlackHoleRegionInfo.Size": {
    "documentation": "The visual size of the black hole."
  },
  "@roblox/globaltype/SimpleBlackHoleRegionInfo.Type": {
    "documentation": "The type of the region."
  },
  "@roblox/globaltype/SimplePlanetRegionInfo": {
    "keys": {
      "BeaconCount": "@roblox/globaltype/SimplePlanetRegionInfo.BeaconCount",
      "Color": "@roblox/globaltype/SimplePlanetRegionInfo.Color",
      "Gravity": "@roblox/globaltype/SimplePlanetRegionInfo.Gravity",
      "HasAtmosphere": "@roblox/globaltype/SimplePlanetRegionInfo.HasAtmosphere",
      "HasRings": "@roblox/globaltype/SimplePlanetRegionInfo.HasRings",
      "Name": "@roblox/globaltype/SimplePlanetRegionInfo.Name",
      "Resources": "@roblox/globaltype/SimplePlanetRegionInfo.Resources",
      "SubType": "@roblox/globaltype/SimplePlanetRegionInfo.SubType",
      "Temperature": "@roblox/globaltype/SimplePlanetRegionInfo.Temperature",
      "TidallyLocked": "@roblox/globaltype/SimplePlanetRegionInfo.TidallyLocked",
      "Type": "@roblox/globaltype/SimplePlanetRegionInfo.Type"
    }
  },
  "@roblox/globaltype/SimplePlanetRegionInfo.BeaconCount": {
    "documentation": "The amount of beacons in the region at the time of the scan."
  },
  "@roblox/globaltype/SimplePlanetRegionInfo.Color": {
    "documentation": "The primary color of the planet."
  },
  "@roblox/globaltype/SimplePlanetRegionInfo.Gravity": {
    "documentation": "The gravity of the planet."
  },
  "@roblox/globaltype/SimplePlanetRegionInfo.HasAtmosphere": {
    "documentation": "Whether the planet has an atmosphere."
  },
  "@roblox/globaltype/SimplePlanetRegionInfo.HasRings": {
    "documentation": "Whether the planet has planetary rings."
  },
  "@roblox/globaltype/SimplePlanetRegionInfo.Name": {
    "documentation": "The name of the planet."
  },
  "@roblox/globaltype/SimplePlanetRegionInfo.Resources": {
    "documentation": "The resources that can be found on the planet."
  },
  "@roblox/globaltype/SimplePlanetRegionInfo.SubType": {
    "documentation": "The type of the planet, such as <code>Desert</code>, <code>Terra</code>, <code>EarthLike</code>, etc."
  },
  "@roblox/globaltype/SimplePlanetRegionInfo.Temperature": {
    "documentation": "The ambient temperature of the planet."
  },
  "@roblox/globaltype/SimplePlanetRegionInfo.TidallyLocked": {
    "documentation": "Whether the planet is tidally locked, meaning, whether it has a day/night cycle."
  },
  "@roblox/globaltype/SimplePlanetRegionInfo.Type": {
    "documentation": "The type of the region."
  },
  "@roblox/globaltype/SimpleSpaceRegionInfo": {
    "keys": {
      "BeaconCount": "@roblox/globaltype/SimpleSpaceRegionInfo.BeaconCount",
      "HasRings": "@roblox/globaltype/SimpleSpaceRegionInfo.HasRings",
      "Name": "@roblox/globaltype/SimpleSpaceRegionInfo.Name",
      "SubType": "@roblox/globaltype/SimpleSpaceRegionInfo.SubType",
      "TidallyLocked": "@roblox/globaltype/SimpleSpaceRegionInfo.TidallyLocked",
      "Type": "@roblox/globaltype/SimpleSpaceRegionInfo.Type"
    }
  },
  "@roblox/globaltype/SimpleSpaceRegionInfo.BeaconCount": {
    "documentation": "The amount of beacons in the region at the time of the scan."
  },
  "@roblox/globaltype/SimpleSpaceRegionInfo.HasRings": {
    "documentation": "Whether the region has planetary rings."
  },
  "@roblox/globaltype/SimpleSpaceRegionInfo.Name": {
    "documentation": "The name of the region."
  },
  "@roblox/globaltype/SimpleSpaceRegionInfo.SubType": {},
  "@roblox/globaltype/SimpleSpaceRegionInfo.TidallyLocked": {
    "documentation": "This value contains meaningless data for a space region, but is nonetheless present."
  },
  "@roblox/globaltype/SimpleSpaceRegionInfo.Type": {
    "documentation": "The type of the region."
  },
  "@roblox/globaltype/SimpleStarRegionInfo": {
    "keys": {
      "BeaconCount": "@roblox/globaltype/SimpleStarRegionInfo.BeaconCount",
      "Name": "@roblox/globaltype/SimpleStarRegionInfo.Name",
      "Size": "@roblox/globaltype/SimpleStarRegionInfo.Size",
      "SubType": "@roblox/globaltype/SimpleStarRegionInfo.SubType",
      "Type": "@roblox/globaltype/SimpleStarRegionInfo.Type"
    }
  },
  "@roblox/globaltype/SimpleStarRegionInfo.BeaconCount": {
    "documentation": "The amount of beacons in the region at the time of the scan."
  },
  "@roblox/globaltype/SimpleStarRegionInfo.Name": {
    "documentation": "The name of the region."
  },
  "@roblox/globaltype/SimpleStarRegionInfo.Size": {
    "documentation": "The visual size of the star."
  },
  "@roblox/globaltype/SimpleStarRegionInfo.SubType": {
    "documentation": "The type of the star, such as <code>Red</code>, <code>Orange</code>, <code>Yellow</code>, etc."
  },
  "@roblox/globaltype/SimpleStarRegionInfo.Type": {
    "documentation": "The type of the region."
  },
  "@roblox/globaltype/SmoothGlass": {
    "documentation": "A version of Glass using the Roblox Glass material. Additionally can be templated.",
    "keys": {
      "ClassName": "@roblox/globaltype/SmoothGlass.ClassName"
    }
  },
  "@roblox/globaltype/SmoothGlass.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/SmoothReinforcedGlass": {
    "documentation": "A version of ReinforcedGlass using the Roblox Glass material.",
    "keys": {
      "ClassName": "@roblox/globaltype/SmoothReinforcedGlass.ClassName"
    }
  },
  "@roblox/globaltype/SmoothReinforcedGlass.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Snow": {
    "documentation": "An abundant resource that can be found in terra biomes and tundra planets. Can be melted into water.",
    "keys": {
      "ClassName": "@roblox/globaltype/Snow.ClassName"
    }
  },
  "@roblox/globaltype/Snow.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/SolarPanel": {
    "documentation": "Generates electricity using solar energy from a local star.\nThe closer it is to a star, the more energy it generates.\nThe type of star also affects its energy generation, as well as the size of the <code>SolarPanel</code>.\nIf the <code>SolarPanel</code> is blocked by a part, it will not generate any energy, <i>glass</i> however will work.",
    "keys": {
      "ClassName": "@roblox/globaltype/SolarPanel.ClassName",
      "Loop": "@roblox/globaltype/SolarPanel.Loop"
    }
  },
  "@roblox/globaltype/SolarPanel.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/SolarPanel.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/SolarScoop": {
    "documentation": "Extracts materials from a star when powered and pointed at a star.\nDepending on the class of the star, it will extract more materials.\n\nGenerates around 240 degrees of heat, meaning you will need atleast 12 coolers to cool it down.\n\nRed stars generate 25 helium, 5 plasma and 10 hydrogen per second.\nOrange stars generate 30 helium, 5 plasma and and 15 hydrogen per second.\nYellow stars generate 35 helium, 5 plasma and and 20 hydrogen per second.\nLight blue stars generate 40 helium, 25 hydrogen, 10 plasma and and 10 iron per second.\nNeutron stars generate 60 helium, 45 hydrogen, 15 plasma and and 20 iron per second. It also generates 1-2 neutronium every 2 minutes.\n\nIt is recommended to use a Filter to seperate the materials extracted by a solar scoop.",
    "keys": {
      "ClassName": "@roblox/globaltype/SolarScoop.ClassName",
      "Loop": "@roblox/globaltype/SolarScoop.Loop"
    }
  },
  "@roblox/globaltype/SolarScoop.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/SolarScoop.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Solenoid": {
    "documentation": "Controls the switch state of any switches attached to its output face based on whether or not it has power in the configured range.",
    "keys": {
      "ClassName": "@roblox/globaltype/Solenoid.ClassName",
      "Configure": "@roblox/globaltype/Solenoid.Configure",
      "Configured": "@roblox/globaltype/Solenoid.Configured",
      "Inverted": "@roblox/globaltype/Solenoid.Inverted",
      "OnClick": "@roblox/globaltype/Solenoid.OnClick",
      "PowerRange": "@roblox/globaltype/Solenoid.PowerRange"
    }
  },
  "@roblox/globaltype/Solenoid.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Solenoid.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Solenoid.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Solenoid.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Solenoid.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Solenoid.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Solenoid.Inverted": {
    "documentation": "Whether or not the state will be inverted."
  },
  "@roblox/globaltype/Solenoid.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/Solenoid.PowerRange": {
    "documentation": "The power range the state will be active for."
  },
  "@roblox/globaltype/SolenoidConfiguration": {
    "documentation": "The configuration of the <code>Solenoid</code> object.",
    "keys": {
      "Inverted": "@roblox/globaltype/SolenoidConfiguration.Inverted",
      "PowerRange": "@roblox/globaltype/SolenoidConfiguration.PowerRange"
    }
  },
  "@roblox/globaltype/SolenoidConfiguration.Inverted": {
    "documentation": "Whether or not the state will be inverted."
  },
  "@roblox/globaltype/SolenoidConfiguration.PowerRange": {
    "documentation": "The power range the state will be active for."
  },
  "@roblox/globaltype/Sorter": {
    "documentation": "Moves a type of resource through it, depending on the input and output faces as indicated by the arrow. Behaves just like the old Diode part when set to insert 100 Power.",
    "keys": {
      "ClassName": "@roblox/globaltype/Sorter.ClassName",
      "Configure": "@roblox/globaltype/Sorter.Configure",
      "Loop": "@roblox/globaltype/Sorter.Loop",
      "Rate": "@roblox/globaltype/Sorter.Rate",
      "Resource": "@roblox/globaltype/Sorter.Resource",
      "Sort": "@roblox/globaltype/Sorter.Sort",
      "TriggerQuantity": "@roblox/globaltype/Sorter.TriggerQuantity"
    }
  },
  "@roblox/globaltype/Sorter.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Sorter.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Sorter.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Sorter.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Sorter.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Sorter.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Sorter.Rate": {
    "documentation": "How much of the resource to push per second. May be inf (or math.huge in a Microcontroller)."
  },
  "@roblox/globaltype/Sorter.Resource": {
    "documentation": "The kind of resource to push. May be a special or generic type like Gas, Solid, etc."
  },
  "@roblox/globaltype/Sorter.Sort": {
    "documentation": "Tells the sorter to move the given amount of resources, or the sort quantity config if unspecified.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Sorter.Sort",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Sorter.Sort/params/1",
        "name": "amount"
      }
    ]
  },
  "@roblox/globaltype/Sorter.Sort/params/1": {
    "documentation": "The amount of resources to move."
  },
  "@roblox/globaltype/Sorter.TriggerQuantity": {
    "documentation": "How much of the resource to push when triggered. May be inf (or math.huge in a Microcontroller)."
  },
  "@roblox/globaltype/SorterConfiguration": {
    "documentation": "The configuration of the <code>Sorter</code> object.",
    "keys": {
      "Rate": "@roblox/globaltype/SorterConfiguration.Rate",
      "Resource": "@roblox/globaltype/SorterConfiguration.Resource",
      "TriggerQuantity": "@roblox/globaltype/SorterConfiguration.TriggerQuantity"
    }
  },
  "@roblox/globaltype/SorterConfiguration.Rate": {
    "documentation": "How much of the resource to push per second. May be inf (or math.huge in a Microcontroller)."
  },
  "@roblox/globaltype/SorterConfiguration.Resource": {
    "documentation": "The kind of resource to push. May be a special or generic type like Gas, Solid, etc."
  },
  "@roblox/globaltype/SorterConfiguration.TriggerQuantity": {
    "documentation": "How much of the resource to push when triggered. May be inf (or math.huge in a Microcontroller)."
  },
  "@roblox/globaltype/SoundMuffler": {
    "documentation": "A SoundMuffler will silences the sounds of machinery around it.",
    "keys": {
      "ClassName": "@roblox/globaltype/SoundMuffler.ClassName"
    }
  },
  "@roblox/globaltype/SoundMuffler.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/SpaceRegionInfo": {
    "documentation": "The region info format of an empty region of space."
  },
  "@roblox/globaltype/SpawnPoint": {
    "documentation": "Acts as a spawn location for the player who locked it.",
    "keys": {
      "ClassName": "@roblox/globaltype/SpawnPoint.ClassName"
    }
  },
  "@roblox/globaltype/SpawnPoint.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Speaker": {
    "documentation": "Plays audio of length up to 5 seconds, unless it is powered in which case it can play a full audio.\nWhen clicked or triggered, it will toggle playing music and will play the song id you give it.\nSpeaker:LoadSound(SoundId) will return a Sound object\nA Sound object can be modified using properties SoundId, Looped, PlaybackSpeed, Pitch, TimePositionand the methods Play, Pause, Stop, Destroy",
    "keys": {
      "Audio": "@roblox/globaltype/Speaker.Audio",
      "Chat": "@roblox/globaltype/Speaker.Chat",
      "ClassName": "@roblox/globaltype/Speaker.ClassName",
      "ClearSounds": "@roblox/globaltype/Speaker.ClearSounds",
      "Configure": "@roblox/globaltype/Speaker.Configure",
      "Configured": "@roblox/globaltype/Speaker.Configured",
      "LoadSound": "@roblox/globaltype/Speaker.LoadSound",
      "Pitch": "@roblox/globaltype/Speaker.Pitch",
      "PlaySound": "@roblox/globaltype/Speaker.PlaySound",
      "Triggered": "@roblox/globaltype/Speaker.Triggered",
      "Volume": "@roblox/globaltype/Speaker.Volume"
    }
  },
  "@roblox/globaltype/Speaker.Audio": {
    "documentation": "The audio asset ID to be played."
  },
  "@roblox/globaltype/Speaker.Chat": {
    "documentation": "Displays the <code>message</code> in a chat bubble just like if a player said it.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Speaker.Chat",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Speaker.Chat/params/1",
        "name": "message"
      }
    ]
  },
  "@roblox/globaltype/Speaker.Chat/params/1": {
    "documentation": "The message to display in the chat bubble."
  },
  "@roblox/globaltype/Speaker.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Speaker.ClearSounds": {
    "documentation": "Stops and clears all sounds the speaker is currently playing.",
    "params": []
  },
  "@roblox/globaltype/Speaker.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Speaker.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Speaker.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Speaker.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Speaker.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Speaker.LoadSound": {
    "documentation": "Returns a roblox [<code>Sound</code>](https://create.roblox.com/docs/reference/engine/classes/Sound) object with the given <code>soundId</code>.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Speaker.LoadSound",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Speaker.LoadSound/params/1",
        "name": "soundId"
      }
    ],
    "returns": [
      "@roblox/globaltype/Speaker.LoadSound/returns/0"
    ]
  },
  "@roblox/globaltype/Speaker.LoadSound/params/1": {
    "documentation": "The ID of the sound to load."
  },
  "@roblox/globaltype/Speaker.LoadSound/returns/0": {
    "documentation": "The loaded sound object."
  },
  "@roblox/globaltype/Speaker.Pitch": {
    "documentation": "The pitch at which to play the audio."
  },
  "@roblox/globaltype/Speaker.PlaySound": {
    "documentation": "Plays a sound with the given <code>soundId</code>. If no <code>soundId</code> is provided it will default to the <code>Audio</code> configuration of the speaker.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Speaker.PlaySound",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Speaker.PlaySound/params/1",
        "name": "soundId"
      }
    ]
  },
  "@roblox/globaltype/Speaker.PlaySound/params/1": {
    "documentation": "The ID of the sound to play. If <code>nil</code>, will default to the <code>Audio</code> configuration."
  },
  "@roblox/globaltype/Speaker.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/Speaker.Volume": {
    "documentation": "The volume the audio plays at. The maximum volume is determined by the size of the speaker."
  },
  "@roblox/globaltype/SpeakerConfiguration": {
    "documentation": "The configuration of the <code>Speaker</code> object.",
    "keys": {
      "Audio": "@roblox/globaltype/SpeakerConfiguration.Audio",
      "Pitch": "@roblox/globaltype/SpeakerConfiguration.Pitch",
      "Volume": "@roblox/globaltype/SpeakerConfiguration.Volume"
    }
  },
  "@roblox/globaltype/SpeakerConfiguration.Audio": {
    "documentation": "The audio asset ID to be played."
  },
  "@roblox/globaltype/SpeakerConfiguration.Pitch": {
    "documentation": "The pitch at which to play the audio."
  },
  "@roblox/globaltype/SpeakerConfiguration.Volume": {
    "documentation": "The volume the audio plays at. The maximum volume is determined by the size of the speaker."
  },
  "@roblox/globaltype/Spheroid": {
    "documentation": "A stretchable sphere shaped template object.",
    "keys": {
      "ClassName": "@roblox/globaltype/Spheroid.ClassName"
    }
  },
  "@roblox/globaltype/Spheroid.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Spotlight": {
    "documentation": "Emits light in a cone when powered with electricity. Color emition can be changed by coloring it.",
    "keys": {
      "ClassName": "@roblox/globaltype/Spotlight.ClassName",
      "SetColor": "@roblox/globaltype/Spotlight.SetColor"
    }
  },
  "@roblox/globaltype/Spotlight.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Spotlight.SetColor": {
    "documentation": "Sets the color of the object.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Spotlight.SetColor",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Spotlight.SetColor/params/1",
        "name": "color"
      }
    ]
  },
  "@roblox/globaltype/Spotlight.SetColor/params/1": {
    "documentation": "The <code>Color3</code> of the color you want to set the object to."
  },
  "@roblox/globaltype/StanSword": {
    "documentation": "...",
    "keys": {
      "ClassName": "@roblox/globaltype/StanSword.ClassName"
    }
  },
  "@roblox/globaltype/StanSword.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Stanlium": {
    "documentation": "Its love quivers, like it yearns for something within you; an eerie siren song that penetrates souls and tells of the destruction.",
    "keys": {
      "ClassName": "@roblox/globaltype/Stanlium.ClassName"
    }
  },
  "@roblox/globaltype/Stanlium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/StarMap": {
    "documentation": "Shows your current location in the universe and other nearby stars and celestial bodies.\nIt also has unique icons for every celestial body type. Clicking on a icon will set a all connected <code>HyperDrive</code>s/<code>Telescope</code>s to those coordinates.\nRequires power in order to function.\n\nIt has 2 modes, universe and solar.\n- Universe mode shows your location in the universe.\n- Solar mode shows your location in the solar system if you are in one.\n\nIt can be triggered with polysilicon:\n- <code>Activate</code> will set it to universe mode.\n- <code>Deactivate</code> will set it to solar mode.\n- <code>FlipFlop</code> will toggle between the two modes.",
    "keys": {
      "ClassName": "@roblox/globaltype/StarMap.ClassName",
      "GetBodies": "@roblox/globaltype/StarMap.GetBodies",
      "GetSystems": "@roblox/globaltype/StarMap.GetSystems"
    }
  },
  "@roblox/globaltype/StarMap.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/StarMap.GetBodies": {
    "documentation": "Returns an array of celestial bodies in the current star system.",
    "params": [],
    "returns": [
      "@roblox/globaltype/StarMap.GetBodies/returns/0"
    ]
  },
  "@roblox/globaltype/StarMap.GetBodies/returns/0": {
    "documentation": "The celestial bodies in the current system."
  },
  "@roblox/globaltype/StarMap.GetSystems": {
    "documentation": "Returns an array of star systems in a 21x21 grid centred around the current region. Note that this filters out systems that orbit around planets.",
    "params": [],
    "returns": [
      "@roblox/globaltype/StarMap.GetSystems/returns/0"
    ]
  },
  "@roblox/globaltype/StarMap.GetSystems/returns/0": {
    "documentation": "The local star systems."
  },
  "@roblox/globaltype/StarRegionInfo": {
    "documentation": "The region info format of a star."
  },
  "@roblox/globaltype/StarType": {
    "documentation": "The type of a star."
  },
  "@roblox/globaltype/StasisField": {
    "documentation": "Creates a 500 stud radius field that prevents any parts or objects around it from being dragged.\nThis can be used alongside with a RegionCloaker to create public infrastructure to avoid trolling and such.\nHowever, in order to function, the shield must be anchored/grounded, and nothing must be blocking above it. The shield is also extremely fragile.",
    "keys": {
      "ClassName": "@roblox/globaltype/StasisField.ClassName",
      "Loop": "@roblox/globaltype/StasisField.Loop"
    }
  },
  "@roblox/globaltype/StasisField.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/StasisField.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Steam": {
    "documentation": "A result of water being heated up to high temperatures.",
    "keys": {
      "ClassName": "@roblox/globaltype/Steam.ClassName"
    }
  },
  "@roblox/globaltype/Steam.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/SteamEngine": {
    "documentation": "It acts similar to a motor, but is powered by Steam instead of electricity.",
    "keys": {
      "ClassName": "@roblox/globaltype/SteamEngine.ClassName",
      "Configure": "@roblox/globaltype/SteamEngine.Configure",
      "Configured": "@roblox/globaltype/SteamEngine.Configured",
      "EngineSpeed": "@roblox/globaltype/SteamEngine.EngineSpeed"
    }
  },
  "@roblox/globaltype/SteamEngine.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/SteamEngine.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/SteamEngine.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/SteamEngine.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/SteamEngine.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/SteamEngine.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/SteamEngine.EngineSpeed": {
    "documentation": "Determines the speed at which the engine is driven."
  },
  "@roblox/globaltype/SteamEngineConfiguration": {
    "documentation": "The configuration of the <code>SteamEngine</code> object.",
    "keys": {
      "EngineSpeed": "@roblox/globaltype/SteamEngineConfiguration.EngineSpeed"
    }
  },
  "@roblox/globaltype/SteamEngineConfiguration.EngineSpeed": {
    "documentation": "Determines the speed at which the engine is driven."
  },
  "@roblox/globaltype/SteamTurbine": {
    "documentation": "Produces power from steam at a base rate of 100 power each. Improves up to 250 per steam if consecutively ran at max speed. All bonuses are capped to the real consumption rate, so more steam equals better efficiency, but faster consumption rates. It may consume +0.5/s^2 steam, up to a maximum rate of 10 steam per second (for a total of 2500 power per second). Has a 10% chance to recover water for every steam consumed, improving up to 20%. Maximum efficiency can be reached in no less than 18 seconds if fed an optimal amount of steam.",
    "keys": {
      "ClassName": "@roblox/globaltype/SteamTurbine.ClassName",
      "GetEfficiency": "@roblox/globaltype/SteamTurbine.GetEfficiency",
      "GetProductionRate": "@roblox/globaltype/SteamTurbine.GetProductionRate",
      "Loop": "@roblox/globaltype/SteamTurbine.Loop"
    }
  },
  "@roblox/globaltype/SteamTurbine.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/SteamTurbine.GetEfficiency": {
    "params": [],
    "returns": [
      "@roblox/globaltype/SteamTurbine.GetEfficiency/returns/0"
    ]
  },
  "@roblox/globaltype/SteamTurbine.GetEfficiency/returns/0": {},
  "@roblox/globaltype/SteamTurbine.GetProductionRate": {
    "documentation": "The multiplier for the amount of steam consumption each tick, ranges between 1 and 10.",
    "params": [],
    "returns": [
      "@roblox/globaltype/SteamTurbine.GetProductionRate/returns/0"
    ]
  },
  "@roblox/globaltype/SteamTurbine.GetProductionRate/returns/0": {},
  "@roblox/globaltype/SteamTurbine.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Stick": {
    "documentation": "A natural resource found in trees and flora, often accompanied by wood. It is used for creating vital tools.",
    "keys": {
      "ClassName": "@roblox/globaltype/Stick.ClassName"
    }
  },
  "@roblox/globaltype/Stick.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Stone": {
    "documentation": "A resource found in nearly all planets. It is not recommended to use for structures, but is often used in crafting simple objects.",
    "keys": {
      "ClassName": "@roblox/globaltype/Stone.ClassName"
    }
  },
  "@roblox/globaltype/Stone.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/StorageSensor": {
    "documentation": "When the number of contents within connected storage objects is within a defined range, it will send trigger signals similar to a button.\nThis can be used to automate production of certain products when the stored quantity is low.",
    "keys": {
      "ClassName": "@roblox/globaltype/StorageSensor.ClassName",
      "Configure": "@roblox/globaltype/StorageSensor.Configure",
      "Loop": "@roblox/globaltype/StorageSensor.Loop",
      "QuantityRange": "@roblox/globaltype/StorageSensor.QuantityRange"
    }
  },
  "@roblox/globaltype/StorageSensor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/StorageSensor.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/StorageSensor.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/StorageSensor.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/StorageSensor.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/StorageSensor.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/StorageSensor.QuantityRange": {
    "documentation": "The range of item quantities within which this sensor will trigger."
  },
  "@roblox/globaltype/StorageSensorConfiguration": {
    "documentation": "The configuration of the <code>StorageSensor</code> object.",
    "keys": {
      "QuantityRange": "@roblox/globaltype/StorageSensorConfiguration.QuantityRange"
    }
  },
  "@roblox/globaltype/StorageSensorConfiguration.QuantityRange": {
    "documentation": "The range of item quantities within which this sensor will trigger."
  },
  "@roblox/globaltype/StudAligner": {
    "documentation": "Snaps the entire assembly its attached to to the grid.",
    "keys": {
      "ClassName": "@roblox/globaltype/StudAligner.ClassName"
    }
  },
  "@roblox/globaltype/StudAligner.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/SubspaceTripmine": {
    "documentation": "WARNING: HIGH EXPLOSIVE DEVICE. When triggered, this devastating weapon rips a gashing hole in the fabric of reality - subsequent spacetime reification results in a large explosion. USE: Drop mine. Once the mine stops moving, it will enter subspace and become invisible. At this point the mine is armed. Touching the mine will set it off... (Disabled in Testing Zone)",
    "keys": {
      "ClassName": "@roblox/globaltype/SubspaceTripmine.ClassName"
    }
  },
  "@roblox/globaltype/SubspaceTripmine.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Sulfur": {
    "documentation": "A yellow flammable solid which can be found in Stone deposits. Being set on fire gives it a special blue fire.",
    "keys": {
      "ClassName": "@roblox/globaltype/Sulfur.ClassName"
    }
  },
  "@roblox/globaltype/Sulfur.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Switch": {
    "documentation": "Acts as a wire when active/green, but when black or inactive it acts as a normal object. Must use a polysilicon to switch for trigger events.",
    "keys": {
      "ClassName": "@roblox/globaltype/Switch.ClassName",
      "Configure": "@roblox/globaltype/Switch.Configure",
      "Configured": "@roblox/globaltype/Switch.Configured",
      "OnClick": "@roblox/globaltype/Switch.OnClick",
      "SwitchValue": "@roblox/globaltype/Switch.SwitchValue"
    }
  },
  "@roblox/globaltype/Switch.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Switch.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Switch.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Switch.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Switch.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Switch.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Switch.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/Switch.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/SwitchConfiguration": {
    "documentation": "The configuration of the <code>Switch</code> object.",
    "keys": {
      "SwitchValue": "@roblox/globaltype/SwitchConfiguration.SwitchValue"
    }
  },
  "@roblox/globaltype/SwitchConfiguration.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/Tank": {
    "documentation": "Stores liquids and gases. When a liquid or gas touches the Tank, the Tank will automatically store it. Will not conduct heat when containing a fluid, making it a good heat storage part.",
    "keys": {
      "CanBeCraftedFrom": "@roblox/globaltype/Tank.CanBeCraftedFrom",
      "ClassName": "@roblox/globaltype/Tank.ClassName",
      "Configure": "@roblox/globaltype/Tank.Configure",
      "ContainerChanged": "@roblox/globaltype/Tank.ContainerChanged",
      "GetAmount": "@roblox/globaltype/Tank.GetAmount",
      "GetResource": "@roblox/globaltype/Tank.GetResource",
      "GetResourceAmount": "@roblox/globaltype/Tank.GetResourceAmount",
      "OnClick": "@roblox/globaltype/Tank.OnClick",
      "Resource": "@roblox/globaltype/Tank.Resource"
    }
  },
  "@roblox/globaltype/Tank.CanBeCraftedFrom": {
    "documentation": "Determines whether this Tank can be used by nearby players to craft objects."
  },
  "@roblox/globaltype/Tank.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Tank.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Tank.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Tank.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Tank.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Tank.ContainerChanged": {
    "documentation": "Fires when the amount of the resource in the container changes."
  },
  "@roblox/globaltype/Tank.GetAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Tank.GetAmount/returns/0"
    ]
  },
  "@roblox/globaltype/Tank.GetAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/Tank.GetResource": {
    "documentation": "Gets the name of the resource contained, will return the <i>string</i> <code>\"nil\"</code> if nothing is stored, rather than <i>actually</i> returning <code>nil</code>.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Tank.GetResource/returns/0"
    ]
  },
  "@roblox/globaltype/Tank.GetResource/returns/0": {},
  "@roblox/globaltype/Tank.GetResourceAmount": {
    "documentation": "Gives you the total amount of objects in the container.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Tank.GetResourceAmount/returns/0"
    ]
  },
  "@roblox/globaltype/Tank.GetResourceAmount/returns/0": {
    "documentation": "The amount of objects in the container."
  },
  "@roblox/globaltype/Tank.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/Tank.Resource": {
    "documentation": "The kind of resource the bin can hold. You can set this to Any to allow the bin to accept anything."
  },
  "@roblox/globaltype/TankConfiguration": {
    "documentation": "The configuration of the <code>Tank</code> object.",
    "keys": {
      "CanBeCraftedFrom": "@roblox/globaltype/TankConfiguration.CanBeCraftedFrom",
      "Resource": "@roblox/globaltype/TankConfiguration.Resource"
    }
  },
  "@roblox/globaltype/TankConfiguration.CanBeCraftedFrom": {
    "documentation": "Determines whether this Tank can be used by nearby players to craft objects."
  },
  "@roblox/globaltype/TankConfiguration.Resource": {
    "documentation": "The kind of resource the bin can hold. You can set this to Any to allow the bin to accept anything."
  },
  "@roblox/globaltype/Teleporter": {
    "documentation": "A device used to transport players across regions.\nWhen powered and triggered, it will teleport all players in the beam to the given coordinates and teleporter id.\nIt will warp the player to a teleporter in the region with the given teleporter id.\n\nWhen warping to a teleporter inside of a planet, set the last value to true. For example,\n50, -50, 85, -75, true\n\nMake sure you set the correct coordinates OR YOU WILL BE STRANDED!\n\nCosts 1000 energy per teleport. Teleporter uses Energy regardless if a player is on the Teleporter at the moment it gets triggered.",
    "keys": {
      "ClassName": "@roblox/globaltype/Teleporter.ClassName",
      "Configure": "@roblox/globaltype/Teleporter.Configure",
      "Coordinates": "@roblox/globaltype/Teleporter.Coordinates",
      "ForceLocalTeleport": "@roblox/globaltype/Teleporter.ForceLocalTeleport",
      "TeleporterID": "@roblox/globaltype/Teleporter.TeleporterID",
      "Triggered": "@roblox/globaltype/Teleporter.Triggered"
    }
  },
  "@roblox/globaltype/Teleporter.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Teleporter.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Teleporter.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Teleporter.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Teleporter.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Teleporter.Coordinates": {
    "documentation": "The coordinates to your Destination."
  },
  "@roblox/globaltype/Teleporter.ForceLocalTeleport": {
    "documentation": "Whether to only attempt to teleport to teleporters within the same region, ignoring the \"Coordinates\" configuration."
  },
  "@roblox/globaltype/Teleporter.TeleporterID": {
    "documentation": "The ID of the teleporter at the goal coordinates to teleport directly to."
  },
  "@roblox/globaltype/Teleporter.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/TeleporterConfiguration": {
    "documentation": "The configuration of the <code>Teleporter</code> object.",
    "keys": {
      "Coordinates": "@roblox/globaltype/TeleporterConfiguration.Coordinates",
      "ForceLocalTeleport": "@roblox/globaltype/TeleporterConfiguration.ForceLocalTeleport",
      "TeleporterID": "@roblox/globaltype/TeleporterConfiguration.TeleporterID"
    }
  },
  "@roblox/globaltype/TeleporterConfiguration.Coordinates": {
    "documentation": "The coordinates to your Destination."
  },
  "@roblox/globaltype/TeleporterConfiguration.ForceLocalTeleport": {
    "documentation": "Whether to only attempt to teleport to teleporters within the same region, ignoring the \"Coordinates\" configuration."
  },
  "@roblox/globaltype/TeleporterConfiguration.TeleporterID": {
    "documentation": "The ID of the teleporter at the goal coordinates to teleport directly to."
  },
  "@roblox/globaltype/Telescope": {
    "documentation": "A device that allows you to see and query information about other regions and planets in space while powered.\nClick on the <code>Telescope</code> to open up a menu that will display information about any location within 100 units of your location.\nTo view a specific coordinate, configure the <code>Telescope</code> and set to the desired coordinates. This has a one minute cooldown.\n\nThe <code>Telescope</code> provides the following information:\n- Resources on the planet\n- The planet's temperature\n- The planet's distance from its star\n- The type of planet",
    "keys": {
      "ClassName": "@roblox/globaltype/Telescope.ClassName",
      "Configure": "@roblox/globaltype/Telescope.Configure",
      "Configured": "@roblox/globaltype/Telescope.Configured",
      "GetCoordinate": "@roblox/globaltype/Telescope.GetCoordinate",
      "GetCurrentCoordinate": "@roblox/globaltype/Telescope.GetCurrentCoordinate",
      "ViewCoordinates": "@roblox/globaltype/Telescope.ViewCoordinates",
      "WhenRegionLoads": "@roblox/globaltype/Telescope.WhenRegionLoads"
    }
  },
  "@roblox/globaltype/Telescope.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Telescope.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Telescope.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Telescope.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Telescope.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Telescope.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Telescope.GetCoordinate": {
    "documentation": "Gets information about the configured region.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Telescope.GetCoordinate/returns/0"
    ]
  },
  "@roblox/globaltype/Telescope.GetCoordinate/returns/0": {},
  "@roblox/globaltype/Telescope.GetCurrentCoordinate": {
    "documentation": "Returns the current region coordinates. If you are within a region with a <code>RegionCloaker</code> active, only the owner of the <code>RegionCloaker</code> can call this method.",
    "params": [],
    "returns": [
      "@roblox/globaltype/Telescope.GetCurrentCoordinate/returns/0"
    ]
  },
  "@roblox/globaltype/Telescope.GetCurrentCoordinate/returns/0": {},
  "@roblox/globaltype/Telescope.ViewCoordinates": {
    "documentation": "The coordinates to view."
  },
  "@roblox/globaltype/Telescope.WhenRegionLoads": {
    "documentation": "Registers a callback that will be called when information is first loaded about a region.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Telescope.WhenRegionLoads",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Telescope.WhenRegionLoads/params/1",
        "name": "callback"
      }
    ]
  },
  "@roblox/globaltype/Telescope.WhenRegionLoads/params/1": {
    "documentation": "A callback that will be called when the region loads. The callback will receive a <code>CompleteRegionInfo</code> object containing information about the region.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Telescope.WhenRegionLoads/params/1/params/0",
        "name": "regionInfo"
      }
    ]
  },
  "@roblox/globaltype/Telescope.WhenRegionLoads/params/1/params/0": {
    "documentation": "The information about the region that has loaded."
  },
  "@roblox/globaltype/TelescopeConfiguration": {
    "documentation": "The configuration of the <code>Telescope</code> object.",
    "keys": {
      "ViewCoordinates": "@roblox/globaltype/TelescopeConfiguration.ViewCoordinates"
    }
  },
  "@roblox/globaltype/TelescopeConfiguration.ViewCoordinates": {
    "documentation": "The coordinates to view."
  },
  "@roblox/globaltype/TemperatureGate": {
    "documentation": "The gate will allow power to pass through it while the temperature is in a certain range.\nIt can be used in conjunction with a <code>Transistor</code> part to control the flow of generated trigger signals based on its temperature.\n\nLike the <code>TemperatureSensor</code> part, it will also use the attached Reactor temperature if there is one.\nThough, unlike the <code>TemperatureSensor</code> part, this one updates at a much faster 20 tps instead of 0.5 tps.",
    "keys": {
      "ClassName": "@roblox/globaltype/TemperatureGate.ClassName",
      "Configure": "@roblox/globaltype/TemperatureGate.Configure",
      "Configured": "@roblox/globaltype/TemperatureGate.Configured",
      "GetState": "@roblox/globaltype/TemperatureGate.GetState",
      "GetTemp": "@roblox/globaltype/TemperatureGate.GetTemp",
      "GetTemperature": "@roblox/globaltype/TemperatureGate.GetTemperature",
      "Inverted": "@roblox/globaltype/TemperatureGate.Inverted",
      "SwitchValue": "@roblox/globaltype/TemperatureGate.SwitchValue",
      "TemperatureRange": "@roblox/globaltype/TemperatureGate.TemperatureRange"
    }
  },
  "@roblox/globaltype/TemperatureGate.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/TemperatureGate.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/TemperatureGate.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/TemperatureGate.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/TemperatureGate.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/TemperatureGate.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/TemperatureGate.GetState": {
    "params": []
  },
  "@roblox/globaltype/TemperatureGate.GetTemp": {
    "documentation": "Returns the current temperature of the gate.",
    "params": [],
    "returns": [
      "@roblox/globaltype/TemperatureGate.GetTemp/returns/0"
    ]
  },
  "@roblox/globaltype/TemperatureGate.GetTemp/returns/0": {
    "documentation": "The current temperature of the gate in degrees Fahrenheit."
  },
  "@roblox/globaltype/TemperatureGate.GetTemperature": {
    "documentation": "Returns the current temperature of the gate.",
    "params": [],
    "returns": [
      "@roblox/globaltype/TemperatureGate.GetTemperature/returns/0"
    ]
  },
  "@roblox/globaltype/TemperatureGate.GetTemperature/returns/0": {
    "documentation": "The current temperature of the gate in degrees Fahrenheit."
  },
  "@roblox/globaltype/TemperatureGate.Inverted": {
    "documentation": "Whether or not the state will be inverted."
  },
  "@roblox/globaltype/TemperatureGate.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/TemperatureGate.TemperatureRange": {
    "documentation": "The range of temperatures (°F) within which the gate will be open."
  },
  "@roblox/globaltype/TemperatureGateConfiguration": {
    "documentation": "The configuration of the <code>TemperatureGate</code> object.",
    "keys": {
      "Inverted": "@roblox/globaltype/TemperatureGateConfiguration.Inverted",
      "SwitchValue": "@roblox/globaltype/TemperatureGateConfiguration.SwitchValue",
      "TemperatureRange": "@roblox/globaltype/TemperatureGateConfiguration.TemperatureRange"
    }
  },
  "@roblox/globaltype/TemperatureGateConfiguration.Inverted": {
    "documentation": "Whether or not the state will be inverted."
  },
  "@roblox/globaltype/TemperatureGateConfiguration.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/TemperatureGateConfiguration.TemperatureRange": {
    "documentation": "The range of temperatures (°F) within which the gate will be open."
  },
  "@roblox/globaltype/TemperatureSensor": {
    "documentation": "When the surrounding temperature is within the defined range, it will emit a trigger signal every two seconds.\nWhen connected to a Reactor part, will use the Reactor's internal temperature.\n\nThe more advanced twin of this part, the TemperatureGate part may be more useful in many cases.\nIt updates at a quicker rate and is more versatile, due to it controlling power flow.",
    "keys": {
      "ClassName": "@roblox/globaltype/TemperatureSensor.ClassName",
      "Configure": "@roblox/globaltype/TemperatureSensor.Configure",
      "GetTemp": "@roblox/globaltype/TemperatureSensor.GetTemp",
      "Loop": "@roblox/globaltype/TemperatureSensor.Loop",
      "TemperatureRange": "@roblox/globaltype/TemperatureSensor.TemperatureRange"
    }
  },
  "@roblox/globaltype/TemperatureSensor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/TemperatureSensor.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/TemperatureSensor.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/TemperatureSensor.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/TemperatureSensor.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/TemperatureSensor.GetTemp": {
    "params": [],
    "returns": [
      "@roblox/globaltype/TemperatureSensor.GetTemp/returns/0"
    ]
  },
  "@roblox/globaltype/TemperatureSensor.GetTemp/returns/0": {},
  "@roblox/globaltype/TemperatureSensor.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/TemperatureSensor.TemperatureRange": {
    "documentation": "The range of temperatures (°F) which this sensor will trigger at."
  },
  "@roblox/globaltype/TemperatureSensorConfiguration": {
    "documentation": "The configuration of the <code>TemperatureSensor</code> object.",
    "keys": {
      "TemperatureRange": "@roblox/globaltype/TemperatureSensorConfiguration.TemperatureRange"
    }
  },
  "@roblox/globaltype/TemperatureSensorConfiguration.TemperatureRange": {
    "documentation": "The range of temperatures (°F) which this sensor will trigger at."
  },
  "@roblox/globaltype/TemperatureUnit": {
    "documentation": "A unit of temperature, i.e., fahrenheit, celsius, or kelvin."
  },
  "@roblox/globaltype/TerrainData": {
    "documentation": "The data about how the terrain of a planet generates.",
    "keys": {
      "Height": "@roblox/globaltype/TerrainData.Height",
      "Life": "@roblox/globaltype/TerrainData.Life",
      "MountainDensity": "@roblox/globaltype/TerrainData.MountainDensity",
      "RockDensity": "@roblox/globaltype/TerrainData.RockDensity",
      "Roughness": "@roblox/globaltype/TerrainData.Roughness",
      "Slopes": "@roblox/globaltype/TerrainData.Slopes",
      "Temperature": "@roblox/globaltype/TerrainData.Temperature",
      "TreeSettings": "@roblox/globaltype/TerrainData.TreeSettings",
      "Water": "@roblox/globaltype/TerrainData.Water"
    }
  },
  "@roblox/globaltype/TerrainData.Height": {},
  "@roblox/globaltype/TerrainData.Life": {
    "documentation": "Inherits the value of the planet's <code>Atmosphere</code>."
  },
  "@roblox/globaltype/TerrainData.MountainDensity": {},
  "@roblox/globaltype/TerrainData.RockDensity": {},
  "@roblox/globaltype/TerrainData.Roughness": {},
  "@roblox/globaltype/TerrainData.Slopes": {},
  "@roblox/globaltype/TerrainData.Temperature": {},
  "@roblox/globaltype/TerrainData.TreeSettings": {
    "keys": {
      "amount_of_branches": "@roblox/globaltype/TerrainData.TreeSettings.amount_of_branches",
      "amount_of_splits": "@roblox/globaltype/TerrainData.TreeSettings.amount_of_splits",
      "branch_angles": "@roblox/globaltype/TerrainData.TreeSettings.branch_angles",
      "branch_offset": "@roblox/globaltype/TerrainData.TreeSettings.branch_offset",
      "branch_size_percentage": "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage",
      "trunk_size": "@roblox/globaltype/TerrainData.TreeSettings.trunk_size"
    }
  },
  "@roblox/globaltype/TerrainData.TreeSettings.amount_of_branches": {},
  "@roblox/globaltype/TerrainData.TreeSettings.amount_of_splits": {},
  "@roblox/globaltype/TerrainData.TreeSettings.branch_angles": {},
  "@roblox/globaltype/TerrainData.TreeSettings.branch_offset": {},
  "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage": {
    "keys": {
      "max": "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.max",
      "min": "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.min"
    }
  },
  "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.max": {
    "keys": {
      "height": "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.max.height",
      "width": "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.max.width"
    }
  },
  "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.max.height": {},
  "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.max.width": {},
  "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.min": {
    "keys": {
      "height": "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.min.height",
      "width": "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.min.width"
    }
  },
  "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.min.height": {},
  "@roblox/globaltype/TerrainData.TreeSettings.branch_size_percentage.min.width": {},
  "@roblox/globaltype/TerrainData.TreeSettings.trunk_size": {
    "keys": {
      "max": "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.max",
      "min": "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.min"
    }
  },
  "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.max": {
    "keys": {
      "height": "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.max.height",
      "width": "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.max.width"
    }
  },
  "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.max.height": {},
  "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.max.width": {},
  "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.min": {
    "keys": {
      "height": "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.min.height",
      "width": "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.min.width"
    }
  },
  "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.min.height": {},
  "@roblox/globaltype/TerrainData.TreeSettings.trunk_size.min.width": {},
  "@roblox/globaltype/TerrainData.Water": {
    "documentation": "Inherits the value of the planet's <code>WaterLevel ~= nil</code>."
  },
  "@roblox/globaltype/TestStarMap": {
    "documentation": "A developer version of the starmap.\n\nShowcases the entire universe. Lag maybe?? :topkek:",
    "keys": {
      "ClassName": "@roblox/globaltype/TestStarMap.ClassName"
    }
  },
  "@roblox/globaltype/TestStarMap.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Tetrahedron": {
    "documentation": "A tetrahedron template made of 3 perpendicular right triangles.",
    "keys": {
      "ClassName": "@roblox/globaltype/Tetrahedron.ClassName"
    }
  },
  "@roblox/globaltype/Tetrahedron.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Thruster": {
    "documentation": "A high powered propulsion device. The larger the thruster, the faster it can go, up to 500s/s, but it will consume more power.\nThe thruster will not operate below -30, or above 200 degrees fahrenheit.",
    "keys": {
      "ClassName": "@roblox/globaltype/Thruster.ClassName",
      "Configure": "@roblox/globaltype/Thruster.Configure",
      "Configured": "@roblox/globaltype/Thruster.Configured",
      "Propulsion": "@roblox/globaltype/Thruster.Propulsion"
    }
  },
  "@roblox/globaltype/Thruster.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Thruster.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Thruster.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Thruster.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Thruster.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Thruster.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Thruster.Propulsion": {
    "documentation": "Determines the percentage of thrust (speed). Affects fuel consumption."
  },
  "@roblox/globaltype/ThrusterConfiguration": {
    "documentation": "The configuration of the <code>Thruster</code> object.",
    "keys": {
      "Propulsion": "@roblox/globaltype/ThrusterConfiguration.Propulsion"
    }
  },
  "@roblox/globaltype/ThrusterConfiguration.Propulsion": {
    "documentation": "Determines the percentage of thrust (speed). Affects fuel consumption."
  },
  "@roblox/globaltype/Tile": {
    "documentation": "A cheap material made from baked clay useful for building houses.",
    "keys": {
      "ClassName": "@roblox/globaltype/Tile.ClassName"
    }
  },
  "@roblox/globaltype/Tile.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/TimeSensor": {
    "documentation": "When the current time matches the time configured in the TimeSensor, it will send a trigger signal.\n\nFor example, if the world turns 7:15 it will send a trigger signal.\n\nThis is useful for creating dynamic lights that turn on only during the night, saving energy.\n\nThe format should be hour:minute",
    "keys": {
      "ClassName": "@roblox/globaltype/TimeSensor.ClassName",
      "Configure": "@roblox/globaltype/TimeSensor.Configure",
      "Time": "@roblox/globaltype/TimeSensor.Time"
    }
  },
  "@roblox/globaltype/TimeSensor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/TimeSensor.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/TimeSensor.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/TimeSensor.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/TimeSensor.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/TimeSensor.Time": {
    "documentation": "The time at which this sensor will trigger."
  },
  "@roblox/globaltype/TimeSensorConfiguration": {
    "documentation": "The configuration of the <code>TimeSensor</code> object.",
    "keys": {
      "Time": "@roblox/globaltype/TimeSensorConfiguration.Time"
    }
  },
  "@roblox/globaltype/TimeSensorConfiguration.Time": {
    "documentation": "The time at which this sensor will trigger."
  },
  "@roblox/globaltype/TintedGlass": {
    "documentation": "A material similar to Glass, but is tinted black on the front..",
    "keys": {
      "ClassName": "@roblox/globaltype/TintedGlass.ClassName"
    }
  },
  "@roblox/globaltype/TintedGlass.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Tire": {
    "documentation": "A cylindrical shaped object used commonly in vehicles such as cars.",
    "keys": {
      "ClassName": "@roblox/globaltype/Tire.ClassName"
    }
  },
  "@roblox/globaltype/Tire.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Titanium": {
    "documentation": "A strong heavy material that is very useful for small scale constructs. Has a very low thermal conductivity, the lowest of all metals in the game.",
    "keys": {
      "ClassName": "@roblox/globaltype/Titanium.ClassName"
    }
  },
  "@roblox/globaltype/Titanium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Torch": {
    "documentation": "A torch which can be used to provide light.",
    "keys": {
      "ClassName": "@roblox/globaltype/Torch.ClassName"
    }
  },
  "@roblox/globaltype/Torch.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/TouchScreen": {
    "documentation": "A <code>Screen</code>, but can handle player mouse input.\nThis is to be used with programming.",
    "keys": {
      "ClassName": "@roblox/globaltype/TouchScreen.ClassName",
      "Configured": "@roblox/globaltype/TouchScreen.Configured",
      "CursorMoved": "@roblox/globaltype/TouchScreen.CursorMoved",
      "CursorPressed": "@roblox/globaltype/TouchScreen.CursorPressed",
      "CursorReleased": "@roblox/globaltype/TouchScreen.CursorReleased",
      "GetCursor": "@roblox/globaltype/TouchScreen.GetCursor",
      "GetCursors": "@roblox/globaltype/TouchScreen.GetCursors"
    }
  },
  "@roblox/globaltype/TouchScreen.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/TouchScreen.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/TouchScreen.CursorMoved": {
    "documentation": "Fires when a cursor is moved."
  },
  "@roblox/globaltype/TouchScreen.CursorPressed": {
    "documentation": "Fires when a user presses their left mouse button."
  },
  "@roblox/globaltype/TouchScreen.CursorReleased": {
    "documentation": "Fires when a user releases their left mouse button."
  },
  "@roblox/globaltype/TouchScreen.GetCursor": {
    "documentation": "Gets the specified player's cursor.",
    "params": [
      {
        "documentation": "@roblox/globaltype/TouchScreen.GetCursor",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/TouchScreen.GetCursor/params/1",
        "name": "username"
      }
    ],
    "returns": [
      "@roblox/globaltype/TouchScreen.GetCursor/returns/0"
    ]
  },
  "@roblox/globaltype/TouchScreen.GetCursor/params/1": {
    "documentation": "The username of the player's cursor you want to get."
  },
  "@roblox/globaltype/TouchScreen.GetCursor/returns/0": {},
  "@roblox/globaltype/TouchScreen.GetCursors": {
    "documentation": "Gets a dictionary of player usernames to their cursors if their cursors are on the screen.",
    "params": [],
    "returns": [
      "@roblox/globaltype/TouchScreen.GetCursors/returns/0"
    ]
  },
  "@roblox/globaltype/TouchScreen.GetCursors/returns/0": {
    "documentation": "A dictionary of player usernames to their cursors."
  },
  "@roblox/globaltype/TouchSensor": {
    "documentation": "Sends trigger signals upon contact.. with anything.",
    "keys": {
      "ClassName": "@roblox/globaltype/TouchSensor.ClassName",
      "Touched": "@roblox/globaltype/TouchSensor.Touched"
    }
  },
  "@roblox/globaltype/TouchSensor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/TouchSensor.Touched": {
    "documentation": "Fires when the part is touched by another object (or player!)."
  },
  "@roblox/globaltype/TractorBeam": {
    "documentation": "Fires a beam that exerts force on the object it hits. More effective in space due to low gravity, but still decently strong when affected by gravity. Force is affected by size and configuration.",
    "keys": {
      "ClassName": "@roblox/globaltype/TractorBeam.ClassName",
      "Configure": "@roblox/globaltype/TractorBeam.Configure",
      "PowerPercent": "@roblox/globaltype/TractorBeam.PowerPercent"
    }
  },
  "@roblox/globaltype/TractorBeam.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/TractorBeam.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/TractorBeam.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/TractorBeam.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/TractorBeam.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/TractorBeam.PowerPercent": {
    "documentation": "Determines the percentage of total available force (depending on size) used by the beam."
  },
  "@roblox/globaltype/TractorBeamConfiguration": {
    "documentation": "The configuration of the <code>TractorBeam</code> object.",
    "keys": {
      "PowerPercent": "@roblox/globaltype/TractorBeamConfiguration.PowerPercent"
    }
  },
  "@roblox/globaltype/TractorBeamConfiguration.PowerPercent": {
    "documentation": "Determines the percentage of total available force (depending on size) used by the beam."
  },
  "@roblox/globaltype/Transformer": {
    "documentation": "Sends a constant trigger signal when powered. By default, it will send a trigger signal every tick, but can be configured up to every 360 seconds. If the transformer's loop time matches the game's internal tick rate (the default,  1/s), it will synchronize with the game loop.",
    "keys": {
      "ClassName": "@roblox/globaltype/Transformer.ClassName",
      "Configure": "@roblox/globaltype/Transformer.Configure",
      "Loop": "@roblox/globaltype/Transformer.Loop",
      "LoopTime": "@roblox/globaltype/Transformer.LoopTime",
      "Triggered": "@roblox/globaltype/Transformer.Triggered"
    }
  },
  "@roblox/globaltype/Transformer.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Transformer.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Transformer.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Transformer.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Transformer.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Transformer.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Transformer.LoopTime": {
    "documentation": "The time in seconds between triggers."
  },
  "@roblox/globaltype/Transformer.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/TransformerConfiguration": {
    "documentation": "The configuration of the <code>Transformer</code> object.",
    "keys": {
      "LoopTime": "@roblox/globaltype/TransformerConfiguration.LoopTime"
    }
  },
  "@roblox/globaltype/TransformerConfiguration.LoopTime": {
    "documentation": "The time in seconds between triggers."
  },
  "@roblox/globaltype/Transistor": {
    "documentation": "Carries trigger signals in the direction of the arrow if any power source is attached. Can be inverted by clicking or configuring.",
    "keys": {
      "ClassName": "@roblox/globaltype/Transistor.ClassName",
      "Configure": "@roblox/globaltype/Transistor.Configure",
      "Configured": "@roblox/globaltype/Transistor.Configured",
      "Inverted": "@roblox/globaltype/Transistor.Inverted",
      "OnClick": "@roblox/globaltype/Transistor.OnClick"
    }
  },
  "@roblox/globaltype/Transistor.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Transistor.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Transistor.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Transistor.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Transistor.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Transistor.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Transistor.Inverted": {
    "documentation": "Whether or not the state will be inverted."
  },
  "@roblox/globaltype/Transistor.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/TransistorConfiguration": {
    "documentation": "The configuration of the <code>Transistor</code> object.",
    "keys": {
      "Inverted": "@roblox/globaltype/TransistorConfiguration.Inverted"
    }
  },
  "@roblox/globaltype/TransistorConfiguration.Inverted": {
    "documentation": "Whether or not the state will be inverted."
  },
  "@roblox/globaltype/Transporter": {
    "documentation": "Acts as an antenna but for bins and objects containing materials such as liquids and solids.\nUseful for creating large factory bases with many extractors without using long chutes.",
    "keys": {
      "ClassName": "@roblox/globaltype/Transporter.ClassName",
      "Configure": "@roblox/globaltype/Transporter.Configure",
      "TransporterID": "@roblox/globaltype/Transporter.TransporterID"
    }
  },
  "@roblox/globaltype/Transporter.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Transporter.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Transporter.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Transporter.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Transporter.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Transporter.TransporterID": {
    "documentation": "The ID of this transporter, to transmit to others with the same ID."
  },
  "@roblox/globaltype/TransporterConfiguration": {
    "documentation": "The configuration of the <code>Transporter</code> object.",
    "keys": {
      "TransporterID": "@roblox/globaltype/TransporterConfiguration.TransporterID"
    }
  },
  "@roblox/globaltype/TransporterConfiguration.TransporterID": {
    "documentation": "The ID of this transporter, to transmit to others with the same ID."
  },
  "@roblox/globaltype/Treads": {
    "documentation": "Moves against surfaces it contacts. In order for the treads to function, you need to use a Motor, Engine, or DriveBox to spin up a part which will act as the driver part. The driver part should be connected to the treads via a rod, and should spin with the same orientation as a wheel would to achieve maximum speed.\n\nMultiple driver parts can be attached to the treads at once, and their speeds will be added together. The treads will move depending on the direction & speed that the driver part spins.\n\nThe speed the treads move depends entirely on the speed of rotation on the axis perpendicular to the treads, so rotating the driver part off-axis will reduce (or invert) the speed. For example, 45 degrees off-axis = 50% speed, 90 degrees off-axis = 0% speed, 135 degrees off-axis = -50% speed, and 180 degrees off-axis = -100% speed.",
    "keys": {
      "ClassName": "@roblox/globaltype/Treads.ClassName",
      "Loop": "@roblox/globaltype/Treads.Loop"
    }
  },
  "@roblox/globaltype/Treads.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Treads.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/TriggerRelay": {
    "documentation": "Acts as a <code>TriggerWrite</code> when active/green, but when black or inactive it acts as a normal object, it <i>will not</i> toggle when exposed to <code>Polysilicon</code> signals, rather, it will pass them through if it is active, as if it were a normal signal.",
    "keys": {
      "ClassName": "@roblox/globaltype/TriggerRelay.ClassName",
      "Configure": "@roblox/globaltype/TriggerRelay.Configure",
      "Configured": "@roblox/globaltype/TriggerRelay.Configured",
      "OnClick": "@roblox/globaltype/TriggerRelay.OnClick",
      "SwitchValue": "@roblox/globaltype/TriggerRelay.SwitchValue"
    }
  },
  "@roblox/globaltype/TriggerRelay.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/TriggerRelay.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/TriggerRelay.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/TriggerRelay.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/TriggerRelay.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/TriggerRelay.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/TriggerRelay.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/TriggerRelay.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/TriggerRelayConfiguration": {
    "documentation": "The configuration of the <code>TriggerRelay</code> object.",
    "keys": {
      "SwitchValue": "@roblox/globaltype/TriggerRelayConfiguration.SwitchValue"
    }
  },
  "@roblox/globaltype/TriggerRelayConfiguration.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/TriggerSwitch": {
    "documentation": "Acts as a <code>TriggerWrite</code> when active/green, but when black or inactive it acts as a normal object. It <i>will</i> toggle when exposed to <code>Polysilicon</code> signals.",
    "keys": {
      "ClassName": "@roblox/globaltype/TriggerSwitch.ClassName",
      "Configure": "@roblox/globaltype/TriggerSwitch.Configure",
      "Configured": "@roblox/globaltype/TriggerSwitch.Configured",
      "OnClick": "@roblox/globaltype/TriggerSwitch.OnClick",
      "SwitchValue": "@roblox/globaltype/TriggerSwitch.SwitchValue"
    }
  },
  "@roblox/globaltype/TriggerSwitch.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/TriggerSwitch.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/TriggerSwitch.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/TriggerSwitch.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/TriggerSwitch.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/TriggerSwitch.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/TriggerSwitch.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/TriggerSwitch.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/TriggerSwitchConfiguration": {
    "documentation": "The configuration of the <code>TriggerSwitch</code> object.",
    "keys": {
      "SwitchValue": "@roblox/globaltype/TriggerSwitchConfiguration.SwitchValue"
    }
  },
  "@roblox/globaltype/TriggerSwitchConfiguration.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/TriggerWire": {
    "documentation": "Allows trigger objects to interact with each other when connected by triggerwires.",
    "keys": {
      "ClassName": "@roblox/globaltype/TriggerWire.ClassName"
    }
  },
  "@roblox/globaltype/TriggerWire.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Truss": {
    "documentation": "Used as a ladder.",
    "keys": {
      "ClassName": "@roblox/globaltype/Truss.ClassName"
    }
  },
  "@roblox/globaltype/Truss.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Turbofan": {
    "documentation": "Generates thrust from crude Oil, similar to a Thruster.\nIf a motor is attached to the front, it instead acts like an engine and rotates it.",
    "keys": {
      "ClassName": "@roblox/globaltype/Turbofan.ClassName",
      "Configure": "@roblox/globaltype/Turbofan.Configure",
      "Loop": "@roblox/globaltype/Turbofan.Loop",
      "TurboFanSpeed": "@roblox/globaltype/Turbofan.TurboFanSpeed"
    }
  },
  "@roblox/globaltype/Turbofan.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Turbofan.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Turbofan.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Turbofan.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Turbofan.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Turbofan.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Turbofan.TurboFanSpeed": {
    "documentation": "Determines the speed at which the turbofan is driven, or the speed at which it travels."
  },
  "@roblox/globaltype/TurbofanConfiguration": {
    "documentation": "The configuration of the <code>Turbofan</code> object.",
    "keys": {
      "TurboFanSpeed": "@roblox/globaltype/TurbofanConfiguration.TurboFanSpeed"
    }
  },
  "@roblox/globaltype/TurbofanConfiguration.TurboFanSpeed": {
    "documentation": "Determines the speed at which the turbofan is driven, or the speed at which it travels."
  },
  "@roblox/globaltype/Uranium": {
    "documentation": "A radioactive material often found in deposits in planets, especially ones near stars.\nUseful for energy generation from reactors or radiation generators.",
    "keys": {
      "ClassName": "@roblox/globaltype/Uranium.ClassName"
    }
  },
  "@roblox/globaltype/Uranium.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/UserInputObject": {
    "documentation": "The Waste of Space equivalent of ROBLOX's <code>InputObject</code>.",
    "keys": {
      "KeyCode": "@roblox/globaltype/UserInputObject.KeyCode",
      "KeyName": "@roblox/globaltype/UserInputObject.KeyName",
      "UserInputState": "@roblox/globaltype/UserInputObject.UserInputState",
      "UserInputType": "@roblox/globaltype/UserInputObject.UserInputType"
    }
  },
  "@roblox/globaltype/UserInputObject.KeyCode": {
    "documentation": "Contains a <code>Enum.KeyCode</code> enum that describes what kind of input was used. For types of input like keyboard, this describes what key was pressed. For inputs like the mouse, this provides no additional information."
  },
  "@roblox/globaltype/UserInputObject.KeyName": {
    "documentation": "Will be capitalised if <code>Enum.KeyCode.LeftShift</code> <em>or</em> <code>Enum.KeyCode.RightShift</code> was held at the time of the input."
  },
  "@roblox/globaltype/UserInputObject.UserInputState": {
    "documentation": "Describes what the state of input this <code>UserInputObject</code> represents, such as whether the input has began, ended, or been changed somehow."
  },
  "@roblox/globaltype/UserInputObject.UserInputType": {
    "documentation": "Describes what kind of input this <code>UserInputObject</code> represents, such as mouse, keyboard, touch or gamepad input."
  },
  "@roblox/globaltype/Valve": {
    "documentation": "Acts as a pipe when active/gray, but when black or inactive it acts as a normal object.",
    "keys": {
      "ClassName": "@roblox/globaltype/Valve.ClassName",
      "Configure": "@roblox/globaltype/Valve.Configure",
      "Configured": "@roblox/globaltype/Valve.Configured",
      "OnClick": "@roblox/globaltype/Valve.OnClick",
      "SwitchValue": "@roblox/globaltype/Valve.SwitchValue"
    }
  },
  "@roblox/globaltype/Valve.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Valve.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Valve.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Valve.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Valve.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Valve.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/Valve.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/Valve.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/ValveConfiguration": {
    "documentation": "The configuration of the <code>Valve</code> object.",
    "keys": {
      "SwitchValue": "@roblox/globaltype/ValveConfiguration.SwitchValue"
    }
  },
  "@roblox/globaltype/ValveConfiguration.SwitchValue": {
    "documentation": "Determines whether the switch is active or not."
  },
  "@roblox/globaltype/VehicleSeat": {
    "documentation": "Allows players to control vehicles by rotating when sat on.\nIt is incredibly important to have when creating vehicles.\n\nAttaching buttons to the vehicleseat will allow the player sitting on it to trigger the button by pressing a key.\nSimply attach the button to the vehicle seat, configure it to the keybind you would like, and it will allow you to trigger that button by pressing the key when sitting down in the seat.",
    "keys": {
      "ClassName": "@roblox/globaltype/VehicleSeat.ClassName",
      "Configure": "@roblox/globaltype/VehicleSeat.Configure",
      "Configured": "@roblox/globaltype/VehicleSeat.Configured",
      "EjectOccupant": "@roblox/globaltype/VehicleSeat.EjectOccupant",
      "Enabled": "@roblox/globaltype/VehicleSeat.Enabled",
      "GetOccupant": "@roblox/globaltype/VehicleSeat.GetOccupant",
      "Mode": "@roblox/globaltype/VehicleSeat.Mode",
      "OccupantChanged": "@roblox/globaltype/VehicleSeat.OccupantChanged",
      "Speed": "@roblox/globaltype/VehicleSeat.Speed"
    }
  },
  "@roblox/globaltype/VehicleSeat.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/VehicleSeat.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/VehicleSeat.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/VehicleSeat.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/VehicleSeat.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/VehicleSeat.Configured": {
    "documentation": "Fires when the object is configured."
  },
  "@roblox/globaltype/VehicleSeat.EjectOccupant": {
    "documentation": "Ejects the seat occupant.",
    "params": []
  },
  "@roblox/globaltype/VehicleSeat.Enabled": {
    "documentation": "Determines whether this seat should control its rotation. Turning this off results in a regular seat."
  },
  "@roblox/globaltype/VehicleSeat.GetOccupant": {
    "documentation": "Retrieves the <code>UserId</code> of the seat's occupant, it will be <code>nil</code> if there is no occupant.",
    "params": [],
    "returns": [
      "@roblox/globaltype/VehicleSeat.GetOccupant/returns/0"
    ]
  },
  "@roblox/globaltype/VehicleSeat.GetOccupant/returns/0": {},
  "@roblox/globaltype/VehicleSeat.Mode": {
    "documentation": "The control mode of the seat. Horizontal: Rotate horizontally with A/D. Full: Rotate horizontally and vertically with W/A/S/D. Mouse: point towards the player's mouse when holding click."
  },
  "@roblox/globaltype/VehicleSeat.OccupantChanged": {
    "documentation": "Fires when the occupant of the seat changes."
  },
  "@roblox/globaltype/VehicleSeat.Speed": {
    "documentation": "The speed at which the seat will rotate."
  },
  "@roblox/globaltype/VehicleSeatConfiguration": {
    "documentation": "The configuration of the <code>VehicleSeat</code> object.",
    "keys": {
      "Enabled": "@roblox/globaltype/VehicleSeatConfiguration.Enabled",
      "Mode": "@roblox/globaltype/VehicleSeatConfiguration.Mode",
      "Speed": "@roblox/globaltype/VehicleSeatConfiguration.Speed"
    }
  },
  "@roblox/globaltype/VehicleSeatConfiguration.Enabled": {
    "documentation": "Determines whether this seat should control its rotation. Turning this off results in a regular seat."
  },
  "@roblox/globaltype/VehicleSeatConfiguration.Mode": {
    "documentation": "The control mode of the seat. Horizontal: Rotate horizontally with A/D. Full: Rotate horizontally and vertically with W/A/S/D. Mouse: point towards the player's mouse when holding click."
  },
  "@roblox/globaltype/VehicleSeatConfiguration.Speed": {
    "documentation": "The speed at which the seat will rotate."
  },
  "@roblox/globaltype/VehicleSeatMode": {
    "documentation": "The mode of the vehicle seat, used in the <code>VehicleSeat</code> part."
  },
  "@roblox/globaltype/VintagePlasmaPistol": {
    "documentation": "They don't make em like they used to.",
    "keys": {
      "ClassName": "@roblox/globaltype/VintagePlasmaPistol.ClassName"
    }
  },
  "@roblox/globaltype/VintagePlasmaPistol.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/VitalScanner": {
    "documentation": "Displays chemicals another player has absorbed.",
    "keys": {
      "ClassName": "@roblox/globaltype/VitalScanner.ClassName"
    }
  },
  "@roblox/globaltype/VitalScanner.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Warhead": {
    "documentation": "Causes a powerful explosion when triggered. You can use a delay wire to make it explode after a few seconds and not immediately.\nThe only down-side of the warhead is that it is blocked completely by energy shields.",
    "keys": {
      "ClassName": "@roblox/globaltype/Warhead.ClassName",
      "Damaged": "@roblox/globaltype/Warhead.Damaged",
      "Triggered": "@roblox/globaltype/Warhead.Triggered"
    }
  },
  "@roblox/globaltype/Warhead.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Warhead.Damaged": {
    "documentation": "Fires when the object is damaged."
  },
  "@roblox/globaltype/Warhead.Triggered": {
    "documentation": "Fires when the object is triggered and provides a reference to the part that triggered it.\n\nIf a <code>Microcontroller</code> indirectly initiated the triggering of an object, it will return the object rather than the <code>Microcontroller</code>, whereas in the case of directly triggering the object (i.e., calling <code>:Trigger</code>, but not <code>TriggerPort</code>), it <em>will</em> return the microcontroller.\n\nThe trigger source remains unchanged if the trigger is sent through something such as an <code>Antenna</code>, but will be set to a <code>RemoteControl</code> if one is present along the trigger line."
  },
  "@roblox/globaltype/Water": {
    "documentation": "The basis of all life, and is a liquid found in terra, forest, ocean and certain tundras and rogue planets.\nAt 212 degrees, the water evaporates into steam.",
    "keys": {
      "ClassName": "@roblox/globaltype/Water.ClassName"
    }
  },
  "@roblox/globaltype/Water.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/WaterCooler": {
    "documentation": "Removes -100 heat from the surrounding area, when supplied with power. Performs the same amount of cooling that five coolers would, give or take.",
    "keys": {
      "ClassName": "@roblox/globaltype/WaterCooler.ClassName"
    }
  },
  "@roblox/globaltype/WaterCooler.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Wedge": {
    "documentation": "A triangular shaped template object.",
    "keys": {
      "ClassName": "@roblox/globaltype/Wedge.ClassName"
    }
  },
  "@roblox/globaltype/Wedge.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Winch": {
    "documentation": "A special device used to control the length of constraints attached to it.\nWhen attaching a constraint to the Winch, click the Winch first.\nWhen triggered with polysilicon, it will increase (Activate) or decrease (Deactivate).",
    "keys": {
      "AdjustLength": "@roblox/globaltype/Winch.AdjustLength",
      "ClassName": "@roblox/globaltype/Winch.ClassName",
      "Configure": "@roblox/globaltype/Winch.Configure",
      "DeltaLength": "@roblox/globaltype/Winch.DeltaLength",
      "MaxLength": "@roblox/globaltype/Winch.MaxLength",
      "MinLength": "@roblox/globaltype/Winch.MinLength",
      "SetLength": "@roblox/globaltype/Winch.SetLength"
    }
  },
  "@roblox/globaltype/Winch.AdjustLength": {
    "params": [
      {
        "documentation": "@roblox/globaltype/Winch.AdjustLength",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Winch.AdjustLength/params/1",
        "name": "adjustment"
      }
    ]
  },
  "@roblox/globaltype/Winch.AdjustLength/params/1": {},
  "@roblox/globaltype/Winch.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Winch.Configure": {
    "documentation": "A method to configure the object, will yield until specified string configurables are filtered.",
    "params": [
      {
        "documentation": "@roblox/globaltype/Winch.Configure",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Winch.Configure/params/1",
        "name": "configuration"
      }
    ]
  },
  "@roblox/globaltype/Winch.Configure/params/1": {
    "documentation": "The configuration to apply to the object"
  },
  "@roblox/globaltype/Winch.DeltaLength": {
    "documentation": "The length change in studs when triggered by Polysilicon."
  },
  "@roblox/globaltype/Winch.MaxLength": {
    "documentation": "The maximum length in studs of the rope."
  },
  "@roblox/globaltype/Winch.MinLength": {
    "documentation": "The minimum length in studs of the rope."
  },
  "@roblox/globaltype/Winch.SetLength": {
    "params": [
      {
        "documentation": "@roblox/globaltype/Winch.SetLength",
        "name": "self"
      },
      {
        "documentation": "@roblox/globaltype/Winch.SetLength/params/1",
        "name": "length"
      }
    ]
  },
  "@roblox/globaltype/Winch.SetLength/params/1": {},
  "@roblox/globaltype/WinchConfiguration": {
    "documentation": "The configuration of the <code>Winch</code> object.",
    "keys": {
      "DeltaLength": "@roblox/globaltype/WinchConfiguration.DeltaLength",
      "MaxLength": "@roblox/globaltype/WinchConfiguration.MaxLength",
      "MinLength": "@roblox/globaltype/WinchConfiguration.MinLength"
    }
  },
  "@roblox/globaltype/WinchConfiguration.DeltaLength": {
    "documentation": "The length change in studs when triggered by Polysilicon."
  },
  "@roblox/globaltype/WinchConfiguration.MaxLength": {
    "documentation": "The maximum length in studs of the rope."
  },
  "@roblox/globaltype/WinchConfiguration.MinLength": {
    "documentation": "The minimum length in studs of the rope."
  },
  "@roblox/globaltype/WindTurbine": {
    "documentation": "Creates rotation using the wind.\nUnreliable and large motor.\nDoes not work in space or no-atmosphere planets.",
    "keys": {
      "ClassName": "@roblox/globaltype/WindTurbine.ClassName",
      "Loop": "@roblox/globaltype/WindTurbine.Loop"
    }
  },
  "@roblox/globaltype/WindTurbine.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/WindTurbine.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Wing": {
    "documentation": "Creates lift from being pushed forward.\nWorks at higher altitudes and at better angles than a CrudeWing.\nDoes not work in space or in non atmospheric planets.",
    "keys": {
      "ClassName": "@roblox/globaltype/Wing.ClassName",
      "Loop": "@roblox/globaltype/Wing.Loop"
    }
  },
  "@roblox/globaltype/Wing.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/Wing.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  },
  "@roblox/globaltype/Wire": {
    "documentation": "Allows electrical objects to interact with each other when connected by wires. For example, attaching a wire between a powercell and a light will allow electricity to move through the wire, allowing the light to function causing a source of light to be created.",
    "keys": {
      "ClassName": "@roblox/globaltype/Wire.ClassName"
    }
  },
  "@roblox/globaltype/Wire.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/WirelessButton": {
    "documentation": "Similar to a button, but can be clicked from infinite distances and cannot be used for keybinds.",
    "keys": {
      "ClassName": "@roblox/globaltype/WirelessButton.ClassName",
      "OnClick": "@roblox/globaltype/WirelessButton.OnClick"
    }
  },
  "@roblox/globaltype/WirelessButton.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/WirelessButton.OnClick": {
    "documentation": "Fires when the object is clicked."
  },
  "@roblox/globaltype/Wood": {
    "documentation": "<b>A natural resource found in trees and flora.</b> It is a simple and yet effective material that is used for simple objects and structures. These can be mainly found in terra and forest planets, but can occasionally be found in temperate tundra and desert planets.",
    "keys": {
      "ClassName": "@roblox/globaltype/Wood.ClassName"
    }
  },
  "@roblox/globaltype/Wood.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/ZapWire": {
    "documentation": "Electrocutes players when touched. Can be used to set flammable objects on fire.",
    "keys": {
      "ClassName": "@roblox/globaltype/ZapWire.ClassName"
    }
  },
  "@roblox/globaltype/ZapWire.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/primitive": {
    "documentation": "A primitive type, used to represent a primitive value stored within the file system."
  },
  "@roblox/globaltype/tinnitus": {
    "documentation": "An interesting spring which does strange things.",
    "keys": {
      "ClassName": "@roblox/globaltype/tinnitus.ClassName",
      "Loop": "@roblox/globaltype/tinnitus.Loop"
    }
  },
  "@roblox/globaltype/tinnitus.ClassName": {
    "documentation": "The name of the class of the object."
  },
  "@roblox/globaltype/tinnitus.Loop": {
    "documentation": "Fires when the object is updated by the game loop."
  }
}